{"version":3,"sources":["webpack:///./node_modules/bcrypto/lib/js/elliptic.js"],"names":["_construct","_get","_inherits","_possibleConstructorReturn","_getPrototypeOf","_slicedToArray","_classCallCheck","_createClass","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","_unsupportedIterableToArray","length","i","F","s","done","value","e","_e3","f","TypeError","err","normalCompletion","didErr","step","next","_e4","return","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","custom","BN","types","jsfIndex","uid","Curve","Point","type","conf","id","ossl","endian","hash","prefix","context","prime","p","red","fieldSize","fieldBits","adjustedSize","signBit","mask","h","q","z","g","nh","scalarSize","scalarBits","zero","one","two","three","four","i2","i3","i4","i6","torsion","endo","hi","_init","key","assert","Red","Buffer","fromJSON","mont","precompute","byteLength","bitLength","mul","toRed","ushrn","redInvert","redSqr","redMul","word","point","_scale","memoize","isIsomorphic","isIsogenous","sign","isOdd","cmpn","pointFromJSON","isZero","x","redNeg","out","set","Set","redIAdd","pointFromX","clone","isInfinity","normalize","_i","_arr","neg","has","push","add","sort","a","b","cmp","k","pre","windows","_p$_getWindows","_getWindows","width","points","size","steps","acc","jpoint","_bits","bits","isNeg","doubles","_p$_getDoubles","_getDoubles","naf","max","getNAF","Math","ceil","repr","j","nafW","_k","getFixedNAF","I","sub","w","_p$_safeNAF","_safeNAF","dbl","coeffs","wnd","coeff","Error","ppoint","pcoeff","_i2","_point","_coeff","_getNAF","_getJNAF","getJNAF","nafw","_i3","curve","invert","eq","_scaleShort","_scaleMont","_scaleEdwards","rng","num","base","imod","cast","forceRed","y","xx","xz","yy","yz","solveX2","redSqrt","solveY2","u","bytes","pake","undefined","isBuffer","s1","s2","u1","decodeUniform","u2","p1","pointFromUniform","p2","p3","mulH","subgroup","p0","randomField","hint","randomInt","pointToUniform","message","encodeUniform","concat","random","validate","jmulAll","_endoWnafMulAdd","_wnafMulAdd","imulH","iushln","imuln","zi","invertAll","_i4","scale","normalizeAll","scalar","top","lsb","msb","_ref","off","clamp","encode","decode","encodeScalar","clamped","fromRed","iumaskn","compact","b0","a0","toJSON","json","redIsHigh","isub","d","c","toJ","NAF","odds","affinizeAll","wnds","dblp","Windows","power","dbls","Doubles","blinding","blind","randomScalar","unblind","Blinding","_this$pre$windows","_this$pre$doubles","_this$pre$blinding","iadd","randomize","Precomp","beta","_getBeta","_getBlinding","pow","r","jmulH","jmul","_this$curve","iaddn","jmuln","jmulBlind","k1","k2","jmulAdd","jdiv","jdivn","jdivH","_hasDoubles","_fixedNafMul","_wnafMul","_this$_blind","_blind","_this$_blind2","t","getX","getY","ShortCurve","_Curve","_super","_this","ShortPoint","ai","zeroA","threeA","redN","pmodn","highOrder","smallGap","_finalize","Endo","_getEndomorphism","mod","div","odd","_isomorphism","_this$_findRS","_findRS","_this$_findRS2","redMuln","MontCurve","_this$_findRS3","_this$_findRS4","r3","redAdd","redSub","EdwardsCurve","redIsOdd","redINeg","_u","redDiv","field","_u2","uncube","_u3","_u4","_u5","_u6","redJacobi","_u7","_u8","u4","u6","u3","_scale0","_scale1","_curve$_short","_short","_curve$_short2","_curve$g","nx","a3","bi","ny","_curve$_short3","_curve$_short4","_curve$g2","a5","d5","dma","d5a","da5","ypz","ymz","redIMuln","index","modrn","lambda","_this$_getEndoRoots","_getEndoRoots","_this$_getEndoRoots2","b1","b2","_this$_getEndoRoots3","_this$_getEndoRoots4","l1","l2","basis","_getEndoBasis","_getEndoPrecomp","a2","_this$_egcdSqrt","_egcdSqrt","_this$_egcdSqrt2","rl","tl","rl1","tl1","rl2","tl2","a1","lhs","sqr","rhs","Vector","sqrtn","v","x1","y1","x2","y2","quo","_basis","v1","v2","align","g1","g2","shift","ushln","divRound","ucmp","_this$endo$basis","c1","c2","q1","ineg","q2","npoints","ncoeffs","_this$_endoBeta","_endoBeta","_this$_endoBeta2","_this$_endoSplit","_endoSplit","_this$_endoSplit2","z2","ba","bza","t0","t1","alpha","redIsSquare","a2x2","abx2","b23","axb","redISub","n0","n1","redDivSqrt","gz","z3","u2t1","t2","t3","t4","x3","y3","_this$_svdwf","_svdwf","_this$_svdwf2","z4","gz2","x2z","xz2","c0","t5","n2","n3","_this$_svdwf3","JPoint","cubeRoots","inf","solveY","coords","solveX","_this$_scale","_this$_scale2","_x","ad6","_this$_scale3","_this$_scale4","MontPoint","_point$curve","_this$_scale5","_this$_scale6","EdwardsPoint","_point$curve2","_this$_scale7","_this$_scale8","_x2","cpoint","_sswu","_svdw","_this2","wrapErrors","_sswui","_svdwi","toP","encodeX","decodeEven","decodeSquare","_this$_short","_this$_short2","_curve$_scale","_curve$_scale2","pointFromShort","_this$_mont","_mont","_this$_mont2","_this$_scale9","_this$_scale10","_this$_edwards","_edwards","_this$_edwards2","_this$_scale11","_this$_scale12","isComplete","curveA","curveB","customB","_customA","_u12","customA","_Point","_super2","_this3","_this4","xb","map","comb","_nx","_ny","l","m","order","redIsEven","_p","alloc","_x3","encodeField","copy","_toPretty","form","decodeField","_x4","_p2","_Point2","_super3","_this5","zOne","_this$curve2","z6","aa","nz","_mixedAdd","_add","_addJA","_addJJ","z1z1","z2z2","hh","hhh","_dbl0","_dbl3","_dblJ","zz","delta","gamma","xmdelta","xpdelta","beta4","beta8","gamma28","zz1","zz2","zzz1","zzz2","inf1","inf2","rx","eqR","rn","toPretty","_Curve2","_super4","_this6","a24","b3","d0","d1","wa","wb","swap","_curve$_scale3","_curve$_scale4","inject","_solveY0","x0","y0","redPown","XPoint","_this$_scale13","_this$_scale14","nu","nv","uu","uz","vv","vz","_c","_uu","_uz","_vv","_vz","_c2","_uu2","_uz2","_vv2","_vz2","_elligator2","_this7","_invert2","_this$_short3","_this$_short4","_curve$_scale5","_curve$_scale6","pointFromMont","_this$_mont3","_this$_mont4","_this$_edwards3","_this$_edwards4","_Point3","_super5","_this8","m1","m2","xpoint","toX","decodeX","_Point4","_super6","_this9","ax2","bb","da","cb","x5","z5","x4","bit","_this$diffAddDbl","diffAddDbl","_this$diffAddDbl2","_this$diffAddDbl3","_this$diffAddDbl4","_Curve3","_super7","_this10","si","smi","twisted","oneA","mOneA","smallD","alt","d2","d3","ad14","a2d","ad2","redDivn","apd","amd","_curve$_scale7","_curve$_scale8","_curve$_edwards","_curve$_edwards2","ci","ci2","r2","cm1","f0","f1","f2","X","Y","X1","rX","X12","nn","nr1","X2","tt","tz","toMont","ad","amd4","_mulD","_mulA","_x5","_y2","_dxy","_lhs","_rhs","_tz","_xy","dxy","xy","_a","d24","_a2","_this$_scale15","_this$_scale16","x6","x12","u5","divn","_xx","_xz","_yy","_yz","_xx2","_xz2","_yy2","_yz2","nt","_alt","u0","pointFromEdwards","pointFromHash","pointToHash","_this$_short5","_this$_short6","_curve$_scale9","_curve$_scale10","_this$_mont5","_this$_mont6","_this$_edwards5","_this$_edwards6","curveD","_Point5","_super8","_this11","_check","_addM1","_addA","_dbl","setn","encodeAdjusted","decodeAdjusted","testn","pointFromY","func","_step","_iterator","_step2","_iterator2","item","_step3","_iterator3","_step4","_iterator4","_step5","_iterator5","curves","__proto__","P192","_ShortCurve","_super9","P224","_ShortCurve2","_super10","P256","_ShortCurve3","_super11","P384","_ShortCurve4","_super12","P521","_ShortCurve5","_super13","SECP256K1","_ShortCurve6","_super14","BRAINPOOLP256","_ShortCurve7","_super15","BRAINPOOLP384","_ShortCurve8","_super16","BRAINPOOLP512","_ShortCurve9","_super17","X25519","_MontCurve","_super18","X448","_MontCurve2","_super19","MONT448","_MontCurve3","_super20","ED25519","_EdwardsCurve","_super21","ISO448","_EdwardsCurve2","_super22","ED448","_EdwardsCurve3","_super23","cache","_i5","carry","jsf","m14","m24","m8","_m","_i6","getJSF","ja","jb","val","msg","captureStackTrace","fn","r0","isubn","idivn","redPow","mod9","_e","_e2","addn","_r","cubeRoot","r1","_step6","_iterator6","root","randomBits","toNumber","method","self","WeakMap","get","str","chunks","_i7","join","exports","toUpperCase","_Curve4","_len","args","_key","register"],"mappings":"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","file":"2b38c15a-8d1f50873d22d5187791.js","sourcesContent":["/*!\n * elliptic.js - elliptic curves for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/elliptic:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/elliptic\n *\n * Formulas from DJB and Tanja Lange [EFD].\n *\n * References:\n *\n *   [GECC] Guide to Elliptic Curve Cryptography\n *     D. Hankerson, A. Menezes, and S. Vanstone\n *     https://tinyurl.com/guide-to-ecc\n *\n *   [GLV] Faster Point Multiplication on Elliptic Curves\n *     R. Gallant, R. Lambert, and S. Vanstone\n *     https://link.springer.com/content/pdf/10.1007/3-540-44647-8_11.pdf\n *\n *   [MONT1] Montgomery curves and the Montgomery ladder\n *     Daniel J. Bernstein, Tanja Lange\n *     https://eprint.iacr.org/2017/293.pdf\n *\n *   [SQUARED] Elligator Squared\n *     Mehdi Tibouchi\n *     https://eprint.iacr.org/2014/043.pdf\n *\n *   [SEC1] SEC 1 - Standards for Efficient Cryptography Group\n *     Certicom Research\n *     https://www.secg.org/sec1-v2.pdf\n *\n *   [SEC2] SEC 2: Recommended Elliptic Curve Domain Parameters\n *     Certicom Research\n *     https://www.secg.org/sec2-v2.pdf\n *\n *   [SIDE1] Elliptic Curves and Side-Channel Attacks\n *     Marc Joye\n *     https://pdfs.semanticscholar.org/8d69/9645033e25d74fcfd4cbf07a770d2e943e14.pdf\n *\n *   [BLIND] Side-Channel Analysis on Blinding Regular Scalar Multiplications\n *     B. Feix, M. Roussellet, A. Venelli\n *     https://eprint.iacr.org/2014/191.pdf\n *\n *   [ALT] Alternative Elliptic Curve Representations\n *     R. Struik\n *     https://tools.ietf.org/id/draft-ietf-lwig-curve-representations-02.html\n *\n *   [ARITH1] Arithmetic of Elliptic Curves\n *     Christophe Doche, Tanja Lange\n *     Handbook of Elliptic and Hyperelliptic Curve Cryptography\n *     Page 267, Section 13 (978-1-58488-518-4)\n *     https://hyperelliptic.org/HEHCC/index.html\n *\n *   [ARITH2] The Arithmetic of Elliptic Curves, 2nd Edition\n *     Joseph H. Silverman\n *     http://www.pdmi.ras.ru/~lowdimma/BSD/Silverman-Arithmetic_of_EC.pdf\n *\n *   [EFD] Explicit-Formulas Database\n *     Daniel J. Bernstein, Tanja Lange\n *     https://hyperelliptic.org/EFD/index.html\n *\n *   [SAFE] SafeCurves: choosing safe curves for elliptic-curve cryptography\n *     Daniel J. Bernstein\n *     https://safecurves.cr.yp.to/\n *\n *   [4GLV] Refinement of the Four-Dimensional GLV Method on Elliptic Curves\n *     Hairong Yi, Yuqing Zhu, and Dongdai Lin\n *     http://www.site.uottawa.ca/~cadams/papers/prepro/paper_19_slides.pdf\n *\n *   [SSWU1] Efficient Indifferentiable Hashing into Ordinary Elliptic Curves\n *     E. Brier, J. Coron, T. Icart, D. Madore, H. Randriam, M. Tibouchi\n *     https://eprint.iacr.org/2009/340.pdf\n *\n *   [SSWU2] Rational points on certain hyperelliptic curves over finite fields\n *     Maciej Ulas\n *     https://arxiv.org/abs/0706.1448\n *\n *   [H2EC] Hashing to Elliptic Curves\n *     A. Faz-Hernandez, S. Scott, N. Sullivan, R. S. Wahby, C. A. Wood\n *     https://git.io/JeWz6\n *     https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve\n *\n *   [SVDW1] Construction of Rational Points on Elliptic Curves\n *     A. Shallue, C. E. van de Woestijne\n *     https://works.bepress.com/andrew_shallue/1/download/\n *\n *   [SVDW2] Indifferentiable Hashing to Barreto-Naehrig Curves\n *     Pierre-Alain Fouque, Mehdi Tibouchi\n *     https://www.di.ens.fr/~fouque/pub/latincrypt12.pdf\n *\n *   [SVDW3] Covert ECDH over secp256k1\n *     Pieter Wuille\n *     https://gist.github.com/sipa/29118d3fcfac69f9930d57433316c039\n *\n *   [MONT2] Montgomery Curve (wikipedia)\n *     https://en.wikipedia.org/wiki/Montgomery_curve\n *\n *   [MONT3] Montgomery Curves and their arithmetic\n *     C. Costello, B. Smith\n *     https://eprint.iacr.org/2017/212.pdf\n *\n *   [ELL2] Elliptic-curve points indistinguishable from uniform random strings\n *     D. Bernstein, M. Hamburg, A. Krasnova, T. Lange\n *     https://elligator.cr.yp.to/elligator-20130828.pdf\n *\n *   [RFC7748] Elliptic Curves for Security\n *     A. Langley, M. Hamburg, S. Turner\n *     https://tools.ietf.org/html/rfc7748\n *\n *   [TWISTED] Twisted Edwards Curves\n *     D. Bernstein, P. Birkner, M. Joye, T. Lange, C. Peters\n *     https://eprint.iacr.org/2008/013.pdf\n *\n *   [ELL1] Injective Encodings to Elliptic Curves\n *     P. Fouque, A. Joux, M. Tibouchi\n *     https://eprint.iacr.org/2013/373.pdf\n *\n *   [ISOGENY] Twisting Edwards curves with isogenies\n *     Mike Hamburg\n *     https://www.shiftleft.org/papers/isogeny/isogeny.pdf\n *\n *   [RFC8032] Edwards-Curve Digital Signature Algorithm (EdDSA)\n *     S. Josefsson, SJD AB, I. Liusvaara\n *     https://tools.ietf.org/html/rfc8032\n *\n *   [SCHNORR] Schnorr Signatures for secp256k1\n *     Pieter Wuille\n *     https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki\n *\n *   [BIP340] Schnorr Signatures for secp256k1\n *     Pieter Wuille, Jonas Nick, Tim Ruffing\n *     https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n *\n *   [JCEN12] Efficient Software Implementation of Public-Key Cryptography\n *            on Sensor Networks Using the MSP430X Microcontroller\n *     C. P. L. Gouvea, L. B. Oliveira, J. Lopez\n *     http://conradoplg.cryptoland.net/files/2010/12/jcen12.pdf\n *\n *   [FIPS186] Federal Information Processing Standards Publication\n *     National Institute of Standards and Technology\n *     https://tinyurl.com/fips-186-3\n *\n *   [RFC5639] Elliptic Curve Cryptography (ECC) Brainpool\n *             Standard Curves and Curve Generation\n *     M. Lochter, BSI, J. Merkle\n *     https://tools.ietf.org/html/rfc5639\n *\n *   [TWISTEQ] Twisted Edwards & Short Weierstrass Equivalence\n *     Christopher Jeffrey\n *     https://gist.github.com/chjj/16ba7fa08d64e8dda269a9fe5b2a8bbc\n *\n *   [ECPM] Elliptic Curve Point Multiplication (wikipedia)\n *     https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication\n */\n'use strict';\n\nvar _construct = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/construct\");\n\nvar _get = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _slicedToArray = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chasemanning/Documents/repositories/waifusion-site/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _require = require('../internal/custom'),\n    custom = _require.custom;\n\nvar BN = require('../bn');\n/*\n * Constants\n */\n\n\nvar types = {\n  AFFINE: 0,\n  JACOBIAN: 1,\n  PROJECTIVE: 2,\n  EXTENDED: 3\n};\nvar jsfIndex = [-3, // -1 -1\n-1, // -1 0\n-5, // -1 1\n-7, // 0 -1\n0, // 0 0\n7, // 0 1\n5, // 1 -1\n1, // 1 0\n3 // 1 1\n];\nvar USE_FIXED = false;\nvar uid = 0;\n/**\n * Curve\n */\n\nvar Curve = /*#__PURE__*/function () {\n  function Curve(Point, type, conf) {\n    _classCallCheck(this, Curve);\n\n    this.Point = null;\n    this.id = null;\n    this.uid = uid++;\n    this.ossl = null;\n    this.type = 'base';\n    this.endian = 'be';\n    this.hash = null;\n    this.prefix = null;\n    this.context = false;\n    this.prime = null;\n    this.p = null;\n    this.red = null;\n    this.fieldSize = 0;\n    this.fieldBits = 0;\n    this.adjustedSize = 0;\n    this.signBit = 0;\n    this.mask = 0;\n    this.n = null;\n    this.h = null;\n    this.q = null;\n    this.z = null;\n    this.g = null;\n    this.nh = null;\n    this.scalarSize = 0;\n    this.scalarBits = 0;\n    this.zero = null;\n    this.one = null;\n    this.two = null;\n    this.three = null;\n    this.four = null;\n    this.i2 = null;\n    this.i3 = null;\n    this.i4 = null;\n    this.i6 = null;\n    this.torsion = null;\n    this.endo = null;\n    this.hi = null;\n\n    this._init(Point, type, conf);\n  }\n\n  _createClass(Curve, [{\n    key: \"_init\",\n    value: function _init(Point, type, conf) {\n      assert(typeof Point === 'function');\n      assert(typeof type === 'string');\n      assert(conf && typeof conf === 'object');\n      assert(conf.red == null || conf.red instanceof BN.Red);\n      assert(conf.p != null, 'Must pass a prime.');\n      assert(conf.id == null || typeof conf.id === 'string');\n      assert(conf.ossl == null || typeof conf.ossl === 'string');\n      assert(conf.endian == null || typeof conf.endian === 'string');\n      assert(conf.hash == null || typeof conf.hash === 'string');\n      assert(conf.prefix == null || typeof conf.prefix === 'string');\n      assert(conf.context == null || typeof conf.context === 'boolean');\n      assert(conf.prime == null || typeof conf.prime === 'string');\n      assert(conf.torsion == null || Array.isArray(conf.torsion)); // Point class.\n\n      this.Point = Point; // Meta.\n\n      this.id = conf.id || null;\n      this.ossl = conf.ossl || null;\n      this.type = type;\n      this.endian = conf.endian || (type === 'short' ? 'be' : 'le');\n      this.hash = conf.hash || null;\n      this.prefix = conf.prefix ? Buffer.from(conf.prefix, 'binary') : null;\n      this.context = conf.context || false;\n      this.prime = conf.prime || null; // Prime.\n\n      this.p = BN.fromJSON(conf.p); // Reduction.\n\n      if (conf.red) {\n        this.red = conf.red;\n      } else {\n        // Use Montgomery when there is no fast reduction for the prime.\n        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n        this.red.precompute();\n      } // Precalculate encoding length.\n\n\n      this.fieldSize = this.p.byteLength();\n      this.fieldBits = this.p.bitLength();\n      this.adjustedSize = this.fieldSize + ((this.fieldBits & 7) === 0);\n      this.signBit = this.adjustedSize * 8 - 1;\n      this.mask = 0xff;\n      if ((this.fieldBits & 7) !== 0) this.mask = (1 << (this.fieldBits & 7)) - 1; // Curve configuration, optional.\n\n      this.n = BN.fromJSON(conf.n || '0');\n      this.h = BN.fromJSON(conf.h || '1');\n      this.q = this.n.mul(this.h);\n      this.z = BN.fromJSON(conf.z || '0').toRed(this.red);\n      this.g = null;\n      this.nh = this.n.ushrn(1);\n      this.scalarSize = this.n.byteLength();\n      this.scalarBits = this.n.bitLength(); // Useful for many curves.\n\n      this.zero = new BN(0).toRed(this.red);\n      this.one = new BN(1).toRed(this.red);\n      this.two = new BN(2).toRed(this.red);\n      this.three = new BN(3).toRed(this.red);\n      this.four = new BN(4).toRed(this.red); // Inverses.\n\n      this.i2 = this.two.redInvert();\n      this.i3 = this.three.redInvert();\n      this.i4 = this.i2.redSqr();\n      this.i6 = this.i2.redMul(this.i3); // Torsion.\n\n      this.torsion = new Array(this.h.word(0));\n\n      for (var i = 0; i < this.torsion.length; i++) {\n        this.torsion[i] = this.point();\n      } // Endomorphism.\n\n\n      this.endo = null; // Cache.\n\n      this.hi = null; // Memoize.\n\n      this._scale = memoize(this._scale, this);\n      this.isIsomorphic = memoize(this.isIsomorphic, this);\n      this.isIsogenous = memoize(this.isIsogenous, this); // Sanity checks.\n\n      assert(this.p.sign() > 0 && this.p.isOdd());\n      assert(this.n.sign() >= 0);\n      assert(this.h.sign() > 0 && this.h.cmpn(255) <= 0);\n      assert(this.endian === 'be' || this.endian === 'le');\n      return this;\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize(conf) {\n      assert(conf && typeof conf === 'object'); // Create base point.\n\n      this.g = conf.g ? this.pointFromJSON(conf.g) : this.point(); // Parse small order points.\n\n      if (conf.torsion) {\n        assert(conf.torsion.length === this.torsion.length);\n\n        for (var i = 0; i < this.torsion.length; i++) {\n          this.torsion[i] = this.pointFromJSON(conf.torsion[i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_findTorsion\",\n    value: function _findTorsion() {\n      // Find all torsion points by grinding.\n      assert(!this.n.isZero());\n      var h = this.h.word(0);\n      var x = this.one.redNeg();\n      var out = [this.point()];\n      var set = new Set();\n      var len = h;\n\n      while (out.length < len) {\n        var p = void 0;\n        x.redIAdd(this.one);\n\n        try {\n          p = this.pointFromX(x.clone());\n        } catch (e) {\n          continue;\n        }\n\n        try {\n          p = p.mul(this.n);\n        } catch (e) {\n          len = 2;\n          continue;\n        }\n\n        if (p.isInfinity()) continue;\n        p.normalize();\n\n        for (var _i = 0, _arr = [p, p.neg()]; _i < _arr.length; _i++) {\n          var point = _arr[_i];\n          var key = point.key();\n\n          if (!set.has(key)) {\n            out.push(point);\n            set.add(key);\n          }\n        }\n      }\n\n      out.sort(function (a, b) {\n        return a.cmp(b);\n      });\n\n      while (out.length < h) {\n        out.push(this.point());\n      }\n\n      return out;\n    }\n  }, {\n    key: \"_fixedMul\",\n    value: function _fixedMul(p, k) {\n      // Fixed-base method for point multiplication.\n      //\n      // [ECPM] \"Windowed method\".\n      // [GECC] Page 95, Section 3.3.\n      //\n      // Windows are appropriately shifted to avoid any\n      // doublings. This reduces a 256 bit multiplication\n      // down to 64 additions with a window size of 4.\n      assert(p instanceof Point);\n      assert(k instanceof BN);\n      assert(p.pre && p.pre.windows); // Get precomputed windows.\n\n      var _p$_getWindows = p._getWindows(0, 0),\n          width = _p$_getWindows.width,\n          points = _p$_getWindows.points; // Recompute window size.\n\n\n      var size = 1 << width; // Recompute steps.\n\n      var bits = k.bitLength();\n      var steps = (bits + width - 1) / width >>> 0; // Multiply.\n\n      var acc = this.jpoint();\n\n      for (var i = 0; i < steps; i++) {\n        var _bits = k.bits(i * width, width);\n\n        acc = acc.add(points[i * size + _bits]);\n      } // Adjust sign.\n\n\n      if (k.isNeg()) acc = acc.neg();\n      return acc;\n    }\n  }, {\n    key: \"_fixedNafMul\",\n    value: function _fixedNafMul(p, k) {\n      // Fixed-base NAF windowing method for point multiplication.\n      //\n      // [GECC] Algorithm 3.42, Page 105, Section 3.3.\n      assert(p instanceof Point);\n      assert(k instanceof BN);\n      assert(p.pre && p.pre.doubles); // Get precomputed doubles.\n\n      var _p$_getDoubles = p._getDoubles(0, 0),\n          step = _p$_getDoubles.step,\n          points = _p$_getDoubles.points; // Get fixed NAF (in a more windowed form).\n\n\n      var naf = getFixedNAF(k, 2, k.bitLength() + 1, step); // Compute steps.\n\n      var I = ((1 << step + 1) - (step % 2 === 0 ? 2 : 1)) / 3; // Multiply.\n\n      var a = this.jpoint();\n      var b = this.jpoint();\n\n      for (var i = I; i > 0; i--) {\n        for (var j = 0; j < naf.length; j++) {\n          var nafW = naf[j];\n          if (nafW === i) b = b.add(points[j]);else if (nafW === -i) b = b.sub(points[j]);\n        }\n\n        a = a.add(b);\n      }\n\n      return a;\n    }\n  }, {\n    key: \"_wnafMul\",\n    value: function _wnafMul(w, p, k) {\n      // Window NAF method for point multiplication.\n      //\n      // [GECC] Algorithm 3.36, Page 100, Section 3.3.\n      assert(p instanceof Point);\n      assert(k instanceof BN); // Precompute window.\n\n      var _p$_safeNAF = p._safeNAF(w),\n          width = _p$_safeNAF.width,\n          points = _p$_safeNAF.points; // Get NAF form.\n\n\n      var naf = getNAF(k, width, k.bitLength() + 1); // Add `this`*(N+1) for every w-NAF index.\n\n      var acc = this.jpoint();\n\n      for (var i = naf.length - 1; i >= 0; i--) {\n        var z = naf[i];\n        if (i !== naf.length - 1) acc = acc.dbl();\n        if (z > 0) acc = acc.add(points[z - 1 >> 1]);else if (z < 0) acc = acc.sub(points[-z - 1 >> 1]);\n      }\n\n      return acc;\n    }\n  }, {\n    key: \"_wnafMulAdd\",\n    value: function _wnafMulAdd(w, points, coeffs) {\n      // Multiple point multiplication, also known\n      // as \"Shamir's trick\" (with interleaved NAFs).\n      //\n      // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.\n      //        Algorithm 3.51, Page 112, Section 3.3.\n      //\n      // This is particularly useful for signature\n      // verifications and mutiplications after an\n      // endomorphism split.\n      assert(w >>> 0 === w);\n      assert(Array.isArray(points));\n      assert(Array.isArray(coeffs));\n      assert(points.length === coeffs.length);\n      var length = points.length;\n      var wnd = new Array(length);\n      var naf = new Array(length); // Check arrays and calculate size.\n\n      var max = 0;\n\n      for (var i = 0; i < length; i++) {\n        var point = points[i];\n        var coeff = coeffs[i];\n        assert(point instanceof Point);\n        assert(coeff instanceof BN);\n        if (i > 0 && point.type !== points[i - 1].type) throw new Error('Cannot mix points.'); // Avoid sparse arrays.\n\n        wnd[i] = null;\n        naf[i] = null; // Compute max scalar size.\n\n        max = Math.max(max, coeff.bitLength() + 1);\n      } // Compute NAFs.\n\n\n      var ppoint = null;\n      var pcoeff = null;\n      var len = 0;\n\n      for (var _i2 = 0; _i2 < length; _i2++) {\n        var _point = points[_i2];\n        var _coeff = coeffs[_i2];\n\n        var pre = _point._getNAF(0); // Use precomputation if available.\n\n\n        if (pre) {\n          wnd[len] = pre.points;\n          naf[len] = getNAF(_coeff, pre.width, max);\n          len += 1;\n          continue;\n        } // Save last non-precomputed point.\n\n\n        if (!ppoint) {\n          ppoint = _point;\n          pcoeff = _coeff;\n          continue;\n        } // Compute JSF in NAF form.\n\n\n        wnd[len] = ppoint._getJNAF(_point);\n        naf[len] = getJNAF(pcoeff, _coeff, max);\n        ppoint = null;\n        pcoeff = null;\n        len += 1;\n      } // Regular NAF for odd points.\n\n\n      if (ppoint) {\n        var nafw = ppoint._safeNAF(w);\n\n        wnd[len] = nafw.points;\n        naf[len] = getNAF(pcoeff, nafw.width, max);\n        len += 1;\n      } // Multiply and add.\n\n\n      var acc = this.jpoint();\n\n      for (var _i3 = max - 1; _i3 >= 0; _i3--) {\n        if (_i3 !== max - 1) acc = acc.dbl();\n\n        for (var j = 0; j < len; j++) {\n          var z = naf[j][_i3];\n          if (z > 0) acc = acc.add(wnd[j][z - 1 >> 1]);else if (z < 0) acc = acc.sub(wnd[j][-z - 1 >> 1]);\n        }\n      }\n\n      return acc;\n    }\n  }, {\n    key: \"_endoWnafMulAdd\",\n    value: function _endoWnafMulAdd(points, coeffs) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"_scale\",\n    value: function _scale(curve, invert) {\n      assert(curve instanceof Curve);\n      assert(curve.p.eq(this.p));\n\n      switch (curve.type) {\n        case 'short':\n          return this._scaleShort(curve, invert);\n\n        case 'mont':\n          return this._scaleMont(curve, invert);\n\n        case 'edwards':\n          return this._scaleEdwards(curve, invert);\n\n        default:\n          throw new Error('Not implemented.');\n      }\n    }\n  }, {\n    key: \"_scaleShort\",\n    value: function _scaleShort(curve, invert) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"_scaleMont\",\n    value: function _scaleMont(curve, invert) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"_scaleEdwards\",\n    value: function _scaleEdwards(curve, invert) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isElliptic\",\n    value: function isElliptic() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"jinv\",\n    value: function jinv() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isComplete\",\n    value: function isComplete() {\n      return false;\n    }\n  }, {\n    key: \"precompute\",\n    value: function precompute(rng) {\n      assert(!this.g.isInfinity(), 'Must have base point.');\n      assert(!this.n.isZero(), 'Must have order.');\n      this.g.precompute(this.n.bitLength(), rng);\n      return this;\n    }\n  }, {\n    key: \"scalar\",\n    value: function scalar(num, base, endian) {\n      var k = new BN(num, base, endian);\n      assert(!k.red);\n      if (this.n.isZero()) return k;\n      return k.imod(this.n);\n    }\n  }, {\n    key: \"field\",\n    value: function field(num, base, endian) {\n      var x = BN.cast(num, base, endian);\n      if (x.red) return x.forceRed(this.red);\n      return x.toRed(this.red);\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"jpoint\",\n    value: function jpoint(x, y, z) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"xpoint\",\n    value: function xpoint(x, z) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"cpoint\",\n    value: function cpoint(xx, xz, yy, yz) {\n      assert(xx instanceof BN);\n      assert(xz instanceof BN);\n      assert(yy instanceof BN);\n      assert(yz instanceof BN);\n      if (xz.isZero() || yz.isZero()) return this.point();\n      var z = xz.redMul(yz).redInvert();\n      var x = xx.redMul(yz).redMul(z);\n      var y = yy.redMul(xz).redMul(z);\n      return this.point(x, y);\n    }\n  }, {\n    key: \"solveX2\",\n    value: function solveX2(y) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"solveX\",\n    value: function solveX(y) {\n      return this.solveX2(y).redSqrt();\n    }\n  }, {\n    key: \"solveY2\",\n    value: function solveY2(x) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"solveY\",\n    value: function solveY(x) {\n      return this.solveY2(x).redSqrt();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromX\",\n    value: function pointFromX(x, sign) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromY\",\n    value: function pointFromY(y, sign) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isIsomorphic\",\n    value: function isIsomorphic(curve) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isIsogenous\",\n    value: function isIsogenous(curve) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromShort\",\n    value: function pointFromShort(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromMont\",\n    value: function pointFromMont(point, sign) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromEdwards\",\n    value: function pointFromEdwards(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromUniform\",\n    value: function pointFromUniform(u) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointToUniform\",\n    value: function pointToUniform(p) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromHash\",\n    value: function pointFromHash(bytes) {\n      var pake = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // [H2EC] \"Roadmap\".\n      assert(Buffer.isBuffer(bytes));\n      assert(typeof pake === 'boolean');\n      if (bytes.length !== this.fieldSize * 2) throw new Error('Invalid hash size.'); // Random oracle encoding.\n      // Ensure a proper distribution.\n\n      var s1 = bytes.slice(0, this.fieldSize);\n      var s2 = bytes.slice(this.fieldSize);\n      var u1 = this.decodeUniform(s1);\n      var u2 = this.decodeUniform(s2);\n      var p1 = this.pointFromUniform(u1);\n      var p2 = this.pointFromUniform(u2);\n      var p3 = p1.add(p2);\n      return pake ? p3.mulH() : p3;\n    }\n  }, {\n    key: \"pointToHash\",\n    value: function pointToHash(p, subgroup, rng) {\n      // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n      assert(p instanceof this.Point);\n      assert(subgroup >>> 0 === subgroup); // Add a random torsion component.\n\n      var i = subgroup % this.torsion.length;\n      var p0 = p.add(this.torsion[i]); // Average Cost (R = sqrt):\n      //\n      //   SSWU (~4 iterations) => 8I + 16R\n      //   SVDW (~4 iterations) => 12I + 28R\n      //   Elligator 1 (~2 iterations) => 6I + 10R\n      //   Elligator 2 (~2 iterations) => 4I + 6R\n      //   Ristretto (~1 iteration) => 1I + 2R + h*1R\n\n      for (;;) {\n        var u1 = this.randomField(rng);\n        var p1 = this.pointFromUniform(u1); // Avoid 2-torsion points:\n        //   Short Weierstrass: ((A / 3) / B, 0)\n        //   Montgomery: (0, 0)\n        //   Twisted Edwards: (0, -1)\n\n        if (p1.neg().eq(p1)) continue;\n        var p2 = p0.sub(p1);\n        var hint = randomInt(rng);\n        var u2 = void 0;\n\n        try {\n          u2 = this.pointToUniform(p2, hint & 15);\n        } catch (e) {\n          if (e.message === 'Invalid point.') continue;\n          throw e;\n        }\n\n        var s1 = this.encodeUniform(u1, hint >>> 8);\n        var s2 = this.encodeUniform(u2, hint >>> 16);\n        return Buffer.concat([s1, s2]);\n      }\n    }\n  }, {\n    key: \"randomScalar\",\n    value: function randomScalar(rng) {\n      var max = this.n.isZero() ? this.p : this.n;\n      return BN.random(rng, 1, max);\n    }\n  }, {\n    key: \"randomField\",\n    value: function randomField(rng) {\n      return BN.random(rng, 1, this.p).toRed(this.red);\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint(rng) {\n      var p;\n\n      for (;;) {\n        var x = this.randomField(rng);\n        var sign = (randomInt(rng) & 1) !== 0;\n\n        try {\n          p = this.pointFromX(x, sign);\n        } catch (e) {\n          continue;\n        }\n\n        assert(p.validate());\n        return p.mulH();\n      }\n    }\n  }, {\n    key: \"mulAll\",\n    value: function mulAll(points, coeffs) {\n      return this.jmulAll(points, coeffs);\n    }\n  }, {\n    key: \"jmulAll\",\n    value: function jmulAll(points, coeffs) {\n      assert(Array.isArray(points));\n      assert(points.length === 0 || points[0] instanceof Point); // Multiply with endomorphism if we're using affine points.\n\n      if (this.endo && points.length > 0 && points[0].type === types.AFFINE) return this._endoWnafMulAdd(points, coeffs); // Otherwise, a regular Shamir's trick.\n\n      return this._wnafMulAdd(5, points, coeffs);\n    }\n  }, {\n    key: \"mulH\",\n    value: function mulH(k) {\n      assert(k instanceof BN);\n      return this.imulH(k.clone());\n    }\n  }, {\n    key: \"imulH\",\n    value: function imulH(k) {\n      assert(k instanceof BN);\n      assert(!k.red);\n      var word = this.h.word(0); // Optimize for powers of two.\n\n      if ((word & word - 1) === 0) {\n        var bits = this.h.bitLength();\n        return k.iushln(bits - 1).imod(this.n);\n      }\n\n      return k.imuln(word).imod(this.n);\n    }\n  }, {\n    key: \"normalizeAll\",\n    value: function normalizeAll(points) {\n      assert(Array.isArray(points));\n      var len = points.length;\n      var z = new Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var p = points[i];\n        assert(p instanceof Point);\n        assert(p.curve === this);\n\n        if (p.type === types.AFFINE) {\n          z[i] = this.one;\n          continue;\n        }\n\n        z[i] = p.z;\n      }\n\n      var zi = this.red.invertAll(z);\n      var out = new Array(len);\n\n      for (var _i4 = 0; _i4 < len; _i4++) {\n        out[_i4] = points[_i4].scale(zi[_i4]);\n      }\n\n      return out;\n    }\n  }, {\n    key: \"affinizeAll\",\n    value: function affinizeAll(points) {\n      return this.normalizeAll(points);\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(scalar) {\n      // [RFC7748] Page 8, Section 5.\n      // [RFC8032] Section 5.1.5 & 5.2.5.\n      assert(Buffer.isBuffer(scalar));\n      assert(scalar.length === this.scalarSize);\n      assert(this.scalarSize <= this.fieldSize);\n      var top = this.fieldBits & 7 || 8;\n      var lsb = 0;\n      var msb = this.scalarSize - 1; // Swap endianness.\n\n      if (this.endian === 'be') {\n        var _ref = [msb, lsb];\n        lsb = _ref[0];\n        msb = _ref[1];\n      } // Adjust for low order.\n\n\n      if (this.scalarSize < this.fieldSize) top = 8; // Ensure a multiple of the cofactor.\n\n      scalar[lsb] &= -this.h.word(0) & 0xff; // Clamp to the prime.\n\n      scalar[msb] &= (1 << top) - 1; // Set the high bit.\n\n      scalar[msb] |= 1 << top - 1;\n      return scalar;\n    }\n  }, {\n    key: \"splitHash\",\n    value: function splitHash(bytes) {\n      // [RFC8032] Section 5.1.6 & 5.2.6.\n      assert(Buffer.isBuffer(bytes));\n      assert(bytes.length === this.adjustedSize * 2);\n      assert(this.scalarSize <= this.adjustedSize);\n      var off = 0;\n      if (this.endian === 'be') off = this.adjustedSize - this.scalarSize;\n      var scalar = bytes.slice(off, off + this.scalarSize);\n      var prefix = bytes.slice(this.adjustedSize);\n      this.clamp(scalar);\n      return [scalar, prefix];\n    }\n  }, {\n    key: \"encodeField\",\n    value: function encodeField(x) {\n      // [SEC1] Page 12, Section 2.3.5.\n      assert(x instanceof BN);\n      assert(!x.red);\n      return x.encode(this.endian, this.fieldSize);\n    }\n  }, {\n    key: \"decodeField\",\n    value: function decodeField(bytes) {\n      // [SEC1] Page 13, Section 2.3.6.\n      assert(Buffer.isBuffer(bytes));\n      if (bytes.length !== this.fieldSize) throw new Error('Invalid field element size.');\n      return BN.decode(bytes, this.endian);\n    }\n  }, {\n    key: \"encodeAdjusted\",\n    value: function encodeAdjusted(x) {\n      assert(x instanceof BN);\n      assert(!x.red);\n      return x.encode(this.endian, this.adjustedSize);\n    }\n  }, {\n    key: \"decodeAdjusted\",\n    value: function decodeAdjusted(bytes) {\n      assert(Buffer.isBuffer(bytes));\n      if (bytes.length !== this.adjustedSize) throw new Error('Invalid field element size.');\n      return BN.decode(bytes, this.endian);\n    }\n  }, {\n    key: \"encodeScalar\",\n    value: function encodeScalar(k) {\n      // [SEC1] Page 13, Section 2.3.7.\n      assert(k instanceof BN);\n      assert(!k.red);\n      return k.encode(this.endian, this.scalarSize);\n    }\n  }, {\n    key: \"decodeScalar\",\n    value: function decodeScalar(bytes) {\n      // [SEC1] Page 14, Section 2.3.8.\n      assert(Buffer.isBuffer(bytes));\n      if (bytes.length !== this.scalarSize) throw new Error('Invalid scalar size.');\n      return BN.decode(bytes, this.endian);\n    }\n  }, {\n    key: \"encodeClamped\",\n    value: function encodeClamped(k) {\n      // [RFC7748] Page 8, Section 5.\n      // [RFC8032] Section 5.1.5 & 5.2.5.\n      return this.clamp(this.encodeScalar(k));\n    }\n  }, {\n    key: \"decodeClamped\",\n    value: function decodeClamped(bytes) {\n      // [RFC7748] Page 8, Section 5.\n      // [RFC8032] Section 5.1.5 & 5.2.5.\n      assert(Buffer.isBuffer(bytes));\n      if (bytes.length !== this.scalarSize) throw new Error('Invalid scalar size.');\n      var clamped = this.clamp(Buffer.from(bytes));\n      return BN.decode(clamped, this.endian);\n    }\n  }, {\n    key: \"encodeUniform\",\n    value: function encodeUniform(x, bits) {\n      assert(x instanceof BN);\n      assert(bits >>> 0 === bits);\n      var msb = this.endian === 'le' ? this.fieldSize - 1 : 0;\n      var bytes = x.fromRed().encode(this.endian, this.fieldSize);\n      bytes[msb] |= bits & ~this.mask & 0xff;\n      return bytes;\n    }\n  }, {\n    key: \"decodeUniform\",\n    value: function decodeUniform(bytes) {\n      assert(Buffer.isBuffer(bytes));\n      if (bytes.length !== this.fieldSize) throw new Error('Invalid field size.');\n      var x = BN.decode(bytes, this.endian);\n      x.iumaskn(this.fieldBits);\n      return x.toRed(this.red);\n    }\n  }, {\n    key: \"encodePoint\",\n    value: function encodePoint(point, compact) {\n      assert(point instanceof Point);\n      return point.encode(compact);\n    }\n  }, {\n    key: \"decodePoint\",\n    value: function decodePoint(bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeX\",\n    value: function decodeX(bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeEven\",\n    value: function decodeEven(bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeSquare\",\n    value: function decodeSquare(bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toShort\",\n    value: function toShort() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toMont\",\n    value: function toMont(b0) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toEdwards\",\n    value: function toEdwards(a0) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointToJSON\",\n    value: function pointToJSON(point, pre) {\n      assert(point instanceof Point);\n      return point.toJSON(pre);\n    }\n  }, {\n    key: \"pointFromJSON\",\n    value: function pointFromJSON(json) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      var prefix, context;\n      var n, z, endo;\n\n      if (this.type === 'edwards') {\n        prefix = this.prefix ? this.prefix.toString() : null;\n        context = this.context;\n      }\n\n      if (!this.n.isZero()) n = this.n.toJSON();\n\n      if (!this.z.isZero()) {\n        z = this.z.fromRed();\n        if (this.z.redIsHigh()) z.isub(this.p);\n        z = z.toString(16);\n      }\n\n      if (this.endo) endo = this.endo.toJSON();\n      return {\n        id: this.id,\n        ossl: this.ossl,\n        type: this.type,\n        endian: this.endian,\n        hash: this.hash,\n        prefix: prefix,\n        context: context,\n        prime: this.prime,\n        p: this.p.toJSON(),\n        a: undefined,\n        b: undefined,\n        d: undefined,\n        n: n,\n        h: this.h.toString(16),\n        s: undefined,\n        z: z,\n        c: undefined,\n        g: this.g.toJSON(pre),\n        endo: endo\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      return new this(json);\n    }\n  }]);\n\n  return Curve;\n}();\n/**\n * Point\n */\n\n\nvar Point = /*#__PURE__*/function () {\n  function Point(curve, type) {\n    _classCallCheck(this, Point);\n\n    assert(curve instanceof Curve);\n    assert(type >>> 0 === type);\n    this.curve = curve;\n    this.type = type;\n    this.pre = null;\n  }\n\n  _createClass(Point, [{\n    key: \"_init\",\n    value: function _init() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"_safeNAF\",\n    value: function _safeNAF(width) {\n      assert(width >>> 0 === width);\n      if (this.pre && this.pre.naf) return this.pre.naf;\n      if (width === 0) return null;\n      var size = 1 << width - 2;\n      var points = new Array(size);\n      var p = this.toJ();\n      var dbl = size === 1 ? null : p.dbl();\n      points[0] = p;\n\n      for (var i = 1; i < size; i++) {\n        points[i] = points[i - 1].add(dbl);\n      }\n\n      return new NAF(width, points);\n    }\n  }, {\n    key: \"_getNAF\",\n    value: function _getNAF(width) {\n      assert(width >>> 0 === width);\n      if (this.pre && this.pre.naf) return this.pre.naf;\n      if (width === 0) return null;\n\n      var odds = this._safeNAF(width).points;\n\n      var points = this.curve.affinizeAll(odds);\n      return new NAF(width, points);\n    }\n  }, {\n    key: \"_getWindows\",\n    value: function _getWindows(width, bits) {\n      assert(width >>> 0 === width);\n      assert(bits >>> 0 === bits);\n      if (this.pre && this.pre.windows) return this.pre.windows;\n      if (width === 0) return null;\n      var size = 1 << width;\n      var steps = (bits + width - 1) / width >>> 0;\n      var wnds = new Array(steps * size);\n      var g = this.toJ();\n\n      for (var i = 0; i < steps; i++) {\n        wnds[i * size] = this.curve.jpoint();\n\n        for (var j = 1; j < size; j++) {\n          wnds[i * size + j] = wnds[i * size + j - 1].add(g);\n        }\n\n        g = g.dblp(width);\n      }\n\n      var points = this.curve.affinizeAll(wnds);\n      return new Windows(width, bits, points);\n    }\n  }, {\n    key: \"_getDoubles\",\n    value: function _getDoubles(step, power) {\n      assert(step >>> 0 === step);\n      assert(power >>> 0 === power);\n      if (this.pre && this.pre.doubles) return this.pre.doubles;\n      if (step === 0) return null;\n      var len = Math.ceil(power / step) + 1;\n      var dbls = new Array(len);\n      var acc = this.toJ();\n      var k = 0;\n      dbls[k++] = acc;\n\n      for (var i = 0; i < power; i += step) {\n        for (var j = 0; j < step; j++) {\n          acc = acc.dbl();\n        }\n\n        dbls[k++] = acc;\n      }\n\n      assert(k === len);\n      var points = this.curve.affinizeAll(dbls);\n      return new Doubles(step, points);\n    }\n  }, {\n    key: \"_getBeta\",\n    value: function _getBeta() {\n      return null;\n    }\n  }, {\n    key: \"_getBlinding\",\n    value: function _getBlinding(rng) {\n      if (this.pre && this.pre.blinding) return this.pre.blinding;\n      if (!rng) return null;\n      if (this.curve.n.isZero()) return null; // Pregenerate a random blinding value:\n      //\n      //   blind = random integer in [1,n-1]\n      //   unblind = G * blind\n      //\n      // We intend to subtract the blinding value\n      // from scalars before multiplication. We\n      // can add the unblinding point once the\n      // multiplication is complete.\n\n      var blind = this.curve.randomScalar(rng);\n      var unblind = this.mul(blind);\n      return new Blinding(blind, unblind);\n    }\n  }, {\n    key: \"_hasWindows\",\n    value: function _hasWindows(k) {\n      assert(k instanceof BN);\n      if (!this.pre || !this.pre.windows) return false;\n      var _this$pre$windows = this.pre.windows,\n          width = _this$pre$windows.width,\n          bits = _this$pre$windows.bits;\n      var steps = (bits + width - 1) / width >>> 0;\n      return k.bitLength() <= steps * width;\n    }\n  }, {\n    key: \"_hasDoubles\",\n    value: function _hasDoubles(k) {\n      assert(k instanceof BN);\n      if (!this.pre || !this.pre.doubles) return false;\n      var _this$pre$doubles = this.pre.doubles,\n          step = _this$pre$doubles.step,\n          points = _this$pre$doubles.points;\n      var power = k.bitLength() + 1;\n      return points.length >= Math.ceil(power / step) + 1;\n    }\n  }, {\n    key: \"_getJNAF\",\n    value: function _getJNAF(point) {\n      assert(point instanceof Point);\n      assert(point.type === this.type); // Create comb for JSF.\n\n      return [this, // 1\n      this.add(point), // 3\n      this.sub(point), // 5\n      point // 7\n      ];\n    }\n  }, {\n    key: \"_blind\",\n    value: function _blind(k, rng) {\n      // [SIDE1] Page 5, Section 4.\n      // [BLIND] Page 20, Section 7.\n      assert(k instanceof BN);\n      assert(!k.red); // Scalar splitting (requires precomputation).\n      //\n      // Blind a multiplication by first subtracting\n      // a blinding value from the scalar. Example:\n      //\n      //   b = random integer in [1,n-1]\n      //   B = P * b (precomputed)\n      //   Q = P * (k - b) + B\n      //\n      // Note that Joye describes a different method\n      // (multiplier randomization) which computes:\n      //\n      //   B = random point in E\n      //   Q = (P + B) * k - B * k\n      //\n      // Our method is more similar to the \"scalar\n      // splitting\" technique described in the\n      // second source above.\n      //\n      // The blinding value and its corresponding\n      // point are randomly generated and computed\n      // on boot. As long as an attacker is not\n      // able to observe the boot, this should give\n      // a decent bit of protection against various\n      // channel attacks.\n\n      if (this.pre && this.pre.blinding) {\n        var _this$pre$blinding = this.pre.blinding,\n            blind = _this$pre$blinding.blind,\n            unblind = _this$pre$blinding.unblind;\n        var t = k.sub(blind);\n        return [this, t, unblind];\n      } // Randomization is not possible without\n      // an RNG. Do a normal multiplication.\n\n\n      if (!rng) return [this, k, null]; // If we have no precomputed blinding\n      // factor, there are two possibilities\n      // for randomization:\n      //\n      // 1. Randomize the multiplier by adding\n      //    a random multiple of `n`.\n      //\n      // 2. Re-scale the point itself by a\n      //    random factor.\n      //\n      // The first option can be accomplished\n      // with some like:\n      //\n      //   a = random integer in [1,n-1]\n      //   r = a * n\n      //   Q = P * (k + r)\n      //\n      // The second is accomplished with:\n      //\n      //   a = random element in F(p)\n      //   R = (x * a^2, y * a^3, z * a)\n      //   Q = R * k\n      //\n      // If we have precomputed doubles / naf\n      // points, we opt for the first method\n      // to avoid randomizing everything.\n\n      if (this.pre) {\n        if (this.curve.n.isZero()) return [this, k, null];\n        var a = this.curve.randomScalar(rng);\n        var r = a.mul(this.curve.n);\n\n        var _t = r.iadd(k);\n\n        return [this, _t, null];\n      } // If there is no precomputation _at all_,\n      // we opt for the second method.\n\n\n      var p = this.randomize(rng);\n      return [p, k, null];\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"precompute\",\n    value: function precompute(bits, rng) {\n      assert(bits >>> 0 === bits);\n      if (!this.pre) this.pre = new Precomp();\n      if (!this.pre.naf) this.pre.naf = this._getNAF(9);\n      if (USE_FIXED && !this.pre.windows) this.pre.windows = this._getWindows(4, bits);\n      if (!this.pre.doubles) this.pre.doubles = this._getDoubles(4, bits + 1);\n      if (!this.pre.beta) this.pre.beta = this._getBeta();\n      if (!this.pre.blinding) this.pre.blinding = this._getBlinding(rng);\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      return this.curve.validate(this);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"randomize\",\n    value: function randomize(rng) {\n      var z = this.curve.randomField(rng);\n      return this.scale(z);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"add\",\n    value: function add(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(point) {\n      assert(point instanceof Point);\n      return this.add(point.neg());\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"dblp\",\n    value: function dblp(pow) {\n      // Repeated doubling. This can\n      // be optimized by child classes.\n      assert(pow >>> 0 === pow);\n      var r = this;\n\n      for (var i = 0; i < pow; i++) {\n        r = r.dbl();\n      }\n\n      return r;\n    }\n  }, {\n    key: \"diffAddDbl\",\n    value: function diffAddDbl(p, q) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"eqX\",\n    value: function eqX(x) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"eqR\",\n    value: function eqR(x) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isSmall\",\n    value: function isSmall() {\n      // Test whether the point is of small order.\n      if (this.isInfinity()) return false; // P * h = O\n\n      return this.jmulH().isInfinity();\n    }\n  }, {\n    key: \"hasTorsion\",\n    value: function hasTorsion() {\n      // Test whether the point is in another subgroup.\n      if (this.isInfinity()) return false; // P * n != O\n\n      return !this.jmul(this.curve.n).isInfinity();\n    }\n  }, {\n    key: \"order\",\n    value: function order() {\n      // Calculate point order.\n      var _this$curve = this.curve,\n          h = _this$curve.h,\n          n = _this$curve.n;\n      var p = this.toJ();\n      var q = new BN(1);\n\n      while (!p.isInfinity()) {\n        q.iaddn(1);\n\n        if (q.cmp(h) > 0) {\n          q = n.clone();\n          break;\n        }\n\n        p = p.add(this);\n      }\n\n      return q;\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(k) {\n      return this.jmul(k);\n    }\n  }, {\n    key: \"muln\",\n    value: function muln(k) {\n      return this.jmuln(k);\n    }\n  }, {\n    key: \"mulBlind\",\n    value: function mulBlind(k, rng) {\n      return this.jmulBlind(k, rng);\n    }\n  }, {\n    key: \"mulAdd\",\n    value: function mulAdd(k1, p2, k2) {\n      return this.jmulAdd(k1, p2, k2);\n    }\n  }, {\n    key: \"mulH\",\n    value: function mulH() {\n      return this.jmulH();\n    }\n  }, {\n    key: \"div\",\n    value: function div(k) {\n      return this.jdiv(k);\n    }\n  }, {\n    key: \"divn\",\n    value: function divn(k) {\n      return this.jdivn(k);\n    }\n  }, {\n    key: \"divH\",\n    value: function divH() {\n      return this.jdivH();\n    }\n  }, {\n    key: \"jmul\",\n    value: function jmul(k) {\n      if (USE_FIXED && this._hasWindows(k)) return this.curve._fixedMul(this, k);\n      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n      if (this.curve.endo && this.type === types.AFFINE) return this.curve._endoWnafMulAdd([this], [k]);\n      return this.curve._wnafMul(5, this, k);\n    }\n  }, {\n    key: \"jmuln\",\n    value: function jmuln(k) {\n      assert((k | 0) === k);\n      return this.jmul(new BN(k));\n    }\n  }, {\n    key: \"jmulBlind\",\n    value: function jmulBlind(k) {\n      var rng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var _this$_blind = this._blind(k, rng),\n          _this$_blind2 = _slicedToArray(_this$_blind, 3),\n          p = _this$_blind2[0],\n          t = _this$_blind2[1],\n          unblind = _this$_blind2[2];\n\n      var q = p.jmul(t);\n      if (unblind) return q.add(unblind);\n      return q;\n    }\n  }, {\n    key: \"jmulAdd\",\n    value: function jmulAdd(k1, p2, k2) {\n      if (this.curve.endo && this.type === types.AFFINE) return this.curve._endoWnafMulAdd([this, p2], [k1, k2]);\n      return this.curve._wnafMulAdd(5, [this, p2], [k1, k2]);\n    }\n  }, {\n    key: \"jmulH\",\n    value: function jmulH() {\n      var word = this.curve.h.word(0); // Optimize for powers of two.\n\n      if ((word & word - 1) === 0) {\n        var bits = this.curve.h.bitLength();\n        return this.toJ().dblp(bits - 1);\n      }\n\n      return this.jmul(this.curve.h);\n    }\n  }, {\n    key: \"jdiv\",\n    value: function jdiv(k) {\n      assert(k instanceof BN);\n      assert(!k.red);\n      return this.jmul(k.invert(this.curve.n));\n    }\n  }, {\n    key: \"jdivn\",\n    value: function jdivn(k) {\n      assert(!this.curve.n.isZero());\n      if (this.curve.h.cmpn(k) === 0) return this.jdivH();\n      return this.jdiv(new BN(k));\n    }\n  }, {\n    key: \"jdivH\",\n    value: function jdivH() {\n      if (this.curve.n.isZero()) return this.toJ();\n      if (this.curve.h.cmpn(1) === 0) return this.toJ();\n      if (this.curve.hi === null) this.curve.hi = this.curve.h.invert(this.curve.n);\n      return this.jmul(this.curve.hi);\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      return this.normalize();\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      return this;\n    }\n  }, {\n    key: \"toX\",\n    value: function toX() {\n      return this;\n    }\n  }, {\n    key: \"key\",\n    value: function key() {\n      if (this.isInfinity()) return \"\".concat(this.curve.uid, \":oo\");\n      this.normalize();\n      var x = this.getX().toString(16);\n      var y = this.getY().toString(16);\n      return \"\".concat(this.curve.uid, \":\").concat(x, \",\").concat(y);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(compact) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      return '<Point>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeX\",\n    value: function decodeX(curve, bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeEven\",\n    value: function decodeEven(curve, bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"decodeSquare\",\n    value: function decodeSquare(curve, bytes) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      throw new Error('Not implemented.');\n    }\n  }]);\n\n  return Point;\n}();\n/**\n * ShortCurve\n */\n\n\nvar ShortCurve = /*#__PURE__*/function (_Curve) {\n  _inherits(ShortCurve, _Curve);\n\n  var _super = _createSuper(ShortCurve);\n\n  function ShortCurve(conf) {\n    var _this;\n\n    _classCallCheck(this, ShortCurve);\n\n    _this = _super.call(this, ShortPoint, 'short', conf);\n    _this.a = BN.fromJSON(conf.a).toRed(_this.red);\n    _this.b = BN.fromJSON(conf.b).toRed(_this.red);\n    _this.c = BN.fromJSON(conf.c || '0').toRed(_this.red);\n    _this.ai = _this.a.isZero() ? _this.zero : _this.a.redInvert();\n    _this.zi = _this.z.isZero() ? _this.zero : _this.z.redInvert();\n    _this.zeroA = _this.a.isZero();\n    _this.threeA = _this.a.eq(_this.three.redNeg());\n    _this.redN = _this.n.toRed(_this.red);\n    _this.pmodn = _this.p.clone();\n    _this.highOrder = _this.n.cmp(_this.p) >= 0;\n    _this.smallGap = false;\n\n    _this._finalize(conf);\n\n    return _this;\n  }\n\n  _createClass(ShortCurve, [{\n    key: \"_finalize\",\n    value: function _finalize(conf) {\n      _get(_getPrototypeOf(ShortCurve.prototype), \"_finalize\", this).call(this, conf); // Precalculate endomorphism.\n\n\n      if (conf.endo != null) this.endo = Endo.fromJSON(this, conf.endo);else this.endo = this._getEndomorphism();\n\n      if (!this.n.isZero()) {\n        this.pmodn = this.p.mod(this.n); // Check for Maxwell's trick (see eqR).\n\n        this.smallGap = this.p.div(this.n).cmpn(1) <= 0;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_short\",\n    value: function _short(a0, odd) {\n      return ShortCurve._isomorphism(this.a, this.b, a0, odd);\n    }\n  }, {\n    key: \"_mont\",\n    value: function _mont(b0, odd) {\n      // Short Weierstrass->Montgomery Equivalence.\n      //\n      // [ARITH1] Page 286, Section 13.2.3.c.\n      // [SAFE] \"Ladders\".\n      //\n      // Transformation:\n      //\n      //   r = A / (3 * B)\n      //   s = +-sqrt(3 * r^2 + a)\n      //   A = 3 * r / s\n      //   B = 1 / s\n      var _this$_findRS = this._findRS(odd),\n          _this$_findRS2 = _slicedToArray(_this$_findRS, 2),\n          r = _this$_findRS2[0],\n          s = _this$_findRS2[1];\n\n      var b = s.redInvert();\n      var a = r.redMuln(3).redMul(b);\n      if (b0 != null) return MontCurve._isomorphism(a, b, b0);\n      return [a, b];\n    }\n  }, {\n    key: \"_edwards\",\n    value: function _edwards(a0, odd) {\n      // Short Weierstrass->Twisted Edwards Equivalence.\n      //\n      // [TWISTEQ] Section 1.\n      //\n      // Transformation:\n      //\n      //   r = (a' + d') / 6\n      //   s = +-sqrt(3 * r^2 + a)\n      //   a' = 3 * r + 2 * s\n      //   d' = 3 * r - 2 * s\n      var _this$_findRS3 = this._findRS(odd),\n          _this$_findRS4 = _slicedToArray(_this$_findRS3, 2),\n          r = _this$_findRS4[0],\n          s = _this$_findRS4[1];\n\n      var r3 = r.redMuln(3);\n      var s2 = s.redMuln(2);\n      var a = r3.redAdd(s2);\n      var d = r3.redSub(s2);\n      if (a0 != null) return EdwardsCurve._isomorphism(a, d, a0);\n      return [a, d];\n    }\n  }, {\n    key: \"_findRS\",\n    value: function _findRS(sign) {\n      // Find `r` and `s` for equivalence.\n      //\n      // [ARITH1] Page 286, Section 13.2.3.c.\n      // [SAFE] \"Ladders\".\n      //\n      // Computation:\n      //\n      //   r = solve(r^3 + a * r + b == 0, r)\n      //   s = +-sqrt(3 * r^2 + a)\n      //\n      // Computing `r` is non-trivial. We need\n      // to solve `r^3 + a * r + b = 0`, but we\n      // don't have a polynomial solver, so we\n      // loop over random points until we find\n      // one with 2-torsion. Multiplying by the\n      // subgroup order should yield a point of\n      // ((A / 3) / B, 0) which is a solution.\n      assert(sign == null || typeof sign === 'boolean');\n      assert(this.h.word(0) >= 4);\n      assert(!this.n.isZero());\n      var x = this.one.redNeg();\n      var p;\n\n      for (;;) {\n        x.redIAdd(this.one);\n\n        try {\n          p = this.pointFromX(x.clone());\n        } catch (e) {\n          continue;\n        }\n\n        p = p.mul(this.n);\n        if (p.isInfinity()) continue;\n        if (!p.y.isZero()) continue;\n        break;\n      }\n\n      var r = p.x;\n      var r2 = r.redSqr();\n      var s = r2.redMuln(3).redIAdd(this.a).redSqrt();\n\n      if (sign != null) {\n        if (s.redIsOdd() !== sign) s.redINeg();\n      }\n\n      return [r, s];\n    }\n  }, {\n    key: \"_scale0\",\n    value: function _scale0(a, b) {\n      // We can extract the isomorphism factors with:\n      //\n      //   u4 = a' / a\n      //   u6 = b' / b\n      //   u2 = +-sqrt(u4)\n      //   u = +-sqrt(u2)\n      //   u3 = u2 * u\n      //\n      // `u2` should be picked such that `u4 * u2 = u6`.\n      //\n      // If a = 0, we can do:\n      //\n      //   u6 = b' / b\n      //   u2 = u6^(1 / 3)\n      //   u = +-sqrt(u2)\n      //   u3 = u2 * u\n      //\n      // Where `u2` is any root that is square.\n      //\n      // If b = 0, we can do:\n      //\n      //   u4 = a' / a\n      //   u2 = +-sqrt(u4)\n      //   u = +-sqrt(u2)\n      //   u3 = u2 * u\n      //\n      // Where `u2` is any root that is square.\n      assert(this.a.isZero() === a.isZero());\n      assert(this.b.isZero() === b.isZero());\n\n      if (this.a.isZero()) {\n        var _u = this.b.redDiv(this.field(b)); // Todo: figure out how to check index.\n\n\n        var _u2 = uncube(_u);\n\n        var _u3 = _u2.redSqrt();\n\n        var _u4 = _u2.redMul(_u3);\n\n        assert(_u4.redSqr().eq(_u));\n        assert(!_u3.isZero());\n        return [_u2, _u4];\n      }\n\n      if (this.b.isZero()) {\n        var _u5 = this.a.redDiv(this.field(a));\n\n        var _u6 = _u5.redSqrt(); // Todo: figure out how to check oddness.\n\n\n        if (_u6.redJacobi() !== 1) _u6.redINeg();\n\n        var _u7 = _u6.redSqrt();\n\n        var _u8 = _u6.redMul(_u7);\n\n        assert(_u8.redMul(_u7).eq(_u5));\n        assert(!_u7.isZero());\n        return [_u6, _u8];\n      }\n\n      var u4 = this.a.redDiv(this.field(a));\n      var u6 = this.b.redDiv(this.field(b));\n      var u2 = u4.redSqrt();\n      if (!u4.redMul(u2).eq(u6)) u2.redINeg();\n      assert(u4.redMul(u2).eq(u6));\n      var u = u2.redSqrt();\n      var u3 = u2.redMul(u);\n      assert(!u.isZero());\n      return [u2, u3];\n    }\n  }, {\n    key: \"_scale1\",\n    value: function _scale1(x, y) {\n      // If base points are available, it is much\n      // easier, with:\n      //\n      //   u2 = x' / x\n      //   u3 = y' / y\n      //   u = +-sqrt(u2)\n      //\n      // `u` should be picked such that `u2 * u = u3`.\n      var u2 = this.g.x.redDiv(this.field(x));\n      var u3 = this.g.y.redDiv(this.field(y));\n      var u = u2.redSqrt();\n      if (!u2.redMul(u).eq(u3)) u.redINeg();\n      assert(u2.redMul(u).eq(u3));\n      assert(!u.isZero());\n      return [u2, u3];\n    }\n  }, {\n    key: \"_scaleShort\",\n    value: function _scaleShort(curve) {\n      assert(curve instanceof ShortCurve);\n      if (this.g.isInfinity() || curve.g.isInfinity()) return this._scale0(curve.a, curve.b);\n      return this._scale1(curve.g.x, curve.g.y);\n    }\n  }, {\n    key: \"_scaleMont\",\n    value: function _scaleMont(curve) {\n      assert(curve instanceof MontCurve);\n\n      if (this.g.isInfinity() || curve.g.isInfinity()) {\n        var _curve$_short = curve._short(),\n            _curve$_short2 = _slicedToArray(_curve$_short, 2),\n            a = _curve$_short2[0],\n            b = _curve$_short2[1];\n\n        return this._scale0(a, b);\n      }\n\n      var _curve$g = curve.g,\n          x = _curve$g.x,\n          y = _curve$g.y;\n      var nx = x.redAdd(curve.a3).redMul(curve.bi);\n      var ny = y.redMul(curve.bi);\n      return this._scale1(nx, ny);\n    }\n  }, {\n    key: \"_scaleEdwards\",\n    value: function _scaleEdwards(curve) {\n      assert(curve instanceof EdwardsCurve);\n\n      if (this.g.isInfinity() || curve.g.isInfinity()) {\n        var _curve$_short3 = curve._short(),\n            _curve$_short4 = _slicedToArray(_curve$_short3, 2),\n            a = _curve$_short4[0],\n            b = _curve$_short4[1];\n\n        return this._scale0(a, b);\n      }\n\n      var _curve$g2 = curve.g,\n          x = _curve$g2.x,\n          y = _curve$g2.y,\n          z = _curve$g2.z;\n      var a5 = curve.a.redMuln(5);\n      var d5 = curve.d.redMuln(5);\n      var dma = curve.d.redSub(curve.a);\n      var d5a = d5.redSub(curve.a);\n      var da5 = curve.d.redSub(a5);\n      var ypz = y.redAdd(z);\n      var ymz = y.redSub(z);\n      var xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n      var xz = ymz.redMuln(12);\n      var yy = dma.redMul(ypz).redMul(z);\n      var yz = ymz.redMul(x).redIMuln(4);\n      var zi = xz.redMul(yz).redInvert();\n      var nx = xx.redMul(yz).redMul(zi);\n      var ny = yy.redMul(xz).redMul(zi);\n      return this._scale1(nx, ny);\n    }\n  }, {\n    key: \"_getEndomorphism\",\n    value: function _getEndomorphism() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      // Compute endomorphism.\n      //\n      // [GECC] Example 3.76, Page 128, Section 3.5.\n      // No curve params.\n      if (this.n.isZero() || this.g.isInfinity()) return null; // No efficient endomorphism.\n\n      if (!this.zeroA || this.p.modrn(3) !== 1 || this.n.modrn(3) !== 1) return null; // Solve beta^3 mod p = 1.\n\n      var _this$_getEndoRoots = this._getEndoRoots(this.p),\n          _this$_getEndoRoots2 = _slicedToArray(_this$_getEndoRoots, 2),\n          b1 = _this$_getEndoRoots2[0],\n          b2 = _this$_getEndoRoots2[1]; // Choose the smallest beta by default.\n\n\n      var beta = [b1, b2][index & 1].toRed(this.red); // Solve lambda^3 mod n = 1.\n\n      var _this$_getEndoRoots3 = this._getEndoRoots(this.n),\n          _this$_getEndoRoots4 = _slicedToArray(_this$_getEndoRoots3, 2),\n          l1 = _this$_getEndoRoots4[0],\n          l2 = _this$_getEndoRoots4[1]; // Choose the lambda matching selected beta.\n      // Note that P * lambda = (x * beta, y).\n\n\n      var p = this.point(this.g.x.redMul(beta), this.g.y);\n      var lambda;\n\n      if (this.g.mul(l1).eq(p)) {\n        lambda = l1;\n      } else {\n        assert(this.g.mul(l2).eq(p));\n        lambda = l2;\n      } // Get basis vectors.\n\n\n      var basis = this._getEndoBasis(lambda); // Precompute `g1` and `g2`.\n\n\n      var pre = this._getEndoPrecomp(basis);\n\n      return new Endo(beta, lambda, basis, pre);\n    }\n  }, {\n    key: \"_getEndoRoots\",\n    value: function _getEndoRoots(num) {\n      // Find roots for x^2 + x + 1 in F.\n      //\n      // [GECC] Example 3.76, Page 128, Section 3.5.\n      // [GLV] Page 192, Section 2 (Endomorphisms).\n      //\n      // The above document doesn't fully explain how\n      // to derive these and only \"hints\" at it, as\n      // mentioned by Hal Finney[1], but we're basically\n      // computing two possible cube roots of 1 here.\n      //\n      // Note that we could also compute[2]:\n      //\n      //   beta = 2^((p - 1) / 3) mod p\n      //   lambda = 3^((n - 1) / 3) mod n\n      //\n      // As an extension of Fermat's little theorem:\n      //\n      //   g^(p - 1) mod p == 1\n      //\n      // It is suspected[3] this is how Hal Finney[4]\n      // computed his original endomorphism roots.\n      //\n      // @indutny's method for computing cube roots\n      // of unity[5] appears to be the method described\n      // on wikipedia[6][7].\n      //\n      // Sage produces the same solution:\n      //\n      //   sage: solve(x^2 + x + 1 == 0, x)\n      //   [x == -1/2*I*sqrt(3) - 1/2, x == 1/2*I*sqrt(3) - 1/2]\n      //\n      // This can be reduced to:\n      //\n      //   x = (+-sqrt(-3) - 1) / 2\n      //\n      // [1] https://bitcointalk.org/index.php?topic=3238.msg45565#msg45565\n      // [2] https://crypto.stackexchange.com/a/22739\n      // [3] https://bitcoin.stackexchange.com/a/35872\n      // [4] https://github.com/halfinney/bitcoin/commit/dc411b5\n      // [5] https://en.wikipedia.org/wiki/Cube_root_of_unity\n      // [6] https://en.wikipedia.org/wiki/Splitting_field#Cubic_example\n      // [7] http://mathworld.wolfram.com/SplittingField.html\n      var red = num === this.p ? this.red : BN.mont(num);\n      var two = new BN(2).toRed(red);\n      var three = new BN(3).toRed(red);\n      var i2 = two.redInvert(); // S1 = sqrt(-3) / 2\n\n      var s1 = three.redNeg().redSqrt().redMul(i2); // S2 = -S1\n\n      var s2 = s1.redNeg(); // R1 = S1 - 1 / 2\n\n      var r1 = s1.redSub(i2).fromRed(); // R2 = S2 - 1 / 2\n\n      var r2 = s2.redSub(i2).fromRed();\n      return [r1, r2].sort(BN.cmp);\n    }\n  }, {\n    key: \"_getEndoBasis\",\n    value: function _getEndoBasis(lambda) {\n      // Compute endomorphic basis.\n      //\n      // This essentially computes Cornacchia's algorithm\n      // for solving x^2 + d * y^2 = m (d = lambda, m = order).\n      //\n      // https://en.wikipedia.org/wiki/Cornacchia%27s_algorithm\n      //\n      // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n      // [GLV] Page 196, Section 4 (Decomposing K).\n      //\n      // Balanced length-two representation of a multiplier.\n      //\n      // 1. Run the extended euclidean algorithm with inputs n\n      //    and lambda. The algorithm produces a sequence of\n      //    equations si*n + ti*lam = ri where s0=1, t0=0,\n      //    r0=n, s1=0, t1=1, r1=lam, and the remainders ri\n      //    and are non-negative and strictly decreasing. Let\n      //    l be the greatest index for which rl >= sqrt(n).\n      var _this$_egcdSqrt = this._egcdSqrt(lambda),\n          _this$_egcdSqrt2 = _slicedToArray(_this$_egcdSqrt, 6),\n          rl = _this$_egcdSqrt2[0],\n          tl = _this$_egcdSqrt2[1],\n          rl1 = _this$_egcdSqrt2[2],\n          tl1 = _this$_egcdSqrt2[3],\n          rl2 = _this$_egcdSqrt2[4],\n          tl2 = _this$_egcdSqrt2[5]; // 2. Set (a1, b1) <- (rl+1, -tl+1).\n\n\n      var a1 = rl1;\n      var b1 = tl1.neg(); // 3. If (rl^2 + tl^2) <= (rl+2^2 + tl+2^2)\n      //    then set (a2, b2) <- (rl, -tl).\n      //    else set (a2, b2) <- (rl+2, -tl+2).\n\n      var lhs = rl.sqr().iadd(tl.sqr());\n      var rhs = rl2.sqr().iadd(tl2.sqr());\n      var a2, b2;\n\n      if (lhs.cmp(rhs) <= 0) {\n        a2 = rl;\n        b2 = tl.neg();\n      } else {\n        a2 = rl2;\n        b2 = tl2.neg();\n      }\n\n      return [new Vector(a1, b1), new Vector(a2, b2)];\n    }\n  }, {\n    key: \"_egcdSqrt\",\n    value: function _egcdSqrt(lambda) {\n      // Extended Euclidean algorithm for integers.\n      //\n      // [GECC] Algorithm 2.19, Page 40, Section 2.2.\n      // [GLV] Page 196, Section 4 (Decomposing K).\n      assert(lambda instanceof BN);\n      assert(!lambda.red);\n      assert(lambda.sign() > 0);\n      assert(this.n.sign() > 0); // Note that we insert the approximate square\n      // root checks as described in algorithm 3.74.\n      //\n      // Algorithm 2.19 is defined as:\n      //\n      // 1. u <- a\n      //    v <- b\n      //\n      // 2. x1 <- 1\n      //    y1 <- 0\n      //    x2 <- 0\n      //    y2 <- 1\n      //\n      // 3. while u != 0 do\n      //\n      // 3.1. q <- floor(v / u)\n      //      r <- v - q * u\n      //      x <- x2 - q * x1\n      //      y <- y2 - q * y1\n      //\n      // 3.2. v <- u\n      //      u <- r\n      //      x2 <- x1\n      //      x1 <- x\n      //      y2 <- y1\n      //      y1 <- y\n      //\n      // 4. d <- v\n      //    x <- x2\n      //    y <- y2\n      //\n      // 5. Return (d, x, y).\n      // Start with an approximate square root of n.\n\n      var sqrtn = this.n.ushrn(this.n.bitLength() >>> 1);\n      var u = lambda; // r1\n\n      var v = this.n.clone(); // r0\n\n      var x1 = new BN(1); // t1\n\n      var y1 = new BN(0); // t0\n\n      var x2 = new BN(0); // s1\n\n      var y2 = new BN(1); // s0\n      // All vectors are roots of: a + b * lambda = 0 (mod n).\n\n      var rl, tl; // First vector.\n\n      var rl1, tl1; // Inner.\n\n      var i = 0;\n      var j = 0;\n      var p; // Compute EGCD.\n\n      while (!u.isZero() && i < 2) {\n        var q = v.quo(u);\n        var r = v.sub(q.mul(u));\n        var x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1)); // Check for r < sqrt(n).\n\n        if (j === 0 && r.cmp(sqrtn) < 0) {\n          rl = p;\n          tl = x1;\n          rl1 = r;\n          tl1 = x;\n          j = 1; // 1 more round.\n        }\n\n        p = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n        i += j;\n      } // Should never happen.\n\n\n      assert(j !== 0, 'Could not find r < sqrt(n).'); // Second vector.\n\n      var rl2 = x2;\n      var tl2 = x1;\n      return [rl, tl, rl1, tl1, rl2, tl2];\n    }\n  }, {\n    key: \"_getEndoPrecomp\",\n    value: function _getEndoPrecomp(basis) {\n      // Precompute `g1` and `g2` to avoid round division.\n      //\n      // [JCEN12] Page 5, Section 4.3.\n      //\n      // Computation:\n      //\n      //   d = a1 * b2 - b1 * a2\n      //   t = ceil(log2(d+1)) + p\n      //   g1 = round((2^t * b2) / d)\n      //   g2 = round((2^t * b1) / d)\n      //\n      // Where:\n      //\n      //   `p` is the number of precision bits.\n      //   `d` is equal to `n` (the curve order).\n      //\n      // The paper above uses 2 as the value of `p`,\n      // whereas libsecp256k1 uses 128 (total=384).\n      //\n      // We pick precision for `g1` and `g2` such that:\n      //\n      //   abs(g1) < n\n      //   abs(g2) < n\n      //\n      // This ensures maximum precision for the constants\n      // while also ensuring they fit into a fixed number\n      // of scalar limbs in more optimized implementations.\n      //\n      // Furthermore, we attempt to align to a limb width\n      // of 64 bits. This allows us to optimize the shift,\n      // a la libsecp256k1[1].\n      //\n      // [1] https://github.com/bitcoin-core/secp256k1/pull/822\n      assert(Array.isArray(basis));\n      assert(basis.length === 2);\n      assert(basis[0] instanceof Vector);\n      assert(basis[1] instanceof Vector);\n\n      var _basis = _slicedToArray(basis, 2),\n          v1 = _basis[0],\n          v2 = _basis[1];\n\n      var d = v1.a.mul(v2.b).isub(v1.b.mul(v2.a));\n      var bits = d.bitLength();\n      var align = bits >= 160;\n      assert(d.eq(this.n)); // Start with a rough estimate.\n\n      var shift = bits + Math.ceil(bits / 2) + 1;\n      var g1, g2;\n      if (align) shift -= shift & 63;\n\n      while (shift > bits) {\n        g1 = v2.b.ushln(shift).divRound(d);\n        g2 = v1.b.ushln(shift).divRound(d);\n        if (g1.ucmp(d) < 0 && g2.ucmp(d) < 0) break;\n        if (align) shift -= 64;else shift -= 1;\n      }\n\n      if (shift <= bits) throw new Error('Could not calculate g1 and g2.');\n      return [shift, g1, g2];\n    }\n  }, {\n    key: \"_endoSplit\",\n    value: function _endoSplit(k) {\n      // Balanced length-two representation of a multiplier.\n      //\n      // [GECC] Algorithm 3.74, Page 127, Section 3.5.\n      //\n      // Also note that it is possible to precompute[1]\n      // values in order to avoid the division[2][3][4].\n      //\n      // This involves precomputing `g1` and `g2 (see\n      // above). `c1` and `c2` can then be computed as\n      // follows:\n      //\n      //   t = ceil(log2(n+1)) + p\n      //   c1 = (k * g1) >> t\n      //   c2 = -((k * g2) >> t)\n      //\n      // Where `>>` is an _unsigned_ right shift. Also\n      // note that the last bit discarded in the shift\n      // must be stored. If it is 1, then add 1 to the\n      // scalar (absolute addition).\n      //\n      // It's worth noting that libsecp256k1 uses a\n      // different calculation along the lines of:\n      //\n      //   t = ceil(log2(n+1)) + p\n      //   c1 = ((k * g1) >> t) * -b1\n      //   c2 = ((k * -g2) >> t) * -b2\n      //   k2 = c1 + c2\n      //   k1 = k2 * -lambda + k\n      //\n      // So, in the future, we can consider changing\n      // step 4 to:\n      //\n      //   4. Compute c1 = (k * g1) >> t\n      //          and c2 = -((k * g2) >> t).\n      //\n      //   const [shift, g1, g2] = this.endo.pre;\n      //   const c1 = k.mulShift(g1, shift);\n      //   const c2 = k.mulShift(g2, shift).ineg();\n      //\n      // Once we're brave enough, that is.\n      //\n      // [1] [JCEN12] Page 5, Section 4.3.\n      // [2] https://github.com/bitcoin-core/secp256k1/blob/0b70241/src/scalar_impl.h#L259\n      // [3] https://github.com/bitcoin-core/secp256k1/pull/21\n      // [4] https://github.com/bitcoin-core/secp256k1/pull/127\n      assert(k instanceof BN);\n      assert(!k.red);\n      assert(!this.n.isZero());\n\n      var _this$endo$basis = _slicedToArray(this.endo.basis, 2),\n          v1 = _this$endo$basis[0],\n          v2 = _this$endo$basis[1]; // 4. Compute c1 = round(b2 * k / n)\n      //        and c2 = round(-b1 * k / n).\n\n\n      var c1 = v2.b.mul(k).divRound(this.n);\n      var c2 = v1.b.neg().mul(k).divRound(this.n); // 5. Compute k1 = k - c1 * a1 - c2 * a2\n      //        and k2 = -c1 * b1 - c2 * b2.\n\n      var p1 = c1.mul(v1.a);\n      var p2 = c2.mul(v2.a);\n      var q1 = c1.ineg().mul(v1.b);\n      var q2 = c2.mul(v2.b); // Calculate answer.\n\n      var k1 = k.sub(p1).isub(p2);\n      var k2 = q1.isub(q2); // 6. Return (k1, k2).\n\n      return [k1, k2];\n    }\n  }, {\n    key: \"_endoBeta\",\n    value: function _endoBeta(point) {\n      assert(point instanceof ShortPoint);\n      return [point, point._getBeta()];\n    }\n  }, {\n    key: \"_endoWnafMulAdd\",\n    value: function _endoWnafMulAdd(points, coeffs) {\n      // Point multiplication with efficiently computable endomorphisms.\n      //\n      // [GECC] Algorithm 3.77, Page 129, Section 3.5.\n      // [GLV] Page 193, Section 3 (Using Efficient Endomorphisms).\n      //\n      // Note it may be possible to do this 4-dimensionally [4GLV].\n      assert(Array.isArray(points));\n      assert(Array.isArray(coeffs));\n      assert(points.length === coeffs.length);\n      assert(this.endo != null);\n      var len = points.length;\n      var npoints = new Array(len * 2);\n      var ncoeffs = new Array(len * 2);\n\n      for (var i = 0; i < len; i++) {\n        var _this$_endoBeta = this._endoBeta(points[i]),\n            _this$_endoBeta2 = _slicedToArray(_this$_endoBeta, 2),\n            p1 = _this$_endoBeta2[0],\n            p2 = _this$_endoBeta2[1];\n\n        var _this$_endoSplit = this._endoSplit(coeffs[i]),\n            _this$_endoSplit2 = _slicedToArray(_this$_endoSplit, 2),\n            k1 = _this$_endoSplit2[0],\n            k2 = _this$_endoSplit2[1];\n\n        npoints[i * 2 + 0] = p1;\n        ncoeffs[i * 2 + 0] = k1;\n        npoints[i * 2 + 1] = p2;\n        ncoeffs[i * 2 + 1] = k2;\n      }\n\n      return this._wnafMulAdd(5, npoints, ncoeffs);\n    }\n  }, {\n    key: \"_sswu\",\n    value: function _sswu(u) {\n      // Simplified Shallue-Woestijne-Ulas Method.\n      //\n      // Distribution: 3/8.\n      //\n      // [SSWU1] Page 15-16, Section 7. Appendix G.\n      // [SSWU2] Page 5, Theorem 2.3.\n      // [H2EC] \"Simplified Shallue-van de Woestijne-Ulas Method\".\n      //\n      // Assumptions:\n      //\n      //   - a != 0, b != 0.\n      //   - Let z be a non-square in F(p).\n      //   - z != -1.\n      //   - The polynomial g(x) - z is irreducible over F(p).\n      //   - g(b / (z * a)) is square in F(p).\n      //   - u != 0, u != +-sqrt(-1 / z).\n      //\n      // Map:\n      //\n      //   g(x) = x^3 + a * x + b\n      //   t1 = 1 / (z^2 * u^4 + z * u^2)\n      //   x1 = (-b / a) * (1 + t1)\n      //   x1 = b / (z * a), if t1 = 0\n      //   x2 = z * u^2 * x1\n      //   x = x1, if g(x1) is square\n      //     = x2, otherwise\n      //   y = sign(u) * abs(sqrt(g(x)))\n      var b = this.b,\n          z = this.z,\n          ai = this.ai,\n          zi = this.zi,\n          one = this.one;\n      var z2 = z.redSqr();\n      var ba = b.redNeg().redMul(ai);\n      var bza = b.redMul(zi).redMul(ai);\n      var u2 = u.redSqr();\n      var u4 = u2.redSqr();\n      var t0 = z2.redMul(u4).redIAdd(z.redMul(u2));\n      var t1 = t0.isZero() ? t0 : t0.redInvert();\n      var x1 = t1.isZero() ? bza : ba.redMul(one.redAdd(t1));\n      var x2 = z.redMul(u2).redMul(x1);\n      var y1 = this.solveY2(x1);\n      var y2 = this.solveY2(x2);\n      var alpha = y1.redIsSquare() | 0;\n      var x = [x1, x2][alpha ^ 1];\n      var y = [y1, y2][alpha ^ 1].redSqrt();\n      if (y.redIsOdd() !== u.redIsOdd()) y.redINeg();\n      return this.point(x, y);\n    }\n  }, {\n    key: \"_sswui\",\n    value: function _sswui(p, hint) {\n      // Inverting the Map (Simplified Shallue-Woestijne-Ulas).\n      //\n      // Assumptions:\n      //\n      //   - a^2 * x^2 - 2 * a * b * x - 3 * b^2 is square in F(p).\n      //   - If r < 3 then x != -b / a.\n      //\n      // Unlike SVDW, the preimages here are evenly\n      // distributed (more or less). SSWU covers ~3/8\n      // of the curve points. Each preimage has a 1/2\n      // chance of mapping to either x1 or x2.\n      //\n      // Assuming the point is within that set, each\n      // point has a 1/4 chance of inverting to any\n      // of the preimages. This means we can simply\n      // randomly select a preimage if one exists.\n      //\n      // However, the [SVDW2] sampling method seems\n      // slighly faster in practice for [SQUARED].\n      //\n      // Map:\n      //\n      //   c = sqrt(a^2 * x^2 - 2 * a * b * x - 3 * b^2)\n      //   u1 = -(a * x + b - c) / (2 * (a * x + b) * z)\n      //   u2 = -(a * x + b + c) / (2 * (a * x + b) * z)\n      //   u3 = -(a * x + b - c) / (2 * b * z)\n      //   u4 = -(a * x + b + c) / (2 * b * z)\n      //   r = random integer in [1,4]\n      //   u = sign(y) * abs(sqrt(ur))\n      var a = this.a,\n          b = this.b,\n          z = this.z;\n      var x = p.x,\n          y = p.y;\n      var r = hint & 3;\n      var a2x2 = a.redSqr().redMul(x.redSqr());\n      var abx2 = a.redMul(b).redMul(x).redIMuln(2);\n      var b23 = b.redSqr().redMuln(3);\n      var axb = a.redMul(x).redIAdd(b);\n      var c = a2x2.redISub(abx2).redISub(b23).redSqrt();\n      var n0 = axb.redSub(c).redINeg();\n      var n1 = axb.redAdd(c).redINeg();\n      var d0 = axb.redMul(z).redIMuln(2);\n      var d1 = b.redMul(z).redIMuln(2);\n      var n = [n0, n1][r & 1]; // r = 1 or 3\n\n      var d = [d0, d1][r >>> 1]; // r = 2 or 3\n\n      var u = n.redDivSqrt(d);\n      if (u.redIsOdd() !== y.redIsOdd()) u.redINeg();\n      return u;\n    }\n  }, {\n    key: \"_svdwf\",\n    value: function _svdwf(u) {\n      // Shallue-van de Woestijne Method.\n      //\n      // Distribution: 9/16.\n      //\n      // [SVDW1] Section 5.\n      // [SVDW2] Page 8, Section 3.\n      //         Page 15, Section 6, Algorithm 1.\n      // [H2EC] \"Shallue-van de Woestijne Method\".\n      //\n      // Assumptions:\n      //\n      //   - p = 1 (mod 3).\n      //   - a = 0, b != 0.\n      //   - Let z be a unique element in F(p).\n      //   - g((sqrt(-3 * z^2) - z) / 2) is square in F(p).\n      //   - u != 0, u != +-sqrt(-g(z)).\n      //\n      // Map:\n      //\n      //   g(x) = x^3 + b\n      //   c = sqrt(-3 * z^2)\n      //   t1 = u^2 + g(z)\n      //   t2 = 1 / (u^2 * t1)\n      //   t3 = u^4 * t2 * c\n      //   x1 = (c - z) / 2 - t3\n      //   x2 = t3 - (c + z) / 2\n      //   x3 = z - t1^3 * t2 / (3 * z^2)\n      //   x = x1, if g(x1) is square\n      //     = x2, if g(x2) is square\n      //     = x3, otherwise\n      //   y = sign(u) * abs(sqrt(g(x)))\n      var c = this.c,\n          z = this.z,\n          zi = this.zi,\n          i2 = this.i2,\n          i3 = this.i3;\n      var gz = this.solveY2(z);\n      var z3 = i3.redMul(zi.redSqr());\n      var u2 = u.redSqr();\n      var u4 = u2.redSqr();\n      var t1 = u2.redAdd(gz);\n      var u2t1 = u2.redMul(t1);\n      var t2 = u2t1.isZero() ? u2t1 : u2t1.redInvert();\n      var t3 = u4.redMul(t2).redMul(c);\n      var t4 = t1.redSqr().redMul(t1);\n      var x1 = c.redSub(z).redMul(i2).redISub(t3);\n      var x2 = t3.redSub(c.redAdd(z).redMul(i2));\n      var x3 = z.redSub(t4.redMul(t2).redMul(z3));\n      var y1 = this.solveY2(x1);\n      var y2 = this.solveY2(x2);\n      var y3 = this.solveY2(x3);\n      var alpha = y1.redJacobi() | 1;\n      var beta = y2.redJacobi() | 1;\n      var i = mod((alpha - 1) * beta, 3);\n      var x = [x1, x2, x3][i];\n      var y = [y1, y2, y3][i];\n      return [x, y];\n    }\n  }, {\n    key: \"_svdw\",\n    value: function _svdw(u) {\n      var _this$_svdwf = this._svdwf(u),\n          _this$_svdwf2 = _slicedToArray(_this$_svdwf, 2),\n          x = _this$_svdwf2[0],\n          yy = _this$_svdwf2[1];\n\n      var y = yy.redSqrt();\n      if (y.redIsOdd() !== u.redIsOdd()) y.redINeg();\n      return this.point(x, y);\n    }\n  }, {\n    key: \"_svdwi\",\n    value: function _svdwi(p, hint) {\n      // Inverting the Map (Shallue-van de Woestijne).\n      //\n      // [SQUARED] Algorithm 1, Page 8, Section 3.3.\n      // [SVDW2] Page 12, Section 5.\n      // [SVDW3] \"Inverting the map\".\n      //\n      // Assumptions:\n      //\n      //   - If r = 1 then x != -(c + z) / 2.\n      //   - If r = 2 then x != (c - z) / 2.\n      //   - If r > 2 then (t0 - t1 + t2) is square in F(p).\n      //   - f(f^-1(x)) = x where f is the map function.\n      //\n      // We use the sampling method from [SVDW2],\n      // _not_ [SQUARED]. This seems to have a\n      // better distribution in practice.\n      //\n      // Note that [SVDW3] also appears to be\n      // incorrect in terms of distribution.\n      //\n      // The distribution of f(u), assuming u is\n      // random, is (1/2, 1/4, 1/4).\n      //\n      // To mirror this, f^-1(x) should simply\n      // pick (1/2, 1/4, 1/8, 1/8).\n      //\n      // To anyone running the forward map, our\n      // strings will appear to be random.\n      //\n      // Map:\n      //\n      //   g(x) = x^3 + b\n      //   c = sqrt(-3 * z^2)\n      //   t0 = 9 * (x^2 * z^2 + z^4)\n      //   t1 = 18 * x * z^3\n      //   t2 = 12 * g(z) * (x - z)\n      //   t3 = sqrt(t0 - t1 + t2)\n      //   t4 = t3 * z\n      //   u1 = g(z) * (c - 2 * x - z) / (c + 2 * x + z)\n      //   u2 = g(z) * (c + 2 * x + z) / (c - 2 * x - z)\n      //   u3 = (3 * (z^3 - x * z^2) - 2 * g(z) + t4) / 2\n      //   u4 = (3 * (z^3 - x * z^2) - 2 * g(z) - t4) / 2\n      //   r = random integer in [1,4]\n      //   u = sign(y) * abs(sqrt(ur))\n      var b = this.b,\n          c = this.c,\n          z = this.z,\n          zero = this.zero,\n          two = this.two;\n      var x = p.x,\n          y = p.y;\n      var r = hint & 3;\n      var z2 = z.redSqr();\n      var z3 = z2.redMul(z);\n      var z4 = z2.redSqr();\n      var gz = z3.redAdd(b);\n      var gz2 = gz.redMuln(2);\n      var xx = x.redSqr();\n      var x2z = x.redMuln(2).redIAdd(z);\n      var xz2 = x.redMul(z2);\n      var c0 = c.redSub(x2z);\n      var c1 = c.redAdd(x2z);\n      var t0 = xx.redMul(z2).redIAdd(z4).redIMuln(9);\n      var t1 = x.redMul(z3).redIMuln(18);\n      var t2 = gz.redMul(x.redSub(z)).redIMuln(12);\n      var t3 = r >= 2 ? t0.redISub(t1).redIAdd(t2).redSqrt() : zero;\n      var t4 = t3.redMul(z);\n      var t5 = z3.redISub(xz2).redIMuln(3).redISub(gz2);\n      var n0 = gz.redMul(c0);\n      var n1 = gz.redMul(c1);\n      var n2 = t5.redAdd(t4);\n      var n3 = t5.redSub(t4);\n      var d2 = two;\n      var n = [n0, n1, n2, n3][r];\n      var d = [c1, c0, d2, d2][r];\n      var u = n.redDivSqrt(d);\n\n      var _this$_svdwf3 = this._svdwf(u),\n          _this$_svdwf4 = _slicedToArray(_this$_svdwf3, 1),\n          x0 = _this$_svdwf4[0];\n\n      if (!x0.eq(x)) throw new Error('Invalid point.');\n      if (u.redIsOdd() !== y.redIsOdd()) u.redINeg();\n      return u;\n    }\n  }, {\n    key: \"isElliptic\",\n    value: function isElliptic() {\n      var a = this.a,\n          b = this.b;\n      var a2 = a.redSqr();\n      var a3 = a2.redMul(a);\n      var b2 = b.redSqr();\n      var d = b2.redMuln(27).redIAdd(a3.redMuln(4)); // 4 * a^3 + 27 * b^2 != 0\n\n      return !d.isZero();\n    }\n  }, {\n    key: \"jinv\",\n    value: function jinv() {\n      // [ARITH1] Page 71, Section 4.4.\n      // http://mathworld.wolfram.com/j-Invariant.html\n      var a = this.a,\n          b = this.b;\n      var a2 = a.redSqr();\n      var a3 = a2.redMul(a);\n      var b2 = b.redSqr();\n      var t0 = a3.redMuln(4);\n      var lhs = t0.redMuln(1728);\n      var rhs = b2.redMuln(27).redIAdd(t0);\n      if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // (1728 * 4 * a^3) / (4 * a^3 + 27 * b^2)\n\n      return lhs.redDiv(rhs).fromRed();\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      return new ShortPoint(this, x, y);\n    }\n  }, {\n    key: \"jpoint\",\n    value: function jpoint(x, y, z) {\n      return new JPoint(this, x, y, z);\n    }\n  }, {\n    key: \"solveX\",\n    value: function solveX(y) {\n      assert(y instanceof BN);\n      if (!this.a.isZero()) throw new Error('Not implemented.'); // x^3 = y^2 - b\n\n      var y2 = y.redSqr();\n      var x3 = y2.redSub(this.b);\n      return cubeRoots(x3);\n    }\n  }, {\n    key: \"solveY2\",\n    value: function solveY2(x) {\n      // [GECC] Page 89, Section 3.2.2.\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw.html\n      assert(x instanceof BN); // y^2 = x^3 + a * x + b\n\n      var x3 = x.redSqr().redMul(x);\n      var y2 = x3.redIAdd(this.b);\n\n      if (!this.zeroA) {\n        // Save some cycles for a = -3.\n        if (this.threeA) y2.redIAdd(x.redMuln(-3));else y2.redIAdd(this.a.redMul(x));\n      }\n\n      return y2;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(point) {\n      assert(point instanceof ShortPoint);\n      if (point.inf) return true;\n      var x = point.x,\n          y = point.y;\n      var y2 = this.solveY2(x);\n      return y.redSqr().eq(y2);\n    }\n  }, {\n    key: \"pointFromX\",\n    value: function pointFromX(x) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      assert(x instanceof BN);\n      assert(sign == null || typeof sign === 'boolean');\n      if (!x.red) x = x.toRed(this.red);\n      var y = this.solveY(x);\n\n      if (sign != null) {\n        if (this.h.cmpn(1) > 0) {\n          if (y.isZero() && sign) throw new Error('Invalid point.');\n        }\n\n        if (y.redIsOdd() !== sign) y.redINeg();\n      }\n\n      return this.point(x, y);\n    }\n  }, {\n    key: \"pointFromY\",\n    value: function pointFromY(y) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      assert(y instanceof BN);\n      assert(index >>> 0 === index);\n      if (!y.red) y = y.toRed(this.red);\n      var coords = this.solveX(y);\n      if (index >= coords.length) throw new Error('Invalid X coordinate index.');\n      var x = coords[index];\n      return this.point(x, y);\n    }\n  }, {\n    key: \"isIsomorphic\",\n    value: function isIsomorphic(curve) {\n      // [GECC] Page 84, Section 3.1.5.\n      // [ARITH1] Page 286, Section 13.2.3.c.\n      assert(curve instanceof Curve);\n      if (!curve.p.eq(this.p)) return false;\n      var u2, u3;\n\n      try {\n        var _this$_scale = this._scale(curve);\n\n        var _this$_scale2 = _slicedToArray(_this$_scale, 2);\n\n        u2 = _this$_scale2[0];\n        u3 = _this$_scale2[1];\n      } catch (e) {\n        return false;\n      } // E(a,b) <-> E(au^4,bu^6)\n\n\n      if (curve.type === 'short') {\n        // a' = a * u^4, b' = b * u^6\n        var a = this.field(curve.a).redMul(u2.redSqr());\n        var b = this.field(curve.b).redMul(u3.redSqr());\n        return this.a.eq(a) && this.b.eq(b);\n      } // E(a,b) <-> M(A,B)\n\n\n      if (curve.type === 'mont') {\n        // (A / (3 * B))^3 + a * (A / (3 * B)) + b = 0\n        var a3 = curve.a3,\n            bi = curve.bi;\n        var x = this.field(a3.redMul(bi)).redMul(u2);\n        var y2 = this.solveY2(x);\n        return y2.isZero();\n      } // E(a,b) <-> E(a,d)\n\n\n      if (curve.type === 'edwards') {\n        // ((a' + d') / 6)^3 + a * ((a' + d') / 6) + b = 0\n        var _x = this.field(curve.ad6).redMul(u2);\n\n        var _y = this.solveY2(_x);\n\n        return _y.isZero();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isIsogenous\",\n    value: function isIsogenous(curve) {\n      assert(curve instanceof Curve);\n      return false;\n    }\n  }, {\n    key: \"pointFromShort\",\n    value: function pointFromShort(point) {\n      // [GECC] Page 84, Section 3.1.5.\n      // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n      assert(point instanceof ShortPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Isomorphic maps for E(a,b)<->E(au^4,bu^6):\n        //\n        //   x' = x * u^2\n        //   y' = y * u^3\n        //\n        // Where a * u^4 = a' and b * u^6 = b'.\n        if (point.isInfinity()) return this.point();\n\n        var _this$_scale3 = this._scale(point.curve),\n            _this$_scale4 = _slicedToArray(_this$_scale3, 2),\n            u2 = _this$_scale4[0],\n            u3 = _this$_scale4[1];\n\n        var x = this.field(point.x);\n        var y = this.field(point.y);\n        var nx = x.redMul(u2);\n        var ny = y.redMul(u3);\n        return this.point(nx, ny);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromMont\",\n    value: function pointFromMont(point) {\n      // [ALT] Appendix E.2 (Switching between Alternative Representations).\n      // [MONT2] \"Equivalence with Weierstrass curves\"\n      assert(point instanceof MontPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Equivalence for M(A,B)->E(a,b):\n        //\n        //   x = (u + A / 3) / B\n        //   y = v / B\n        //\n        // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n        if (point.isInfinity()) return this.point();\n        var _point$curve = point.curve,\n            a3 = _point$curve.a3,\n            bi = _point$curve.bi;\n\n        var _this$_scale5 = this._scale(point.curve),\n            _this$_scale6 = _slicedToArray(_this$_scale5, 2),\n            u2 = _this$_scale6[0],\n            u3 = _this$_scale6[1];\n\n        var nx = point.x.redAdd(a3).redMul(bi);\n        var ny = point.y.redMul(bi);\n        return this.point(this.field(nx).redMul(u2), this.field(ny).redMul(u3));\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromEdwards\",\n    value: function pointFromEdwards(point) {\n      // [TWISTEQ] Section 2.\n      assert(point instanceof EdwardsPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Equivalence for E(a,d)->E(a',b'):\n        //\n        //   x' = ((5 * d - a) * y + d - 5 * a) / (12 * (y - 1))\n        //   y' = (d - a) * (y + 1) / (4 * x * (y - 1))\n        //\n        // Undefined for x = 0 or y = 1.\n        //\n        // Exceptional Cases:\n        //   - (0, 1) -> O\n        //   - (0, -1) -> ((a + d) / 6, 0)\n        //\n        // Unexceptional Cases:\n        //   - (sqrt(1 / a), 0) -> ((5 * a - d) / 12, (a - d) / 4 * sqrt(a))\n        var _point$curve2 = point.curve,\n            a = _point$curve2.a,\n            d = _point$curve2.d,\n            ad6 = _point$curve2.ad6;\n\n        var _this$_scale7 = this._scale(point.curve),\n            _this$_scale8 = _slicedToArray(_this$_scale7, 2),\n            u2 = _this$_scale8[0],\n            u3 = _this$_scale8[1];\n\n        if (point.isInfinity()) return this.point();\n\n        if (point.x.isZero()) {\n          var _x2 = this.field(ad6).redMul(u2);\n\n          return this.point(_x2, this.zero);\n        }\n\n        var x = point.x,\n            y = point.y,\n            z = point.z;\n        var a5 = a.redMuln(5);\n        var d5 = d.redMuln(5);\n        var dma = d.redSub(a);\n        var d5a = d5.redSub(a);\n        var da5 = d.redSub(a5);\n        var ypz = y.redAdd(z);\n        var ymz = y.redSub(z);\n        var xx = d5a.redMul(y).redIAdd(da5.redMul(z));\n        var xz = ymz.redMuln(12);\n        var yy = dma.redMul(ypz).redMul(z);\n        var yz = ymz.redMul(x).redIMuln(4);\n        return this.cpoint(this.field(xx).redMul(u2), this.field(xz), this.field(yy).redMul(u3), this.field(yz));\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromUniform\",\n    value: function pointFromUniform(u) {\n      assert(u instanceof BN); // z = 0 or b = 0\n\n      if (this.z.isZero() || this.b.isZero()) throw new Error('Not implemented.'); // a != 0, b != 0\n\n      if (!this.a.isZero()) return this._sswu(u); // p = 1 mod 3, a = 0, b != 0\n\n      if (!this.c.isZero()) return this._svdw(u);\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointToUniform\",\n    value: function pointToUniform(p, hint) {\n      var _this2 = this;\n\n      // Convert a short weierstrass point to a field\n      // element by inverting either the SSWU or SVDW\n      // map.\n      //\n      // Hint Layout:\n      //\n      //   [00000000] [0000] [0000]\n      //        |        |      |\n      //        |        |      +-- preimage index\n      //        |        +--- subgroup\n      //        +-- bits to OR with uniform bytes\n      assert(p instanceof ShortPoint);\n      assert(hint >>> 0 === hint); // z = 0 or b = 0\n\n      if (this.z.isZero() || this.b.isZero()) throw new Error('Not implemented.'); // P = O\n\n      if (p.isInfinity()) throw new Error('Invalid point.'); // Add a random torsion component.\n\n      var i = (hint >>> 4 & 15) % this.torsion.length;\n      var q = p.add(this.torsion[i]);\n      return wrapErrors(function () {\n        // a != 0, b != 0\n        if (!_this2.a.isZero()) return _this2._sswui(q, hint); // p = 1 mod 3, a = 0, b != 0\n\n        if (!_this2.c.isZero()) return _this2._svdwi(q, hint);\n        throw new Error('Not implemented.');\n      });\n    }\n  }, {\n    key: \"mulAll\",\n    value: function mulAll(points, coeffs) {\n      return _get(_getPrototypeOf(ShortCurve.prototype), \"mulAll\", this).call(this, points, coeffs).toP();\n    }\n  }, {\n    key: \"affinizeAll\",\n    value: function affinizeAll(points) {\n      var out = this.normalizeAll(points);\n\n      for (var i = 0; i < out.length; i++) {\n        out[i] = out[i].toP();\n      }\n\n      return out;\n    }\n  }, {\n    key: \"decodePoint\",\n    value: function decodePoint(bytes) {\n      return ShortPoint.decode(this, bytes);\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX(point) {\n      assert(point instanceof Point);\n      return point.encodeX();\n    }\n  }, {\n    key: \"decodeEven\",\n    value: function decodeEven(bytes) {\n      return ShortPoint.decodeEven(this, bytes);\n    }\n  }, {\n    key: \"decodeSquare\",\n    value: function decodeSquare(bytes) {\n      return ShortPoint.decodeSquare(this, bytes);\n    }\n  }, {\n    key: \"toShort\",\n    value: function toShort(a0, odd) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_short = this._short(a0, odd),\n          _this$_short2 = _slicedToArray(_this$_short, 2),\n          a = _this$_short2[0],\n          b = _this$_short2[1];\n\n      var curve = new ShortCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h\n      });\n\n      if (sign != null) {\n        var _curve$_scale = curve._scale(this),\n            _curve$_scale2 = _slicedToArray(_curve$_scale, 2),\n            u3 = _curve$_scale2[1];\n\n        if (u3.redIsOdd() !== sign) u3.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromShort(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toMont\",\n    value: function toMont(b0, odd) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_mont = this._mont(b0, odd),\n          _this$_mont2 = _slicedToArray(_this$_mont, 2),\n          a = _this$_mont2[0],\n          b = _this$_mont2[1];\n\n      var curve = new MontCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h\n      });\n\n      if (sign != null) {\n        var _this$_scale9 = this._scale(curve),\n            _this$_scale10 = _slicedToArray(_this$_scale9, 2),\n            u3 = _this$_scale10[1];\n\n        if (u3.redIsOdd() !== sign) u3.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromShort(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toEdwards\",\n    value: function toEdwards(a0, odd) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_edwards = this._edwards(a0, odd),\n          _this$_edwards2 = _slicedToArray(_this$_edwards, 2),\n          a = _this$_edwards2[0],\n          d = _this$_edwards2[1];\n\n      var curve = new EdwardsCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        d: d,\n        n: this.n,\n        h: this.h\n      });\n\n      if (sign != null) {\n        var _this$_scale11 = this._scale(curve),\n            _this$_scale12 = _slicedToArray(_this$_scale11, 2),\n            u3 = _this$_scale12[1];\n\n        if (u3.redIsOdd() !== sign) u3.redINeg();\n      }\n\n      if (!this.g.isInfinity()) {\n        curve.g = curve.pointFromShort(this.g);\n        curve.g.normalize();\n      }\n\n      if (curve.isComplete()) {\n        for (var i = 0; i < this.h.word(0); i++) {\n          curve.torsion[i] = curve.pointFromShort(this.torsion[i]);\n          curve.torsion[i].normalize();\n        }\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"pointFromJSON\",\n    value: function pointFromJSON(json) {\n      return ShortPoint.fromJSON(this, json);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      var json = _get(_getPrototypeOf(ShortCurve.prototype), \"toJSON\", this).call(this, pre);\n\n      json.a = this.a.fromRed().toJSON();\n      json.b = this.b.fromRed().toJSON();\n      if (!this.c.isZero()) json.c = this.c.fromRed().toJSON();\n      return json;\n    }\n  }], [{\n    key: \"_isomorphism\",\n    value: function _isomorphism(curveA, curveB, custom, odd) {\n      // Short Weierstrass Isomorphism.\n      //\n      // [GECC] Page 84, Section 3.1.5.\n      // [ARITH1] Page 274, Section 13.1.5.\n      // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).\n      //\n      // Find `u` such that `a * u^4 = a'` and `b * u^6 = b'`.\n      //\n      // Transformation:\n      //\n      //   u4 = a' / a\n      //   u2 = +-sqrt(u4)\n      //   u6 = u4 * u2\n      //   a' = a * u4\n      //   b' = b * u6\n      //\n      // Where `u2` is any root that is square.\n      //\n      // If a = 0, we can do:\n      //\n      //   a' = 0\n      //   b' = b'\n      //\n      // Where (b' / b)^(1 / 3) is square.\n      //\n      // If b = 0, we can do:\n      //\n      //   a' = a'\n      //   b' = 0\n      //\n      // Where sqrt(a' / a) is square.\n      assert(curveA instanceof BN);\n      assert(curveB instanceof BN);\n      assert(custom instanceof BN);\n      assert(odd == null || typeof odd === 'boolean');\n      assert(!curveA.isZero() || !curveB.isZero());\n      if (custom.isZero()) throw new Error('Invalid coefficient.');\n\n      if (curveA.isZero()) {\n        var customB = custom;\n\n        var _u9 = customB.redDiv(curveB); // Todo: allow index flag.\n\n\n        var _u10 = uncube(_u9); // Already checked in uncube().\n\n\n        assert(_u10.redJacobi() === 1);\n        return [curveA.clone(), customB.clone()];\n      }\n\n      if (curveB.isZero()) {\n        var _customA = custom;\n\n        var _u11 = _customA.redDiv(curveA);\n\n        var _u12 = _u11.redSqrt(); // Todo: allow odd flag.\n\n\n        if (_u12.redJacobi() !== 1) _u12.redINeg();\n        if (_u12.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n        return [_customA.clone(), curveB.clone()];\n      }\n\n      var customA = custom;\n      var u4 = customA.redDiv(curveA);\n      var u2 = u4.redSqrt();\n\n      if (odd != null) {\n        if (u2.redIsOdd() !== odd) u2.redINeg();\n      } else {\n        if (u2.redJacobi() !== 1) u2.redINeg();\n      }\n\n      if (u2.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n      var u6 = u4.redMul(u2);\n      var a = curveA.redMul(u4);\n      var b = curveB.redMul(u6);\n      assert(a.eq(customA));\n      return [a, b];\n    }\n  }]);\n\n  return ShortCurve;\n}(Curve);\n/**\n * ShortPoint\n */\n\n\nvar ShortPoint = /*#__PURE__*/function (_Point) {\n  _inherits(ShortPoint, _Point);\n\n  var _super2 = _createSuper(ShortPoint);\n\n  function ShortPoint(curve, x, y) {\n    var _this3;\n\n    _classCallCheck(this, ShortPoint);\n\n    assert(curve instanceof ShortCurve);\n    _this3 = _super2.call(this, curve, types.AFFINE);\n    _this3.x = _this3.curve.zero;\n    _this3.y = _this3.curve.zero;\n    _this3.inf = true;\n    if (x != null) _this3._init(x, y);\n    return _this3;\n  }\n\n  _createClass(ShortPoint, [{\n    key: \"_init\",\n    value: function _init(x, y) {\n      assert(x instanceof BN);\n      assert(y instanceof BN);\n      this.x = x;\n      this.y = y;\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }, {\n    key: \"_getBeta\",\n    value: function _getBeta() {\n      var _this4 = this;\n\n      if (!this.curve.endo) return null;\n      if (this.pre && this.pre.beta) return this.pre.beta; // Augment the point with our beta value.\n      // This is the counterpart to `k2` after\n      // the endomorphism split of `k`.\n      //\n      // Note that if we have precomputation,\n      // we have to clone and update all of the\n      // precomputed points below.\n\n      var xb = this.x.redMul(this.curve.endo.beta);\n      var beta = this.curve.point(xb, this.y);\n\n      if (this.pre) {\n        beta.pre = this.pre.map(function (point) {\n          var xb = point.x.redMul(_this4.curve.endo.beta);\n          return _this4.curve.point(xb, point.y);\n        });\n        this.pre.beta = beta;\n      }\n\n      return beta;\n    }\n  }, {\n    key: \"_getJNAF\",\n    value: function _getJNAF(point) {\n      assert(point instanceof ShortPoint);\n      if (this.inf || point.inf) return _get(_getPrototypeOf(ShortPoint.prototype), \"_getJNAF\", this).call(this, point); // Create comb for JSF.\n\n      var comb = [this, // 1\n      null, // 3\n      null, // 5\n      point // 7\n      ]; // Try to avoid Jacobian points, if possible.\n\n      if (this.y.eq(point.y)) {\n        comb[1] = this.add(point);\n        comb[2] = this.toJ().sub(point);\n      } else if (this.y.eq(point.y.redNeg())) {\n        comb[1] = this.toJ().add(point);\n        comb[2] = this.sub(point);\n      } else {\n        comb[1] = this.toJ().add(point);\n        comb[2] = this.toJ().sub(point);\n      }\n\n      return comb;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      if (this.inf) return this.curve.point();\n      return this.curve.point(this.x, this.y);\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      return this.toJ().scale(a);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      // P = O\n      if (this.inf) return this; // -(X1, Y1) = (X1, -Y1)\n\n      return this.curve.point(this.x, this.y.redNeg());\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      // [GECC] Page 80, Section 3.1.2.\n      //\n      // Addition Law:\n      //\n      //   l = (y1 - y2) / (x1 - x2)\n      //   x3 = l^2 - x1 - x2\n      //   y3 = l * (x1 - x3) - y1\n      //\n      // 1I + 2M + 1S + 6A\n      assert(p instanceof ShortPoint); // O + P = P\n\n      if (this.inf) return p; // P + O = P\n\n      if (p.inf) return this; // P + P, P + -P\n\n      if (this.x.eq(p.x)) {\n        // P + -P = O\n        if (!this.y.eq(p.y)) return this.curve.point(); // P + P = 2P\n\n        return this.dbl();\n      } // X1 != X2, Y1 = Y2\n\n\n      if (this.y.eq(p.y)) {\n        // X3 = -X1 - X2\n        var _nx = this.x.redNeg().redISub(p.x); // Y3 = -Y1\n\n\n        var _ny = this.y.redNeg(); // Skip the inverse.\n\n\n        return this.curve.point(_nx, _ny);\n      } // H = X1 - X2\n\n\n      var h = this.x.redSub(p.x); // R = Y1 - Y2\n\n      var r = this.y.redSub(p.y); // L = R / H\n\n      var l = r.redDiv(h); // X3 = L^2 - X1 - X2\n\n      var nx = l.redSqr().redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n      var ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      // [GECC] Page 80, Section 3.1.2.\n      //\n      // Addition Law (doubling):\n      //\n      //   l = (3 * x1^2 + a) / (2 * y1)\n      //   x3 = l^2 - 2 * x1\n      //   y3 = l * (x1 - x3) - y1\n      //\n      // 1I + 2M + 2S + 3A + 2*2 + 1*3\n      // P = O\n      if (this.inf) return this; // Y1 = 0\n\n      if (this.y.isZero()) return this.curve.point(); // XX = X1^2\n\n      var xx = this.x.redSqr(); // M = 3 * XX + a\n\n      var m = xx.redIMuln(3).redIAdd(this.curve.a); // Z = 2 * Y1\n\n      var z = this.y.redMuln(2); // L = M / Z\n\n      var l = m.redDiv(z); // X3 = L^2 - 2 * X1\n\n      var nx = l.redSqr().redISub(this.x).redISub(this.x); // Y3 = L * (X1 - X3) - Y1\n\n      var ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    }\n  }, {\n    key: \"dblp\",\n    value: function dblp(pow) {\n      return this.toJ().dblp(pow).toP();\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      if (this.inf) throw new Error('Invalid point.');\n      return this.x.fromRed();\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      if (this.inf) throw new Error('Invalid point.');\n      return this.y.fromRed();\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(p) {\n      assert(p instanceof ShortPoint); // P = Q\n\n      if (this === p) return true; // P = O\n\n      if (this.inf) return p.inf; // Q = O\n\n      if (p.inf) return false; // X1 = X2, Y1 = Y2\n\n      return this.x.eq(p.x) && this.y.eq(p.y);\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      assert(point instanceof ShortPoint);\n      if (this.inf && !point.inf) return -1;\n      if (!this.inf && point.inf) return 1;\n      if (this.inf && point.inf) return 0;\n      return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      // Infinity cannot be represented in\n      // the affine space, except by a flag.\n      return this.inf;\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      if (this.inf) return false;\n      return this.y.isZero();\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      if (this.inf) return false;\n      return this.y.redIsOdd();\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      if (this.inf) return false;\n      return this.y.redIsEven();\n    }\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      if (this.inf) return false;\n      return this.y.redJacobi() !== -1;\n    }\n  }, {\n    key: \"eqX\",\n    value: function eqX(x) {\n      assert(x instanceof BN);\n      assert(!x.red);\n      if (this.inf) return false;\n      return this.getX().eq(x);\n    }\n  }, {\n    key: \"eqR\",\n    value: function eqR(x) {\n      assert(x instanceof BN);\n      assert(!x.red);\n      assert(!this.curve.n.isZero());\n      if (this.inf) return false;\n      return this.getX().imod(this.curve.n).eq(x);\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(k) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"mul\", this).call(this, k).toP();\n    }\n  }, {\n    key: \"muln\",\n    value: function muln(k) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"muln\", this).call(this, k).toP();\n    }\n  }, {\n    key: \"mulBlind\",\n    value: function mulBlind(k, rng) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"mulBlind\", this).call(this, k, rng).toP();\n    }\n  }, {\n    key: \"mulAdd\",\n    value: function mulAdd(k1, p2, k2) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"mulAdd\", this).call(this, k1, p2, k2).toP();\n    }\n  }, {\n    key: \"mulH\",\n    value: function mulH() {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"mulH\", this).call(this).toP();\n    }\n  }, {\n    key: \"div\",\n    value: function div(k) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"div\", this).call(this, k).toP();\n    }\n  }, {\n    key: \"divn\",\n    value: function divn(k) {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"divn\", this).call(this, k).toP();\n    }\n  }, {\n    key: \"divH\",\n    value: function divH() {\n      return _get(_getPrototypeOf(ShortPoint.prototype), \"divH\", this).call(this).toP();\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      return this;\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      // (X3, Y3, Z3) = (1, 1, 0)\n      if (this.inf) return this.curve.jpoint(); // (X3, Y3, Z3) = (X1, Y1, 1)\n\n      return this.curve.jpoint(this.x, this.y, this.curve.one);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(compact) {\n      // [SEC1] Page 10, Section 2.3.3.\n      if (compact == null) compact = true;\n      assert(typeof compact === 'boolean');\n      var fieldSize = this.curve.fieldSize; // We do not serialize points at infinity.\n\n      if (this.inf) throw new Error('Invalid point.'); // Compressed form (0x02 = even, 0x03 = odd).\n\n      if (compact) {\n        var _p = Buffer.alloc(1 + fieldSize);\n\n        var _x3 = this.curve.encodeField(this.getX());\n\n        _p[0] = 0x02 | this.y.redIsOdd();\n\n        _x3.copy(_p, 1);\n\n        return _p;\n      } // Uncompressed form (0x04).\n\n\n      var p = Buffer.alloc(1 + fieldSize * 2);\n      var x = this.curve.encodeField(this.getX());\n      var y = this.curve.encodeField(this.getY());\n      p[0] = 0x04;\n      x.copy(p, 1);\n      y.copy(p, 1 + fieldSize);\n      return p;\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX() {\n      // [SCHNORR] \"Specification\".\n      // [BIP340] \"Specification\".\n      return this.curve.encodeField(this.getX());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      if (this.inf) return [];\n      var x = this.getX().toJSON();\n      var y = this.getY().toJSON();\n      if (pre === true && this.pre) return [x, y, this.pre.toJSON()];\n      return [x, y];\n    }\n  }, {\n    key: \"toPretty\",\n    value: function toPretty() {\n      if (this.inf) return [];\n      var size = this.curve.fieldSize * 2;\n\n      var x = _toPretty(this.getX(), size);\n\n      var y = _toPretty(this.getY(), size);\n\n      return [x, y];\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      if (this.inf) return '<ShortPoint: Infinity>';\n      return '<ShortPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + '>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes) {\n      // [SEC1] Page 11, Section 2.3.4.\n      assert(curve instanceof ShortCurve);\n      assert(Buffer.isBuffer(bytes));\n      var len = curve.fieldSize;\n      if (bytes.length < 1 + len) throw new Error('Not a point.'); // Point forms:\n      //\n      //   0x00 -> Infinity (openssl, unsupported)\n      //   0x02 -> Compressed Even\n      //   0x03 -> Compressed Odd\n      //   0x04 -> Uncompressed\n      //   0x06 -> Hybrid Even (openssl)\n      //   0x07 -> Hybrid Odd (openssl)\n      //\n      // Note that openssl supports serializing points\n      // at infinity as {0}. We choose not to support it\n      // because it's strange and not terribly useful.\n\n      var form = bytes[0];\n\n      switch (form) {\n        case 0x02:\n        case 0x03:\n          {\n            if (bytes.length !== 1 + len) throw new Error('Invalid point size for compressed.');\n            var x = curve.decodeField(bytes.slice(1, 1 + len));\n            if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n            var p = curve.pointFromX(x, form === 0x03);\n            assert(!p.isInfinity());\n            return p;\n          }\n\n        case 0x04:\n        case 0x06:\n        case 0x07:\n          {\n            if (bytes.length !== 1 + len * 2) throw new Error('Invalid point size for uncompressed.');\n\n            var _x4 = curve.decodeField(bytes.slice(1, 1 + len));\n\n            var y = curve.decodeField(bytes.slice(1 + len, 1 + 2 * len)); // [GECC] Algorithm 4.3, Page 180, Section 4.\n\n            if (_x4.cmp(curve.p) >= 0 || y.cmp(curve.p) >= 0) throw new Error('Invalid point.'); // OpenSSL hybrid encoding.\n\n            if (form !== 0x04 && form !== (0x06 | y.isOdd())) throw new Error('Invalid hybrid encoding.');\n\n            var _p2 = curve.point(_x4, y);\n\n            if (!_p2.validate()) throw new Error('Invalid point.');\n            assert(!_p2.isInfinity());\n            return _p2;\n          }\n\n        default:\n          {\n            throw new Error('Unknown point format.');\n          }\n      }\n    }\n  }, {\n    key: \"decodeEven\",\n    value: function decodeEven(curve, bytes) {\n      // [BIP340] \"Specification\".\n      assert(curve instanceof ShortCurve);\n      var x = curve.decodeField(bytes);\n      if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n      return curve.pointFromX(x, false);\n    }\n  }, {\n    key: \"decodeSquare\",\n    value: function decodeSquare(curve, bytes) {\n      // [SCHNORR] \"Specification\".\n      assert(curve instanceof ShortCurve);\n      var x = curve.decodeField(bytes);\n      if (x.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n      return curve.pointFromX(x);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      assert(curve instanceof ShortCurve);\n      assert(Array.isArray(json));\n      assert(json.length === 0 || json.length === 2 || json.length === 3);\n      if (json.length === 0) return curve.point();\n      var x = BN.fromJSON(json[0]);\n      var y = BN.fromJSON(json[1]);\n      var point = curve.point(x, y);\n      if (json.length > 2 && json[2] != null) point.pre = Precomp.fromJSON(point, json[2]);\n      return point;\n    }\n  }]);\n\n  return ShortPoint;\n}(Point);\n/**\n * JPoint\n */\n\n\nvar JPoint = /*#__PURE__*/function (_Point2) {\n  _inherits(JPoint, _Point2);\n\n  var _super3 = _createSuper(JPoint);\n\n  function JPoint(curve, x, y, z) {\n    var _this5;\n\n    _classCallCheck(this, JPoint);\n\n    assert(curve instanceof ShortCurve);\n    _this5 = _super3.call(this, curve, types.JACOBIAN);\n    _this5.x = _this5.curve.one;\n    _this5.y = _this5.curve.one;\n    _this5.z = _this5.curve.zero;\n    _this5.zOne = false;\n    if (x != null) _this5._init(x, y, z);\n    return _this5;\n  }\n\n  _createClass(JPoint, [{\n    key: \"_init\",\n    value: function _init(x, y, z) {\n      assert(x instanceof BN);\n      assert(y instanceof BN);\n      assert(z == null || z instanceof BN);\n      this.x = x;\n      this.y = y;\n      this.z = z || this.curve.one;\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n      this.zOne = this.z.eq(this.curve.one);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return this.curve.jpoint(this.x, this.y, this.z);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      // [GECC] Example 3.20, Page 88, Section 3.\n      var _this$curve2 = this.curve,\n          a = _this$curve2.a,\n          b = _this$curve2.b; // P = O\n\n      if (this.isInfinity()) return true; // Z1 = 1\n\n      if (this.zOne) return this.curve.validate(this.toP()); // y^2 = x^3 + a * x * z^4 + b * z^6\n\n      var lhs = this.y.redSqr();\n      var x3 = this.x.redSqr().redMul(this.x);\n      var z2 = this.z.redSqr();\n      var z4 = z2.redSqr();\n      var z6 = z4.redMul(z2);\n      var rhs = x3.redIAdd(b.redMul(z6));\n\n      if (!this.curve.zeroA) {\n        // Save some cycles for a = -3.\n        if (this.curve.threeA) rhs.redIAdd(z4.redIMuln(-3).redMul(this.x));else rhs.redIAdd(a.redMul(z4).redMul(this.x));\n      }\n\n      return lhs.eq(rhs);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z\n      // 1I + 3M + 1S\n      // Z = 1\n      if (this.zOne) return this; // P = O\n\n      if (this.isInfinity()) return this; // A = 1 / Z1\n\n      var a = this.z.redInvert(); // AA = A^2\n\n      var aa = a.redSqr(); // X3 = X1 * AA\n\n      this.x = this.x.redMul(aa); // Y3 = Y1 * AA * A\n\n      this.y = this.y.redMul(aa).redMul(a); // Z3 = 1\n\n      this.z = this.curve.one;\n      this.zOne = true;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      assert(a instanceof BN); // P = O\n\n      if (this.isInfinity()) return this.curve.jpoint(); // AA = A^2\n\n      var aa = a.redSqr(); // X3 = X1 * AA\n\n      var nx = this.x.redMul(aa); // Y3 = Y1 * AA * A\n\n      var ny = this.y.redMul(aa).redMul(a); // Z3 = Z1 * A\n\n      var nz = this.z.redMul(a);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      // -(X1, Y1, Z1) = (X1, -Y1, Z1)\n      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      assert(p instanceof Point);\n      if (p.type === types.AFFINE) return this._mixedAdd(p);\n      return this._add(p);\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(p) {\n      assert(p instanceof JPoint); // O + P = P\n\n      if (this.isInfinity()) return p; // P + O = P\n\n      if (p.isInfinity()) return this; // Z1 = 1\n\n      if (this.zOne) return p._addJA(this); // Z2 = 1\n\n      if (p.zOne) return this._addJA(p);\n      return this._addJJ(p);\n    }\n  }, {\n    key: \"_mixedAdd\",\n    value: function _mixedAdd(p) {\n      assert(p instanceof ShortPoint); // O + P = P\n\n      if (this.isInfinity()) return p.toJ(); // P + O = P\n\n      if (p.isInfinity()) return this;\n      return this._addJA(p);\n    }\n  }, {\n    key: \"_addJJ\",\n    value: function _addJJ(p) {\n      // No assumptions.\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-1998-cmo-2\n      // 12M + 4S + 6A + 1*2 (implemented as: 12M + 4S + 7A)\n      // Z1Z1 = Z1^2\n      var z1z1 = this.z.redSqr(); // Z2Z2 = Z2^2\n\n      var z2z2 = p.z.redSqr(); // U1 = X1 * Z2Z2\n\n      var u1 = this.x.redMul(z2z2); // U2 = X2 * Z1Z1\n\n      var u2 = p.x.redMul(z1z1); // S1 = Y1 * Z2 * Z2Z2\n\n      var s1 = this.y.redMul(p.z).redMul(z2z2); // S2 = Y2 * Z1 * Z1Z1\n\n      var s2 = p.y.redMul(this.z).redMul(z1z1); // H = U2 - U1\n\n      var h = u2.redISub(u1); // r = S2 - S1\n\n      var r = s2.redISub(s1); // H = 0\n\n      if (h.isZero()) {\n        if (!r.isZero()) return this.curve.jpoint();\n        return this.dbl();\n      } // HH = H^2\n\n\n      var hh = h.redSqr(); // HHH = H * HH\n\n      var hhh = h.redMul(hh); // V = U1 * HH\n\n      var v = u1.redMul(hh); // X3 = r^2 - HHH - 2 * V\n\n      var nx = r.redSqr().redISub(hhh).redISub(v).redISub(v); // Y3 = r * (V - X3) - S1 * HHH\n\n      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(hhh)); // Z3 = Z1 * Z2 * H\n\n      var nz = this.z.redMul(p.z).redMul(h);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"_addJA\",\n    value: function _addJA(p) {\n      // Assumes Z2 = 1.\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-madd\n      // 8M + 3S + 6A + 5*2 (implemented as: 8M + 3S + 7A + 4*2)\n      // Z1Z1 = Z1^2\n      var z1z1 = this.z.redSqr(); // U2 = X2 * Z1Z1\n\n      var u2 = p.x.redMul(z1z1); // S2 = Y2 * Z1 * Z1Z1\n\n      var s2 = p.y.redMul(this.z).redMul(z1z1); // H = U2 - X1\n\n      var h = u2.redISub(this.x); // r = 2 * (S2 - Y1)\n\n      var r = s2.redISub(this.y).redIMuln(2); // H = 0\n\n      if (h.isZero()) {\n        if (!r.isZero()) return this.curve.jpoint();\n        return this.dbl();\n      } // I = (2 * H)^2\n\n\n      var i = h.redMuln(2).redSqr(); // J = H * I\n\n      var j = h.redMul(i); // V = X1 * I\n\n      var v = this.x.redMul(i); // X3 = r^2 - J - 2 * V\n\n      var nx = r.redSqr().redISub(j).redISub(v).redISub(v); // Y3 = r * (V - X3) - 2 * Y1 * J\n\n      var ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2)); // Z3 = 2 * Z1 * H\n\n      var nz = this.z.redMul(h).redIMuln(2);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      // P = O\n      if (this.isInfinity()) return this; // Y1 = 0\n\n      if (this.y.isZero()) return this.curve.jpoint(); // a = 0\n\n      if (this.curve.zeroA) return this._dbl0(); // a = -3\n\n      if (this.curve.threeA) return this._dbl3();\n      return this._dblJ();\n    }\n  }, {\n    key: \"_dblJ\",\n    value: function _dblJ() {\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n      // 3M + 6S + 4A + 1*a + 2*2 + 1*3 + 1*4 + 1*8\n      // (implemented as: 3M + 6S + 5A + 1*a + 1*2 + 1*3 + 1*4 + 1*8)\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // ZZ = Z1^2\n\n      var zz = this.z.redSqr(); // S = 4 * X1 * YY\n\n      var s = this.x.redMul(yy).redIMuln(4); // M = 3 * XX + a * ZZ^2\n\n      var m = xx.redIMuln(3).redIAdd(this.curve.a.redMul(zz.redSqr())); // T = M^2 - 2 * S\n\n      var t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n      var nx = t; // Y3 = M * (S - T) - 8 * YY^2\n\n      var ny = m.redMul(s.redISub(t)).redISub(yy.redSqr().redIMuln(8)); // Z3 = 2 * Y1 * Z1\n\n      var nz = this.y.redMul(this.z).redIMuln(2);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"_dbl0\",\n    value: function _dbl0() {\n      // Assumes a = 0.\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l\n      // 2M + 5S + 6A + 3*2 + 1*3 + 1*8\n      // (implemented as: 2M + 5S + 7A + 2*2 + 1*3 + 1*8)\n      // A = X1^2\n      var a = this.x.redSqr(); // B = Y1^2\n\n      var b = this.y.redSqr(); // C = B^2\n\n      var c = b.redSqr(); // + XB2 = (X1 + B)^2\n\n      var xb2 = b.redIAdd(this.x).redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n      var d = xb2.redISub(a).redISub(c).redIMuln(2); // E = 3 * A\n\n      var e = a.redIMuln(3); // F = E^2\n\n      var f = e.redSqr(); // X3 = F - 2 * D\n\n      var nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n      var ny = e.redMul(d.redISub(nx)).redISub(c.redIMuln(8)); // Z3 = 2 * Y1 * Z1\n\n      var nz = this.y.redMul(this.z).redIMuln(2);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"_dbl3\",\n    value: function _dbl3() {\n      // Assumes a = -3.\n      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n      // 3M + 5S + 8A + 1*3 + 1*4 + 2*8\n      // (implemented as: 3M + 5S + 8A + 1*2 + 1*3 + 1*4 + 1*8)\n      // delta = Z1^2\n      var delta = this.z.redSqr(); // gamma = Y1^2\n\n      var gamma = this.y.redSqr(); // beta = X1 * gamma\n\n      var beta = this.x.redMul(gamma); // + xmdelta = X1 - delta\n\n      var xmdelta = this.x.redSub(delta); // + xpdelta = X1 + delta\n\n      var xpdelta = this.x.redAdd(delta); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n      var alpha = xmdelta.redMul(xpdelta).redIMuln(3); // + beta4 = 4 * beta\n\n      var beta4 = beta.redIMuln(4); // + beta8 = 2 * beta4\n\n      var beta8 = beta4.redMuln(2); // + gamma28 = 8 * gamma^2\n\n      var gamma28 = gamma.redSqr().redIMuln(8); // X3 = alpha^2 - 8 * beta\n\n      var nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n      var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n      var ny = alpha.redMul(beta4.redISub(nx)).redISub(gamma28);\n      return this.curve.jpoint(nx, ny, nz);\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      if (this.isInfinity()) throw new Error('Invalid point.');\n      this.normalize();\n      return this.x.fromRed();\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      if (this.isInfinity()) throw new Error('Invalid point.');\n      this.normalize();\n      return this.y.fromRed();\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(p) {\n      assert(p instanceof JPoint); // P = Q\n\n      if (this === p) return true; // P = O\n\n      if (this.isInfinity()) return p.isInfinity(); // Q = O\n\n      if (p.isInfinity()) return false; // Z1 = Z2\n\n      if (this.z.eq(p.z)) {\n        return this.x.eq(p.x) && this.y.eq(p.y);\n      } // X1 * Z2^2 = X2 * Z1^2\n\n\n      var zz1 = this.z.redSqr();\n      var zz2 = p.z.redSqr();\n      var x1 = this.x.redMul(zz2);\n      var x2 = p.x.redMul(zz1);\n      if (!x1.eq(x2)) return false; // Y1 * Z2^3 = Y2 * Z1^3\n\n      var zzz1 = zz1.redMul(this.z);\n      var zzz2 = zz2.redMul(p.z);\n      var y1 = this.y.redMul(zzz2);\n      var y2 = p.y.redMul(zzz1);\n      return y1.eq(y2);\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      assert(point instanceof JPoint);\n      var inf1 = this.isInfinity();\n      var inf2 = point.isInfinity();\n      if (inf1 && !inf2) return -1;\n      if (!inf1 && inf2) return 1;\n      if (inf1 && inf2) return 0;\n      return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      // Z1 = 0\n      return this.z.isZero();\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      if (this.isInfinity()) return false;\n      return this.y.isZero();\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      if (this.isInfinity()) return false;\n      this.normalize();\n      return this.y.redIsOdd();\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      if (this.isInfinity()) return false;\n      this.normalize();\n      return this.y.redIsEven();\n    }\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      if (this.isInfinity()) return false;\n      return this.y.redMul(this.z).redJacobi() !== -1;\n    }\n  }, {\n    key: \"eqX\",\n    value: function eqX(x) {\n      // Verify that integer `x` is equal to field\n      // element `x` by scaling it by our z coordinate.\n      // This optimization is mentioned in and used for\n      // bip-schnorr[1]. This avoids having to affinize\n      // the resulting point during verification.\n      //\n      // [1] [SCHNORR] \"Optimizations\".\n      assert(x instanceof BN);\n      assert(!x.red);\n      if (this.isInfinity()) return false;\n      var zz = this.z.redSqr();\n      var rx = x.toRed(this.curve.red).redMul(zz);\n      return this.x.eq(rx);\n    }\n  }, {\n    key: \"eqR\",\n    value: function eqR(x) {\n      // Similar to the optimization above, this\n      // optimization, suggested by Maxwell[1],\n      // compares an integer to an X coordinate\n      // by scaling it.\n      //\n      // Since a signature's R value is modulo N\n      // in ECDSA, we may be dealing with an R\n      // value greater than N in actuality.\n      //\n      // If the equality check fails, we can\n      // scale N itself by Z and add it to the\n      // X field element.\n      //\n      // [1] https://github.com/bitcoin-core/secp256k1/commit/ce7eb6f\n      assert(x instanceof BN);\n      assert(!x.red);\n      if (!this.curve.smallGap) return this.toP().eqR(x);\n      if (this.isInfinity()) return false;\n      if (x.cmp(this.curve.p) >= 0) return false;\n      var zz = this.z.redSqr();\n      var rx = x.toRed(this.curve.red).redMul(zz);\n      if (this.x.eq(rx)) return true;\n      if (this.curve.highOrder) return false;\n      if (x.cmp(this.curve.pmodn) >= 0) return false;\n      var rn = this.curve.redN.redMul(zz);\n      rx.redIAdd(rn);\n      return this.x.eq(rx);\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      // P = O\n      if (this.isInfinity()) return this.curve.point();\n      this.normalize(); // (X3, Y3) = (X1 / Z1^2, Y1 / Z1^3)\n\n      return this.curve.point(this.x, this.y);\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      return this;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(compact) {\n      return this.toP().encode(compact);\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX() {\n      return this.toP().encodeX();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      return this.toP().toJSON(pre);\n    }\n  }, {\n    key: \"toPretty\",\n    value: function toPretty() {\n      return this.toP().toPretty();\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      if (this.isInfinity()) return '<JPoint: Infinity>';\n      return '<JPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes) {\n      return ShortPoint.decode(curve, bytes).toJ();\n    }\n  }, {\n    key: \"decodeEven\",\n    value: function decodeEven(curve, bytes) {\n      return ShortPoint.decodeEven(curve, bytes).toJ();\n    }\n  }, {\n    key: \"decodeSquare\",\n    value: function decodeSquare(curve, bytes) {\n      return ShortPoint.decodeSquare(curve, bytes).toJ();\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      return ShortPoint.fromJSON(curve, json).toJ();\n    }\n  }]);\n\n  return JPoint;\n}(Point);\n/**\n * MontCurve\n */\n\n\nvar MontCurve = /*#__PURE__*/function (_Curve2) {\n  _inherits(MontCurve, _Curve2);\n\n  var _super4 = _createSuper(MontCurve);\n\n  function MontCurve(conf) {\n    var _this6;\n\n    _classCallCheck(this, MontCurve);\n\n    _this6 = _super4.call(this, MontPoint, 'mont', conf);\n    _this6.a = BN.fromJSON(conf.a).toRed(_this6.red);\n    _this6.b = BN.fromJSON(conf.b).toRed(_this6.red);\n    _this6.bi = _this6.b.redInvert();\n    _this6.a2 = _this6.a.redAdd(_this6.two);\n    _this6.a24 = _this6.a2.redMul(_this6.i4);\n    _this6.a3 = _this6.a.redMul(_this6.i3);\n    _this6.a0 = _this6.a.redMul(_this6.bi);\n    _this6.b0 = _this6.bi.redSqr();\n\n    _this6._finalize(conf);\n\n    return _this6;\n  }\n\n  _createClass(MontCurve, [{\n    key: \"_short\",\n    value: function _short(a0, odd) {\n      // Montgomery->Short Weierstrass Equivalence.\n      //\n      // [MONT2] \"Equivalence with Weierstrass curves\".\n      //\n      // Transformation:\n      //\n      //   a = (3 - A^2) / (3 * B^2)\n      //   b = (2 * A^3 - 9 * A) / (27 * B^3)\n      var a = this.a,\n          b = this.b,\n          three = this.three;\n      var a2 = a.redSqr();\n      var a3 = a2.redMul(a);\n      var b2 = b.redSqr();\n      var b3 = b2.redMul(b);\n      var n0 = three.redSub(a2);\n      var d0 = b2.redMuln(3);\n      var n1 = a3.redMuln(2).redISub(a.redMuln(9));\n      var d1 = b3.redMuln(27);\n      var wa = n0.redDiv(d0);\n      var wb = n1.redDiv(d1);\n      if (a0 != null) return ShortCurve._isomorphism(wa, wb, a0, odd);\n      return [wa, wb];\n    }\n  }, {\n    key: \"_mont\",\n    value: function _mont(b0) {\n      return MontCurve._isomorphism(this.a, this.b, b0);\n    }\n  }, {\n    key: \"_edwards\",\n    value: function _edwards(a0) {\n      var invert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Montgomery->Twisted Edwards Transformation.\n      //\n      // [MONT1] Page 11, Section 4.3.5.\n      // [TWISTED] Theorem 3.2, Page 4, Section 3.\n      //\n      // Equivalence:\n      //\n      //   a = (A + 2) / B\n      //   d = (A - 2) / B\n      //\n      // Isomorphism:\n      //\n      //   a = a'\n      //   d = a' * (A - 2) / (A + 2)\n      //\n      // Where ((A + 2) / (B * a')) is square.\n      //\n      // If `d` is square, we can usually find\n      // a complete curve by using the `invert`\n      // option. This will create an isomorphism\n      // chain of: M(A,B)->E(a,d)->E(d,a).\n      //\n      // The equivalence between E(a,d) and\n      // E(d,a) is:\n      //\n      //   (x, y) = (x, 1 / y)\n      //\n      // Meaning our map to E(d,a) is:\n      //\n      //   x = u / v\n      //   y = 1 / ((u - 1) / (u + 1))\n      //     = (u + 1) / (u - 1)\n      assert(typeof invert === 'boolean');\n      var two = this.two,\n          bi = this.bi;\n      var a = this.a.redAdd(two).redMul(bi);\n      var d = this.a.redSub(two).redMul(bi);\n      if (invert) a.swap(d);\n      if (a0 != null) return EdwardsCurve._isomorphism(a, d, a0);\n      return [a, d];\n    }\n  }, {\n    key: \"_scaleShort\",\n    value: function _scaleShort(curve) {\n      assert(curve instanceof ShortCurve);\n\n      var _curve$_scale3 = curve._scale(this),\n          _curve$_scale4 = _slicedToArray(_curve$_scale3, 2),\n          u2 = _curve$_scale4[0],\n          u3 = _curve$_scale4[1];\n\n      return [this.field(u2.redInvert()), this.field(u3.redInvert())];\n    }\n  }, {\n    key: \"_scaleMont\",\n    value: function _scaleMont(curve) {\n      // We can extract the isomorphism factor with:\n      //\n      //   c = +-sqrt(B / B')\n      //\n      // If base points are available, we can do:\n      //\n      //   c = v' / v\n      assert(curve instanceof MontCurve);\n      if (this.g.isInfinity() || curve.g.isInfinity()) return this.field(curve.b).redDivSqrt(this.b);\n      return this.g.y.redDiv(this.field(curve.g.y));\n    }\n  }, {\n    key: \"_scaleEdwards\",\n    value: function _scaleEdwards(curve, invert) {\n      // We _could_ do something like:\n      //\n      //   B = 4 / (a - d)\n      //   c = +-sqrt(B / B')\n      //\n      // Which can be reduced to:\n      //\n      //   c = +-sqrt(4 / ((a - d) * B'))\n      //\n      // If base points are available:\n      //\n      //   v = u' / x\n      //   c = v' / v\n      //\n      // Which can be reduced to:\n      //\n      //   c = v' * x / u'\n      //\n      // However, the way our maps are\n      // written, we can re-use the Edwards\n      // isomorphism factor when going the\n      // other direction.\n      assert(curve instanceof EdwardsCurve);\n\n      var c = curve._scale(this, invert);\n\n      return this.field(c);\n    }\n  }, {\n    key: \"_solveY0\",\n    value: function _solveY0(x) {\n      assert(x instanceof BN); // y^2 = x^3 + A * x^2 + B * x\n\n      var a = this.a0;\n      var b = this.b0;\n      var x2 = x.redSqr();\n      var x3 = x2.redMul(x);\n      var y2 = x3.redIAdd(a.redMul(x2)).redIAdd(b.redMul(x));\n      return y2;\n    }\n  }, {\n    key: \"_elligator2\",\n    value: function _elligator2(u) {\n      // Elligator 2.\n      //\n      // Distribution: 1/2.\n      //\n      // [ELL2] Page 11, Section 5.2.\n      // [H2EC] \"Elligator 2 Method\".\n      //        \"Mappings for Montgomery curves\".\n      // [SAFE] \"Indistinguishability from uniform random strings\".\n      //\n      // Assumptions:\n      //\n      //   - y^2 = x^3 + A * x^2 + B * x.\n      //   - A != 0, B != 0.\n      //   - A^2 - 4 * B is non-zero and non-square in F(p).\n      //   - Let z be a non-square in F(p).\n      //   - u != +-sqrt(-1 / z).\n      //\n      // Note that Elligator 2 is defined over the form:\n      //\n      //   y'^2 = x'^3 + A' * x'^2 + B' * x'\n      //\n      // Instead of:\n      //\n      //   B * y^2 = x^3 + A * x^2 + x\n      //\n      // Where:\n      //\n      //   A' = A / B\n      //   B' = 1 / B^2\n      //   x' = x / B\n      //   y' = y / B\n      //\n      // And:\n      //\n      //   x = B * x'\n      //   y = B * y'\n      //\n      // This is presumably the result of Elligator 2\n      // being designed in long Weierstrass form. If\n      // we want to support B != 1, we need to do the\n      // conversion.\n      //\n      // Map:\n      //\n      //   g(x) = x^3 + A * x^2 + B * x\n      //   x1 = -A / (1 + z * u^2)\n      //   x1 = -A, if x1 = 0\n      //   x2 = -x1 - A\n      //   x = x1, if g(x1) is square\n      //     = x2, otherwise\n      //   y = sign(u) * abs(sqrt(g(x)))\n      var lhs = this.a0.redNeg();\n      var rhs = this.one.redAdd(this.z.redMul(u.redSqr()));\n      if (rhs.isZero()) rhs.inject(this.one);\n      var x1 = lhs.redMul(rhs.redInvert());\n      var x2 = x1.redNeg().redISub(this.a0);\n\n      var y1 = this._solveY0(x1);\n\n      var y2 = this._solveY0(x2);\n\n      var alpha = y1.redIsSquare() | 0;\n      var x0 = [x1, x2][alpha ^ 1];\n      var y0 = [y1, y2][alpha ^ 1].redSqrt();\n      if (y0.redIsOdd() !== u.redIsOdd()) y0.redINeg();\n      var x = this.b.redMul(x0);\n      var y = this.b.redMul(y0);\n      return this.point(x, y);\n    }\n  }, {\n    key: \"_invert2\",\n    value: function _invert2(p, hint) {\n      // Inverting the Map (Elligator 2).\n      //\n      // [ELL2] Page 12, Section 5.3.\n      //\n      // Assumptions:\n      //\n      //   - -z * x * (x + A) is square in F(p).\n      //   - If r = 1 then x != 0.\n      //   - If r = 2 then x != -A.\n      //\n      // Map:\n      //\n      //   u1 = -(x + A) / (x * z)\n      //   u2 = -x / ((x + A) * z)\n      //   r = random integer in [1,2]\n      //   u = sign(y) * abs(sqrt(ur))\n      //\n      // Note that `0 / 0` can only occur if A = 0\n      // (this violates the assumptions of Elligator 2).\n      var x = p.x,\n          y = p.y;\n      var r = hint & 1;\n      var x0 = x.redMul(this.bi);\n      var y0 = y.redMul(this.bi);\n      var n = x0.redAdd(this.a0);\n      var d = x0;\n      var lhs = [n, d][r].redINeg();\n      var rhs = [d, n][r].redMul(this.z);\n      var u = lhs.redDivSqrt(rhs);\n      if (u.redIsOdd() !== y0.redIsOdd()) u.redINeg();\n      return u;\n    }\n  }, {\n    key: \"isElliptic\",\n    value: function isElliptic() {\n      var a2 = this.a.redSqr();\n      var d = this.b.redMul(a2.redSub(this.four)); // B * (A^2 - 4) != 0\n\n      return !d.isZero();\n    }\n  }, {\n    key: \"jinv\",\n    value: function jinv() {\n      // [MONT3] Page 3, Section 2.\n      var a = this.a,\n          three = this.three,\n          four = this.four;\n      var a2 = a.redSqr();\n      var t0 = a2.redSub(three);\n      var lhs = t0.redPown(3).redIMuln(256);\n      var rhs = a2.redSub(four);\n      if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // (256 * (A^2 - 3)^3) / (A^2 - 4)\n\n      return lhs.redDiv(rhs).fromRed();\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      return new MontPoint(this, x, y);\n    }\n  }, {\n    key: \"jpoint\",\n    value: function jpoint(x, y, z) {\n      assert(x == null && y == null && z == null);\n      return this.point();\n    }\n  }, {\n    key: \"xpoint\",\n    value: function xpoint(x, z) {\n      return new XPoint(this, x, z);\n    }\n  }, {\n    key: \"solveY2\",\n    value: function solveY2(x) {\n      // [MONT3] Page 3, Section 2.\n      // https://hyperelliptic.org/EFD/g1p/auto-montgom.html\n      assert(x instanceof BN); // B * y^2 = x^3 + A * x^2 + x\n\n      var x2 = x.redSqr();\n      var x3 = x2.redMul(x);\n      var by2 = x3.redIAdd(this.a.redMul(x2)).redIAdd(x);\n      var y2 = by2.redMul(this.bi);\n      return y2;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(point) {\n      assert(point instanceof MontPoint);\n      if (point.isInfinity()) return true;\n      var x = point.x,\n          y = point.y;\n      var y2 = this.solveY2(x);\n      return y.redSqr().eq(y2);\n    }\n  }, {\n    key: \"pointFromX\",\n    value: function pointFromX(x) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      assert(x instanceof BN);\n      assert(sign == null || typeof sign === 'boolean');\n      if (!x.red) x = x.toRed(this.red);\n      var y = this.solveY(x);\n\n      if (sign != null) {\n        if (y.isZero() && sign) throw new Error('Invalid point.');\n        if (y.redIsOdd() !== sign) y.redINeg();\n      }\n\n      return this.point(x, y);\n    }\n  }, {\n    key: \"isIsomorphic\",\n    value: function isIsomorphic(curve, invert) {\n      // [MONT3] Page 3, Section 2.1.\n      assert(curve instanceof Curve);\n      if (!curve.p.eq(this.p)) return false; // M(A,B) <-> M(A,B')\n\n      if (curve.type === 'mont') {\n        var a = this.field(curve.a);\n        var b = this.field(curve.b); // A' = A\n\n        if (!this.a.eq(a)) return false; // B' != 0\n\n        if (this.b.isZero()) return false; // jacobi(B / B') = 1\n\n        var c = b.redDiv(this.b);\n        return c.redJacobi() === 1;\n      }\n\n      return curve.isIsomorphic(this, invert);\n    }\n  }, {\n    key: \"isIsogenous\",\n    value: function isIsogenous(curve) {\n      assert(curve instanceof Curve);\n      if (curve.type === 'mont') return false;\n      return curve.isIsogenous(this);\n    }\n  }, {\n    key: \"pointFromShort\",\n    value: function pointFromShort(point) {\n      // [ALT] Appendix E.2 (Switching between Alternative Representations).\n      // [MONT2] \"Equivalence with Weierstrass curves\"\n      assert(point instanceof ShortPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Equivalence for E(a,b)->M(A,B):\n        //\n        //   u = B * x - A / 3\n        //   v = B * y\n        //\n        // Undefined if ((u^3 + A * u^2 + u) / B) is not square.\n        if (point.isInfinity()) return this.point();\n        var a3 = this.a3,\n            b = this.b;\n\n        var _this$_scale13 = this._scale(point.curve),\n            _this$_scale14 = _slicedToArray(_this$_scale13, 2),\n            u2 = _this$_scale14[0],\n            u3 = _this$_scale14[1];\n\n        var x = this.field(point.x).redMul(u2);\n        var y = this.field(point.y).redMul(u3);\n        var u = b.redMul(x).redISub(a3);\n        var v = b.redMul(y);\n        return this.point(u, v);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromMont\",\n    value: function pointFromMont(point) {\n      // [MONT3] Page 3, Section 2.1.\n      assert(point instanceof MontPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Isomorphic maps for M(A,B)<->M(A,B'):\n        //\n        //   u' = u\n        //   v' = +-sqrt(B / B') * v\n        //\n        // Undefined if (B / B') is not square.\n        if (point.isInfinity()) return this.point();\n\n        var c = this._scale(point.curve);\n\n        var u = this.field(point.x);\n        var v = this.field(point.y);\n        var nu = u;\n        var nv = c.redMul(v);\n        return this.point(nu, nv);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromEdwards\",\n    value: function pointFromEdwards(point) {\n      // [RFC7748] Section 4.1 & 4.2.\n      // [MONT3] Page 6, Section 2.5.\n      // [TWISTED] Theorem 3.2, Page 4, Section 3.\n      assert(point instanceof EdwardsPoint);\n      assert(point.curve.p.eq(this.p)); // Edwards `x`, `y`, `z`.\n\n      var x = this.field(point.x);\n      var y = this.field(point.y);\n      var z = this.field(point.z);\n\n      if (this.isIsogenous(point.curve)) {\n        // 4-isogeny maps for E(1,d)->M(2-4d,1):\n        //\n        //   u = y^2 / x^2\n        //   v = (2 - x^2 - y^2) * y / x^3\n        //\n        // Undefined for x = 0.\n        //\n        // Exceptional Cases:\n        //   - (0, 1) -> O\n        //   - (0, -1) -> (0, 0)\n        //\n        // Unexceptional Cases:\n        //   - (+-1, 0) -> (0, 0)\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point(this.zero, this.zero);\n        var c = z.redSqr().redIMuln(2);\n        var uu = y.redSqr();\n        var uz = x.redSqr();\n        var vv = c.redISub(uz).redISub(uu).redMul(y);\n        var vz = uz.redMul(x);\n        return this.cpoint(uu, uz, vv, vz);\n      }\n\n      if (this.isIsomorphic(point.curve, true)) {\n        // Isomorphic maps for E(d,a)->M(A,B):\n        //\n        //   u = (y + 1) / (y - 1)\n        //   v = +-sqrt((A - 2) / (B * a)) * u / x\n        //\n        // Undefined for x = 0 or y = 1.\n        //\n        // Exceptional Cases:\n        //   - (0, 1) -> O\n        //   - (0, -1) -> (0, 0)\n        //\n        // Unexceptional Cases:\n        //   - (+-sqrt(1 / a), 0) -> (-1, +-sqrt((A - 2) / B))\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point(this.zero, this.zero);\n\n        var _c = this._scale(point.curve, true);\n\n        var _uu = y.redAdd(z);\n\n        var _uz = y.redSub(z);\n\n        var _vv = _c.redMul(z).redMul(_uu);\n\n        var _vz = x.redMul(_uz);\n\n        return this.cpoint(_uu, _uz, _vv, _vz);\n      }\n\n      if (this.isIsomorphic(point.curve, false)) {\n        // Isomorphic maps for E(a,d)->M(A,B):\n        //\n        //   u = (1 + y) / (1 - y)\n        //   v = +-sqrt((A + 2) / (B * a)) * u / x\n        //\n        // Undefined for x = 0 or y = 1.\n        //\n        // Exceptional Cases:\n        //   - (0, 1) -> O\n        //   - (0, -1) -> (0, 0)\n        //\n        // Unexceptional Cases:\n        //   - (+-sqrt(1 / a), 0) -> (1, +-sqrt((A + 2) / B))\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point(this.zero, this.zero);\n\n        var _c2 = this._scale(point.curve, false);\n\n        var _uu2 = z.redAdd(y);\n\n        var _uz2 = z.redSub(y);\n\n        var _vv2 = _c2.redMul(z).redMul(_uu2);\n\n        var _vz2 = x.redMul(_uz2);\n\n        return this.cpoint(_uu2, _uz2, _vv2, _vz2);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromUniform\",\n    value: function pointFromUniform(u) {\n      assert(u instanceof BN); // z = 0 or A = 0\n\n      if (this.z.isZero() || this.a.isZero()) throw new Error('Not implemented.');\n      return this._elligator2(u);\n    }\n  }, {\n    key: \"pointToUniform\",\n    value: function pointToUniform(p, hint) {\n      var _this7 = this;\n\n      // Convert a montgomery point to a field\n      // element by inverting the elligator2 map.\n      //\n      // Hint Layout:\n      //\n      //   [00000000] [0000] [0000]\n      //        |        |      |\n      //        |        |      +-- preimage index\n      //        |        +--- subgroup\n      //        +-- bits to OR with uniform bytes\n      assert(p instanceof MontPoint);\n      assert(hint >>> 0 === hint); // z = 0 or A = 0\n\n      if (this.z.isZero() || this.a.isZero()) throw new Error('Not implemented.'); // P = O\n\n      if (p.isInfinity()) throw new Error('Invalid point.'); // Add a random torsion component.\n\n      var i = (hint >>> 4 & 15) % this.torsion.length;\n      var q = p.add(this.torsion[i]);\n      return wrapErrors(function () {\n        return _this7._invert2(q, hint);\n      });\n    }\n  }, {\n    key: \"decodePoint\",\n    value: function decodePoint(bytes, sign) {\n      return MontPoint.decode(this, bytes, sign);\n    }\n  }, {\n    key: \"encodeX\",\n    value: function encodeX(point) {\n      assert(point instanceof XPoint);\n      return point.encode();\n    }\n  }, {\n    key: \"decodeX\",\n    value: function decodeX(bytes) {\n      return XPoint.decode(this, bytes);\n    }\n  }, {\n    key: \"toShort\",\n    value: function toShort(a0, odd) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_short3 = this._short(a0, odd),\n          _this$_short4 = _slicedToArray(_this$_short3, 2),\n          a = _this$_short4[0],\n          b = _this$_short4[1];\n\n      var curve = new ShortCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h\n      });\n\n      if (sign != null) {\n        var _curve$_scale5 = curve._scale(this),\n            _curve$_scale6 = _slicedToArray(_curve$_scale5, 2),\n            u3 = _curve$_scale6[1];\n\n        if (u3.redIsOdd() !== sign) u3.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromMont(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toMont\",\n    value: function toMont(b0) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var _this$_mont3 = this._mont(b0),\n          _this$_mont4 = _slicedToArray(_this$_mont3, 2),\n          a = _this$_mont4[0],\n          b = _this$_mont4[1];\n\n      var curve = new MontCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h,\n        z: this.z\n      });\n\n      if (sign != null) {\n        var c = curve._scale(this);\n\n        if (c.redIsOdd() !== sign) c.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromMont(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toEdwards\",\n    value: function toEdwards(a0, invert) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_edwards3 = this._edwards(a0, invert),\n          _this$_edwards4 = _slicedToArray(_this$_edwards3, 2),\n          a = _this$_edwards4[0],\n          d = _this$_edwards4[1];\n\n      var curve = new EdwardsCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        d: d,\n        n: this.n,\n        h: this.h,\n        z: this.z\n      });\n\n      if (sign != null) {\n        var c = curve._scale(this, invert);\n\n        if (c.redIsOdd() !== sign) c.redINeg();\n      }\n\n      if (!this.g.isInfinity()) {\n        curve.g = curve.pointFromMont(this.g);\n        curve.g.normalize();\n      }\n\n      if (curve.isComplete()) {\n        for (var i = 0; i < this.h.word(0); i++) {\n          curve.torsion[i] = curve.pointFromMont(this.torsion[i]);\n          curve.torsion[i].normalize();\n        }\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"pointFromJSON\",\n    value: function pointFromJSON(json) {\n      return MontPoint.fromJSON(this, json);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      var json = _get(_getPrototypeOf(MontCurve.prototype), \"toJSON\", this).call(this, pre);\n\n      json.a = this.a.fromRed().toJSON();\n      json.b = this.b.fromRed().toJSON();\n      return json;\n    }\n  }], [{\n    key: \"_isomorphism\",\n    value: function _isomorphism(curveA, curveB, customB) {\n      // Montgomery Isomorphism.\n      //\n      // [MONT3] Page 3, Section 2.1.\n      //\n      // Transformation:\n      //\n      //   A' = A\n      //   B' = B'\n      //\n      // Where (B / B') is square.\n      assert(curveA instanceof BN);\n      assert(curveB instanceof BN);\n      assert(customB instanceof BN);\n      var a = curveA.clone();\n      var b = customB.clone();\n      var c = curveB.redDiv(customB);\n      if (c.redJacobi() !== 1) throw new Error('Invalid `b` coefficient.');\n      return [a, b];\n    }\n  }]);\n\n  return MontCurve;\n}(Curve);\n/**\n * MontPoint\n */\n\n\nvar MontPoint = /*#__PURE__*/function (_Point3) {\n  _inherits(MontPoint, _Point3);\n\n  var _super5 = _createSuper(MontPoint);\n\n  function MontPoint(curve, x, y) {\n    var _this8;\n\n    _classCallCheck(this, MontPoint);\n\n    assert(curve instanceof MontCurve);\n    _this8 = _super5.call(this, curve, types.AFFINE);\n    _this8.x = _this8.curve.zero;\n    _this8.y = _this8.curve.zero;\n    _this8.inf = true;\n    if (x != null) _this8._init(x, y);\n    return _this8;\n  }\n\n  _createClass(MontPoint, [{\n    key: \"_init\",\n    value: function _init(x, y) {\n      assert(x instanceof BN);\n      assert(y instanceof BN);\n      this.x = x;\n      this.y = y;\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      if (this.inf) return this.curve.point();\n      return this.curve.point(this.x, this.y);\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      return this.clone();\n    }\n  }, {\n    key: \"randomize\",\n    value: function randomize(rng) {\n      return this.clone();\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      // P = O\n      if (this.inf) return this; // -(X1, Y1) = (X1, -Y1)\n\n      return this.curve.point(this.x, this.y.redNeg());\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      // [MONT1] Page 8, Section 4.3.2.\n      //\n      // Addition Law:\n      //\n      //   l = (y2 - y1) / (x2 - x1)\n      //   x3 = b * l^2 - a - x1 - x2\n      //   y3 = l * (x1 - x3) - y1\n      //\n      // 1I + 2M + 1S + 7A + 1*b\n      assert(p instanceof MontPoint); // O + P = P\n\n      if (this.inf) return p; // P + O = P\n\n      if (p.inf) return this; // P + P, P + -P\n\n      if (this.x.eq(p.x)) {\n        // P + -P = O\n        if (!this.y.eq(p.y)) return this.curve.point(); // P + P = 2P\n\n        return this.dbl();\n      } // H = X2 - X1\n\n\n      var h = p.x.redSub(this.x); // R = Y2 - Y1\n\n      var r = p.y.redSub(this.y); // L = R / H\n\n      var l = r.redDiv(h); // K = b * L^2\n\n      var k = this.curve.b.redMul(l.redSqr()); // X3 = K - a - X1 - X2\n\n      var nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x); // Y3 = L * (X1 - X3) - Y1\n\n      var ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      // [MONT1] Page 8, Section 4.3.2.\n      //\n      // Addition Law (doubling):\n      //\n      //   l = (3 * x1^2 + 2 * a * x1 + 1) / (2 * b * y1)\n      //   x3 = b * l^2 - a - 2 * x1\n      //   y3 = l * (x1 - x3) - y1\n      //\n      // 1I + 3M + 2S + 7A + 1*a + 1*b + 1*b + 2*2 + 1*3\n      // P = O\n      if (this.inf) return this; // Y1 = 0\n\n      if (this.y.isZero()) return this.curve.point(); // M1 = 3 * X1^2\n\n      var m1 = this.x.redSqr().redIMuln(3); // M2 = 2 * a * X1\n\n      var m2 = this.curve.a.redMul(this.x).redIMuln(2); // M = M1 + M2 + 1\n\n      var m = m1.redIAdd(m2).redIAdd(this.curve.one); // Z = 2 * b * Y1\n\n      var z = this.curve.b.redMul(this.y).redIMuln(2); // L = M / Z\n\n      var l = m.redDiv(z); // K = b * L^2\n\n      var k = this.curve.b.redMul(l.redSqr()); // X3 = K - a - 2 * X1\n\n      var nx = k.redISub(this.curve.a).redISub(this.x).redISub(this.x); // Y3 = L * (X1 - X3) - Y1\n\n      var ny = l.redMul(this.x.redSub(nx)).redISub(this.y);\n      return this.curve.point(nx, ny);\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      if (this.inf) throw new Error('Invalid point.');\n      return this.x.fromRed();\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      if (this.inf) throw new Error('Invalid point.');\n      return this.y.fromRed();\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(p) {\n      assert(p instanceof MontPoint); // P = Q\n\n      if (this === p) return true; // P = O\n\n      if (this.inf) return p.inf; // Q = O\n\n      if (p.inf) return false; // X1 = X2, Y1 = Y2\n\n      return this.x.eq(p.x) && this.y.eq(p.y);\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      assert(point instanceof MontPoint);\n      if (this.inf && !point.inf) return -1;\n      if (!this.inf && point.inf) return 1;\n      if (this.inf && point.inf) return 0;\n      return this.order().cmp(point.order()) || this.getX().cmp(point.getX()) || this.getY().cmp(point.getY());\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      // Infinity cannot be represented in\n      // the affine space, except by a flag.\n      return this.inf;\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      if (this.inf) return false;\n      return this.y.isZero();\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      if (this.inf) return false;\n      return this.y.redIsOdd();\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      if (this.inf) return false;\n      return this.y.redIsEven();\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      return this;\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      return this;\n    }\n  }, {\n    key: \"toX\",\n    value: function toX() {\n      // (X3, Z3) = (1, 0)\n      if (this.inf) return this.curve.xpoint(); // (X3, Z3) = (X1, 1)\n\n      return this.curve.xpoint(this.x, this.curve.one);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      return this.toX().encode();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      if (this.inf) return [];\n      var x = this.getX().toJSON();\n      var y = this.getY().toJSON();\n      return [x, y];\n    }\n  }, {\n    key: \"toPretty\",\n    value: function toPretty() {\n      if (this.inf) return [];\n      var size = this.curve.fieldSize * 2;\n\n      var x = _toPretty(this.getX(), size);\n\n      var y = _toPretty(this.getY(), size);\n\n      return [x, y];\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      if (this.inf) return '<MontPoint: Infinity>';\n      return '<MontPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + '>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes, sign) {\n      assert(curve instanceof MontCurve);\n      return curve.decodeX(bytes).toP(sign);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      assert(curve instanceof MontCurve);\n      assert(Array.isArray(json));\n      assert(json.length === 0 || json.length === 2 || json.length === 3);\n      if (json.length === 0) return curve.point();\n      var x = BN.fromJSON(json[0]);\n      var y = BN.fromJSON(json[1]);\n      return curve.point(x, y);\n    }\n  }]);\n\n  return MontPoint;\n}(Point);\n/**\n * XPoint\n */\n\n\nvar XPoint = /*#__PURE__*/function (_Point4) {\n  _inherits(XPoint, _Point4);\n\n  var _super6 = _createSuper(XPoint);\n\n  function XPoint(curve, x, z) {\n    var _this9;\n\n    _classCallCheck(this, XPoint);\n\n    assert(curve instanceof MontCurve);\n    _this9 = _super6.call(this, curve, types.PROJECTIVE);\n    _this9.x = _this9.curve.one;\n    _this9.z = _this9.curve.zero;\n    if (x != null) _this9._init(x, z);\n    return _this9;\n  }\n\n  _createClass(XPoint, [{\n    key: \"_init\",\n    value: function _init(x, z) {\n      assert(x instanceof BN);\n      assert(z == null || z instanceof BN);\n      this.x = x;\n      this.z = z || this.curve.one;\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return this.curve.xpoint(this.x, this.z);\n    }\n  }, {\n    key: \"precompute\",\n    value: function precompute(power, rng) {\n      // No-op.\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      if (this.isInfinity()) return true; // B * y^2 * z = x^3 + A * x^2 * z + x * z^2\n\n      var x = this.x,\n          z = this.z;\n      var x2 = x.redSqr();\n      var x3 = x2.redMul(x);\n      var z2 = z.redSqr();\n      var ax2 = this.curve.a.redMul(x2).redMul(z);\n      var by2 = x3.redIAdd(ax2).redIAdd(x.redMul(z2));\n      var y2 = by2.redMul(this.curve.bi); // sqrt(y^2 * z^4) = y * z^2\n\n      return y2.redMul(z).redJacobi() !== -1;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#scaling-scale\n      // 1I + 1M\n      // P = O\n      if (this.isInfinity()) return this; // Z1 = 1\n\n      if (this.z.eq(this.curve.one)) return this; // X3 = X1 / Z1\n\n      this.x = this.x.redDiv(this.z); // Z3 = 1\n\n      this.z = this.curve.one;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      assert(a instanceof BN); // P = O\n\n      if (this.isInfinity()) return this.curve.xpoint(); // X3 = X1 * A\n\n      var nx = this.x.redMul(a); // Y3 = Y1 * A\n\n      var nz = this.z.redMul(a);\n      return this.curve.xpoint(nx, nz);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      // -(X1, Z1) = (X1, Z1)\n      return this;\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n      // 2M + 2S + 4A + 1*a24\n      // A = X1 + Z1\n      var a = this.x.redAdd(this.z); // AA = A^2\n\n      var aa = a.redSqr(); // B = X1 - Z1\n\n      var b = this.x.redSub(this.z); // BB = B^2\n\n      var bb = b.redSqr(); // C = AA - BB\n\n      var c = aa.redSub(bb); // X3 = AA * BB\n\n      var nx = aa.redMul(bb); // Z3 = C * (BB + a24 * C)\n\n      var nz = c.redMul(bb.redIAdd(this.curve.a24.redMul(c)));\n      return this.curve.xpoint(nx, nz);\n    }\n  }, {\n    key: \"diffAddDbl\",\n    value: function diffAddDbl(p2, p3) {\n      // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#ladder-ladd-1987-m-3\n      // 6M + 4S + 8A + 1*a24\n      assert(p2 instanceof XPoint);\n      assert(p3 instanceof XPoint); // A = X2 + Z2\n\n      var a = p2.x.redAdd(p2.z); // AA = A^2\n\n      var aa = a.redSqr(); // B = X2 - Z2\n\n      var b = p2.x.redSub(p2.z); // BB = B^2\n\n      var bb = b.redSqr(); // E = AA - BB\n\n      var e = aa.redSub(bb); // C = X3 + Z3\n\n      var c = p3.x.redAdd(p3.z); // D = X3 - Z3\n\n      var d = p3.x.redSub(p3.z); // DA = D * A\n\n      var da = d.redMul(a); // CB = C * B\n\n      var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2\n\n      var x5 = this.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2\n\n      var z5 = this.x.redMul(da.redISub(cb).redSqr()); // X4 = AA * BB\n\n      var x4 = aa.redMul(bb); // Z4 = E * (BB + a24 * E)\n\n      var z4 = e.redMul(bb.redIAdd(this.curve.a24.redMul(e)));\n      return [this.curve.xpoint(x4, z4), this.curve.xpoint(x5, z5)];\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      if (this.isInfinity()) throw new Error('Invalid point.');\n      this.normalize();\n      return this.x.fromRed();\n    }\n  }, {\n    key: \"getY\",\n    value: function getY(sign) {\n      return this.toP(sign).getY();\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(p) {\n      assert(p instanceof XPoint); // P = Q\n\n      if (this === p) return true; // P = O\n\n      if (this.isInfinity()) return p.isInfinity(); // Q = O\n\n      if (p.isInfinity()) return false; // Z1 = Z2\n\n      if (this.z.eq(p.z)) return this.x.eq(p.x); // X1 * Z2 = X2 * Z1\n\n      var x1 = this.x.redMul(p.z);\n      var x2 = p.x.redMul(this.z);\n      return x1.eq(x2);\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      assert(point instanceof XPoint);\n      var inf1 = this.isInfinity();\n      var inf2 = point.isInfinity();\n      if (inf1 && !inf2) return -1;\n      if (!inf1 && inf2) return 1;\n      if (inf1 && inf2) return 0;\n      return this.order().cmp(point.order()) || this.getX().cmp(point.getX());\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      // Z1 = 0\n      return this.z.isZero();\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      if (this.isInfinity()) return false;\n      return this.x.isZero();\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      return false;\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      return false;\n    }\n  }, {\n    key: \"hasTorsion\",\n    value: function hasTorsion() {\n      if (this.isInfinity()) return false; // X1 = 0, Z1 != 0 (edge case)\n\n      if (this.x.isZero()) return true;\n      return _get(_getPrototypeOf(XPoint.prototype), \"hasTorsion\", this).call(this);\n    }\n  }, {\n    key: \"order\",\n    value: function order() {\n      try {\n        return this.toP().order();\n      } catch (e) {\n        return new BN(1);\n      }\n    }\n  }, {\n    key: \"jmul\",\n    value: function jmul(k) {\n      // Multiply with the Montgomery Ladder.\n      //\n      // [MONT3] Algorithm 4, Page 12, Section 4.2.\n      //\n      // Note that any clamping is meant to\n      // be done _outside_ of this function.\n      assert(k instanceof BN);\n      assert(!k.red);\n      var bits = k.bitLength();\n      var a = this.curve.xpoint();\n      var b = this;\n\n      for (var i = bits - 1; i >= 0; i--) {\n        var bit = k.bit(i);\n\n        if (bit === 0) {\n          var _this$diffAddDbl = this.diffAddDbl(a, b);\n\n          var _this$diffAddDbl2 = _slicedToArray(_this$diffAddDbl, 2);\n\n          a = _this$diffAddDbl2[0];\n          b = _this$diffAddDbl2[1];\n        } else {\n          var _this$diffAddDbl3 = this.diffAddDbl(b, a);\n\n          var _this$diffAddDbl4 = _slicedToArray(_this$diffAddDbl3, 2);\n\n          b = _this$diffAddDbl4[0];\n          a = _this$diffAddDbl4[1];\n        }\n      }\n\n      return a;\n    }\n  }, {\n    key: \"jmulBlind\",\n    value: function jmulBlind(k, rng) {\n      if (!rng) return this.jmul(k); // Randomize if available.\n\n      return this.randomize(rng).jmul(k);\n    }\n  }, {\n    key: \"jmulAdd\",\n    value: function jmulAdd(k1, p2, k2) {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      var sign = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      assert(sign == null || typeof sign === 'boolean');\n      if (this.isInfinity()) return this.curve.point();\n      this.normalize();\n      return this.curve.pointFromX(this.x, sign);\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      return this;\n    }\n  }, {\n    key: \"toX\",\n    value: function toX() {\n      return this;\n    }\n  }, {\n    key: \"key\",\n    value: function key() {\n      if (this.isInfinity()) return \"\".concat(this.curve.uid, \":oo\");\n      this.normalize();\n      var x = this.getX().toString(16);\n      return \"\".concat(this.curve.uid, \":\").concat(x);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      // [RFC7748] Section 5.\n      return this.curve.encodeField(this.getX());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      return this.toP().toJSON(pre);\n    }\n  }, {\n    key: \"toPretty\",\n    value: function toPretty() {\n      return this.toP().toPretty();\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      if (this.isInfinity()) return '<XPoint: Infinity>';\n      return '<XPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes) {\n      assert(curve instanceof MontCurve); // [RFC7748] Section 5.\n\n      var x = curve.decodeField(bytes); // We're supposed to ignore the hi bit\n      // on montgomery points... I think. If\n      // we don't, the X25519 test vectors\n      // break, which is pretty convincing\n      // evidence. This is a no-op for X448.\n\n      x.iumaskn(curve.fieldBits); // Note: montgomery points are meant to be\n      // reduced by the prime and do not have to\n      // be explicitly validated in order to do\n      // the montgomery ladder.\n\n      var p = curve.xpoint(x, curve.one);\n      assert(!p.isInfinity());\n      return p;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      return MontPoint.fromJSON(curve, json).toX();\n    }\n  }]);\n\n  return XPoint;\n}(Point);\n/**\n * EdwardsCurve\n */\n\n\nvar EdwardsCurve = /*#__PURE__*/function (_Curve3) {\n  _inherits(EdwardsCurve, _Curve3);\n\n  var _super7 = _createSuper(EdwardsCurve);\n\n  function EdwardsCurve(conf) {\n    var _this10;\n\n    _classCallCheck(this, EdwardsCurve);\n\n    _this10 = _super7.call(this, EdwardsPoint, 'edwards', conf);\n    _this10.a = BN.fromJSON(conf.a).toRed(_this10.red);\n    _this10.d = BN.fromJSON(conf.d).toRed(_this10.red);\n    _this10.s = BN.fromJSON(conf.s || '0').toRed(_this10.red);\n    _this10.si = _this10.s.isZero() ? _this10.zero : _this10.s.redInvert();\n    _this10.k = _this10.d.redMuln(2);\n    _this10.smi = -_this10.d.redNeg().word(0);\n    _this10.ad6 = _this10.a.redAdd(_this10.d).redMul(_this10.i6);\n    _this10.twisted = !_this10.a.eq(_this10.one);\n    _this10.oneA = _this10.a.eq(_this10.one);\n    _this10.mOneA = _this10.a.eq(_this10.one.redNeg());\n    _this10.smallD = _this10.prime != null && _this10.d.redNeg().length === 1;\n    _this10.alt = null;\n\n    _this10._finalize(conf);\n\n    return _this10;\n  }\n\n  _createClass(EdwardsCurve, [{\n    key: \"_short\",\n    value: function _short(a0, odd) {\n      // Twisted Edwards->Short Weierstrass Equivalence.\n      //\n      // [TWISTEQ] Section 2.\n      //\n      // Transformation:\n      //\n      //   a' = -(a^2 + 14 * a * d + d^2) / 48\n      //   b' = (33 * (a^2 * d + a * d^2) - a^3 - d^3) / 864\n      var a = this.a,\n          d = this.d;\n      var a2 = a.redSqr();\n      var a3 = a2.redMul(a);\n      var d2 = d.redSqr();\n      var d3 = d2.redMul(d);\n      var ad14 = a.redMul(d).redIMuln(14);\n      var a2d = a2.redMul(d);\n      var ad2 = a.redMul(d2);\n      var t0 = a2d.redIAdd(ad2).redIMuln(33);\n      var wa = a2.redAdd(ad14).redIAdd(d2).redDivn(-48);\n      var wb = t0.redISub(a3).redISub(d3).redDivn(864);\n      if (a0 != null) return ShortCurve._isomorphism(wa, wb, a0, odd);\n      return [wa, wb];\n    }\n  }, {\n    key: \"_mont\",\n    value: function _mont(b0) {\n      var invert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Twisted Edwards->Montgomery Transformation.\n      //\n      // [TWISTED] Theorem 3.2, Page 4, Section 3.\n      //\n      // Equivalence:\n      //\n      //   A = 2 * (a + d) / (a - d)\n      //   B = 4 / (a - d)\n      //\n      // Isomorphism:\n      //\n      //   A = 2 * (a + d) / (a - d)\n      //   B = B'\n      //\n      // Where ((4 / (a - d)) / B') is square.\n      //\n      // If `4 / (a - d)` is non-square, we can\n      // usually force B=1 by using the `invert`\n      // option. This will create an isomorphism\n      // chain of: E(a,d)->E(d,a)->M(-A,-B).\n      //\n      // The equivalence between E(a,d) and E(d,a)\n      // is:\n      //\n      //   (x, y) = (x, 1 / y)\n      //\n      // Meaning our map to M(-A,-B) is:\n      //\n      //   u = (1 + 1 / y) / (1 - 1 / y)\n      //     = (y + 1) / (y - 1)\n      //   v = u / x\n      assert(typeof invert === 'boolean');\n      var apd, amd;\n\n      if (invert) {\n        apd = this.d.redAdd(this.a);\n        amd = this.d.redSub(this.a);\n      } else {\n        apd = this.a.redAdd(this.d);\n        amd = this.a.redSub(this.d);\n      }\n\n      var z = amd.redInvert();\n      var a = apd.redMuln(2).redMul(z);\n      var b = z.redMuln(4);\n      if (b0 != null) return MontCurve._isomorphism(a, b, b0);\n      return [a, b];\n    }\n  }, {\n    key: \"_edwards\",\n    value: function _edwards(a0) {\n      return EdwardsCurve._isomorphism(this.a, this.d, a0);\n    }\n  }, {\n    key: \"_scaleShort\",\n    value: function _scaleShort(curve) {\n      assert(curve instanceof ShortCurve);\n\n      var _curve$_scale7 = curve._scale(this),\n          _curve$_scale8 = _slicedToArray(_curve$_scale7, 2),\n          u2 = _curve$_scale8[0],\n          u3 = _curve$_scale8[1];\n\n      return [this.field(u2.redInvert()), this.field(u3.redInvert())];\n    }\n  }, {\n    key: \"_scaleMont\",\n    value: function _scaleMont(curve) {\n      var invert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Calculate isomorphism factor between\n      // Twisted Edwards and Montgomery with:\n      //\n      //   a = (A + 2) / B\n      //   c = +-sqrt(a / a')\n      //\n      // Which can be reduced to:\n      //\n      //   c = +-sqrt((A + 2) / (B * a'))\n      //\n      // If base points are available, we can do:\n      //\n      //   x = u / v\n      //   c = x' / x\n      //\n      // Which can be reduced to:\n      //\n      //   c = v * x' / u\n      //\n      // We can now calculate the Edwards `x` with:\n      //\n      //   x' = c * u / v\n      //\n      // And likewise, the Montgomery `v`:\n      //\n      //   v = c * u / x'\n      assert(curve instanceof MontCurve);\n      assert(typeof invert === 'boolean');\n\n      if (this.g.isInfinity() || curve.g.isInfinity()) {\n        var _curve$_edwards = curve._edwards(null, invert),\n            _curve$_edwards2 = _slicedToArray(_curve$_edwards, 1),\n            a = _curve$_edwards2[0];\n\n        return this.field(a).redDivSqrt(this.a);\n      }\n\n      var x = curve.g.x.redDiv(curve.g.y);\n      return this.g.x.redDiv(this.field(x));\n    }\n  }, {\n    key: \"_scaleEdwards\",\n    value: function _scaleEdwards(curve) {\n      // We can extract the isomorphism factor with:\n      //\n      //   c = +-sqrt(a / a')\n      //\n      // If base points are available, we can do:\n      //\n      //   c = x' / x\n      assert(curve instanceof EdwardsCurve);\n      if (this.g.isInfinity() || curve.g.isInfinity()) return this.field(curve.a).redDivSqrt(this.a);\n      return this.g.x.redDiv(this.field(curve.g.x));\n    }\n  }, {\n    key: \"_mulA\",\n    value: function _mulA(num) {\n      assert(num instanceof BN); // n * a = n\n\n      if (this.oneA) return num.clone(); // n * a = -n\n\n      if (this.mOneA) return num.redNeg();\n      return this.a.redMul(num);\n    }\n  }, {\n    key: \"_mulD\",\n    value: function _mulD(num) {\n      assert(num instanceof BN); // -d < 0x4000000\n\n      if (this.smallD) return num.redMuln(this.smi);\n      return this.d.redMul(num);\n    }\n  }, {\n    key: \"_elligator1\",\n    value: function _elligator1(t) {\n      // Elligator 1.\n      //\n      // Distribution: 1/2.\n      //\n      // [ELL1] Page 6, Section 3.\n      //        Page 15, Appendix A.\n      // [ELL2] Page 7, Section 3.2.\n      //\n      // Assumptions:\n      //\n      //   - Let p be a prime power congruent to 3 mod 4.\n      //   - Let s be a nonzero element of F(p).\n      //   - Let c = 2 / s^2.\n      //   - Let r = c + 1 / c.\n      //   - Let d = -(c + 1)^2 / (c - 1)^2.\n      //   - (s^2 - 2) * (s^2 + 2) != 0.\n      //   - c * (c - 1) * (c + 1) != 0.\n      //   - r != 0.\n      //   - d is not square.\n      //   - x^2 + y^2 = 1 + d * x^2 * y^2.\n      //   - u * v * X * Y * x * (Y + 1) != 0.\n      //   - Y^2 = X^5 + (r^2 - 2) * X^3 + X.\n      //\n      // Elligator 1, as devised by Fouque et al,\n      // takes place on the hyperelliptic curve of:\n      //\n      //   y^2 = x^5 + (r^2 - 2) * x^3 + x\n      //\n      // Not only must our Edwards curve be complete,\n      // with a prime congruent to 3 mod 4, and a = 1,\n      // our curve must be isomorphic to a hyperelliptic\n      // curve of the above form. Roughly one half of\n      // all Edwards curves are isomorphic to a curve\n      // of said form.\n      //\n      // We can derive the isomorphism with:\n      //\n      //   c = (d +- 2 * sqrt(-d) - 1) / (d + 1)\n      //   s = +-sqrt(2 / c)\n      //   r = c + 1 / c\n      //\n      // Note that even if your curve is an Elligator 1\n      // curve, Elligator 2 is probably still preferable,\n      // as it has nearly the same properties (i.e. the\n      // same distribution), and is much less complex.\n      //\n      // Map:\n      //\n      //   f(a) = a^((p - 1) / 2)\n      //   u = (1 - t) / (1 + t)\n      //   v = u^5 + (r^2 - 2) * u^3 + u\n      //   X = f(v) * u\n      //   Y = (f(v) * v)^((p + 1) / 4) * f(v) * f(u^2 + 1 / c^2)\n      //   Y = 1, if u = 0\n      //   x = (c - 1) * s * X * (1 + X) / Y\n      //   y = (r * X - (1 + X)^2) / (r * X + (1 + X)^2)\n      //\n      // When t = +-1, we create the hyperelliptic\n      // 2-torsion point of (0, 0). This needs to be\n      // mapped to (0, -1) in Edwards form, but the x\n      // denominator becomes zero. As far as I can\n      // tell, this is the only exceptional case.\n      //\n      // The only other exceptional case initially\n      // appears to be when the y denominator sums to\n      // zero (when t = sqrt(4 / r + 1)), however, the\n      // hyperelliptic `X` is negated by the sign of\n      // `v`, making this impossible.\n      var s = this.s,\n          si = this.si,\n          i2 = this.i2,\n          one = this.one,\n          two = this.two;\n      var c = si.redSqr().redIMuln(2);\n      var ci = s.redSqr().redMul(i2);\n      var ci2 = ci.redSqr();\n      var r = c.redAdd(ci);\n      var r2 = r.redSqr().redISub(two);\n      var cm1 = c.redSub(one);\n      var uu = one.redSub(t);\n      var uz = one.redAdd(t);\n      var u = uz.isZero() ? uz : uu.redDiv(uz);\n      var u2 = u.redSqr();\n      var u3 = u2.redMul(u);\n      var u5 = u3.redMul(u2);\n      var v = u5.redAdd(r2.redMul(u3)).redIAdd(u);\n      var f0 = this.field(v.redJacobi());\n      var f1 = this.field(u2.redAdd(ci2).redJacobi());\n      var f2 = f0.redMul(f1);\n      var X = f0.redMul(u);\n      var Y = f0.redMul(v).redSqrt().redMul(f2);\n      var X1 = one.redAdd(X);\n      var rX = r.redMul(X);\n      var X12 = X1.redSqr();\n      var xx = cm1.redMul(s).redMul(X).redMul(X1);\n      var xz = u.isZero() ? this.one : Y;\n      var yy = rX.redSub(X12);\n      var yz = rX.redAdd(X12);\n      return this.cpoint(xx, xz, yy, yz);\n    }\n  }, {\n    key: \"_invert1\",\n    value: function _invert1(p, hint) {\n      // Inverting the Map (Elligator 1).\n      //\n      // [ELL1] Page 6, Section 3.\n      //        Page 15, Appendix A.\n      // [ELL2] Page 7, Section 3.3.\n      //\n      // Assumptions:\n      //\n      //   - y + 1 != 0.\n      //   - (1 + n * r)^2 - 1 is square in F(p).\n      //   - If n * r = -2 then x = 2 * s * (c - 1) * f(c) / r.\n      //   - Y = (c - 1) * s * X * (1 + X) / x.\n      //\n      // Map:\n      //\n      //   f(a) = a^((p - 1) / 2)\n      //   n = (y - 1) / (2 * (y + 1))\n      //   X = -(1 + n * r) + ((1 + n * r)^2 - 1)^((p + 1) / 4)\n      //   z = f((c - 1) * s * X * (1 + X) * x * (X^2 + 1 / c^2))\n      //   u = z * X\n      //   t = (1 - u) / (1 + u)\n      var s = this.s,\n          si = this.si,\n          i2 = this.i2,\n          one = this.one;\n      var x = p.x,\n          y = p.y,\n          z = p.z;\n      var sign = hint & 1;\n      var c = si.redSqr().redIMuln(2);\n      var ci = s.redSqr().redMul(i2);\n      var ci2 = ci.redSqr();\n      var r = c.redAdd(ci);\n      var cm1 = c.redSub(one);\n      var nn = y.redSub(z);\n      var nz = y.redAdd(z).redIMuln(2);\n      var n = nz.isZero() ? nz : nn.redDiv(nz);\n      var nr1 = one.redAdd(n.redMul(r));\n      var w2 = nr1.redSqr().redISub(one);\n      var w = w2.redSqrt();\n      var X = w.redSub(nr1);\n      var X1 = one.redAdd(X);\n      var YY = cm1.redMul(s).redMul(X).redMul(X1);\n      var Y = YY.redMul(x.redMul(z));\n      var X2 = X.redSqr().redIAdd(ci2);\n      var Z = this.field(Y.redMul(X2).redJacobi());\n      var u = Z.redMul(X);\n      var tt = one.redSub(u);\n      var tz = one.redAdd(u);\n      var t = tz.isZero() ? tz : tt.redDiv(tz);\n      if (t.redIsOdd() !== Boolean(sign)) t.redINeg();\n      return t;\n    }\n  }, {\n    key: \"_alt\",\n    value: function _alt() {\n      if (!this.alt) this.alt = this.toMont();\n      return this.alt;\n    }\n  }, {\n    key: \"isElliptic\",\n    value: function isElliptic() {\n      var ad = this.a.redMul(this.d);\n      var amd = this.a.redSub(this.d); // a * d * (a - d) != 0\n\n      return !ad.redMul(amd).isZero();\n    }\n  }, {\n    key: \"jinv\",\n    value: function jinv() {\n      // [TWISTED] Definition 2.1, Page 3, Section 2.\n      var a = this.a,\n          d = this.d;\n      var ad = a.redMul(d);\n      var amd4 = a.redSub(d).redPown(4);\n      var a2 = a.redSqr();\n      var d2 = d.redSqr();\n      var t0 = a2.redAdd(ad.redMuln(14)).redIAdd(d2);\n      var lhs = t0.redPown(3).redIMuln(16);\n      var rhs = ad.redMul(amd4);\n      if (rhs.isZero()) throw new Error('Curve is not elliptic.'); // 16 * (a^2 + 14 * a * d + d^2)^3 / (a * d * (a - d)^4)\n\n      return lhs.redDiv(rhs).fromRed();\n    }\n  }, {\n    key: \"isComplete\",\n    value: function isComplete() {\n      return this.a.redJacobi() === 1 && this.d.redJacobi() === -1;\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y, z, t) {\n      return new EdwardsPoint(this, x, y, z, t);\n    }\n  }, {\n    key: \"jpoint\",\n    value: function jpoint(x, y, z) {\n      assert(x == null && y == null && z == null);\n      return this.point();\n    }\n  }, {\n    key: \"cpoint\",\n    value: function cpoint(xx, xz, yy, yz) {\n      assert(xx instanceof BN);\n      assert(xz instanceof BN);\n      assert(yy instanceof BN);\n      assert(yz instanceof BN);\n      var x = xx.redMul(yz);\n      var y = yy.redMul(xz);\n      var z = xz.redMul(yz);\n      var t = xx.redMul(yy);\n      return this.point(x, y, z, t);\n    }\n  }, {\n    key: \"solveX2\",\n    value: function solveX2(y) {\n      // [RFC8032] Section 5.1.3 & 5.2.3.\n      assert(y instanceof BN); // x^2 = (y^2 - 1) / (d * y^2 - a)\n\n      var y2 = y.redSqr();\n\n      var rhs = this._mulD(y2).redISub(this.a);\n\n      var lhs = y2.redISub(this.one);\n      var x2 = lhs.redDiv(rhs);\n      return x2;\n    }\n  }, {\n    key: \"solveX\",\n    value: function solveX(y) {\n      // Optimize with inverse square root trick.\n      //\n      // Note that `0 / 0` can only occur if\n      // `a == d` (i.e. the curve is singular).\n      var y2 = y.redSqr();\n\n      var rhs = this._mulD(y2).redISub(this.a);\n\n      var lhs = y2.redISub(this.one);\n      return lhs.redDivSqrt(rhs);\n    }\n  }, {\n    key: \"solveY2\",\n    value: function solveY2(x) {\n      assert(x instanceof BN); // y^2 = (a * x^2 - 1) / (d * x^2 - 1)\n\n      var x2 = x.redSqr();\n\n      var lhs = this._mulA(x2).redISub(this.one);\n\n      var rhs = this._mulD(x2).redISub(this.one);\n\n      var y2 = lhs.redDiv(rhs);\n      return y2;\n    }\n  }, {\n    key: \"solveY\",\n    value: function solveY(x) {\n      // Optimize with inverse square root trick.\n      //\n      // Note that `0 / 0` can only occur if\n      // `a == d` (i.e. the curve is singular).\n      var x2 = x.redSqr();\n\n      var lhs = this._mulA(x2).redISub(this.one);\n\n      var rhs = this._mulD(x2).redISub(this.one);\n\n      return lhs.redDivSqrt(rhs);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(point) {\n      // [TWISTED] Definition 2.1, Page 3, Section 2.\n      //           Page 11, Section 6.\n      assert(point instanceof EdwardsPoint); // Z1 = 1\n\n      if (point.zOne) {\n        // a * x^2 + y^2 = 1 + d * x^2 * y^2\n        var _x5 = point.x.redSqr();\n\n        var _y2 = point.y.redSqr();\n\n        var _dxy = this._mulD(_x5).redMul(_y2);\n\n        var _lhs = this._mulA(_x5).redIAdd(_y2);\n\n        var _rhs = this.one.redAdd(_dxy);\n\n        var _tz = point.t;\n\n        var _xy = point.x.redMul(point.y);\n\n        return _lhs.eq(_rhs) && _tz.eq(_xy);\n      } // (a * x^2 + y^2) * z^2 = z^4 + d * x^2 * y^2\n\n\n      var x2 = point.x.redSqr();\n      var y2 = point.y.redSqr();\n      var z2 = point.z.redSqr();\n      var z4 = z2.redSqr();\n\n      var dxy = this._mulD(x2).redMul(y2);\n\n      var lhs = this._mulA(x2).redIAdd(y2).redMul(z2);\n\n      var rhs = z4.redIAdd(dxy);\n      var tz = point.t.redMul(point.z);\n      var xy = point.x.redMul(point.y);\n      return lhs.eq(rhs) && tz.eq(xy);\n    }\n  }, {\n    key: \"pointFromX\",\n    value: function pointFromX(x) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      assert(x instanceof BN);\n      assert(sign == null || typeof sign === 'boolean');\n      if (!x.red) x = x.toRed(this.red);\n      var y = this.solveY(x);\n\n      if (sign != null) {\n        if (y.isZero() && sign) throw new Error('Invalid point.');\n        if (y.redIsOdd() !== sign) y.redINeg();\n      }\n\n      return this.point(x, y);\n    }\n  }, {\n    key: \"pointFromY\",\n    value: function pointFromY(y) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      assert(y instanceof BN);\n      assert(sign == null || typeof sign === 'boolean');\n      if (!y.red) y = y.toRed(this.red);\n      var x = this.solveX(y);\n\n      if (sign != null) {\n        if (x.isZero() && sign) throw new Error('Invalid point.');\n        if (x.redIsOdd() !== sign) x.redINeg();\n      }\n\n      return this.point(x, y);\n    }\n  }, {\n    key: \"isIsomorphic\",\n    value: function isIsomorphic(curve) {\n      var invert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // [TWISTED] Theorem 3.2, Page 4, Section 3.\n      //           Definition 2.1, Page 3, Section 2.\n      assert(curve instanceof Curve);\n      assert(typeof invert === 'boolean');\n      if (!curve.p.eq(this.p)) return false; // E(a,d) <-> E(a,b)\n\n      if (curve.type === 'short') return curve.isIsomorphic(this); // E(a,d) <-> M(A,B)\n      // E(a,d) <-> M(-A,-B)\n\n      if (curve.type === 'mont') {\n        // A * (a - d) = 2 * (a + d)\n        var a = this.field(curve.a);\n        var apd, amd;\n\n        if (invert) {\n          apd = this.d.redAdd(this.a);\n          amd = this.d.redSub(this.a);\n        } else {\n          apd = this.a.redAdd(this.d);\n          amd = this.a.redSub(this.d);\n        }\n\n        return a.redMul(amd).eq(apd.redIMuln(2));\n      } // E(a,d) <-> E(a',a'd/a)\n\n\n      if (curve.type === 'edwards') {\n        // a' * d = a * d'\n        var _a = this.field(curve.a);\n\n        var d = this.field(curve.d);\n        return this.a.redMul(d).eq(_a.redMul(this.d));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isIsogenous\",\n    value: function isIsogenous(curve) {\n      // Check for the 4-isogenies described by Hamburg:\n      // https://moderncrypto.org/mail-archive/curves/2016/000806.html\n      assert(curve instanceof Curve);\n      if (!curve.p.eq(this.p)) return false; // E(1,d) <-> M(2-4d,1)\n\n      if (curve.type === 'mont') {\n        if (!this.a.eq(this.one)) return false;\n        var a = this.field(curve.a);\n        var b = this.field(curve.b);\n        var d24 = this.two.redSub(this.d.redMuln(4));\n        return a.eq(d24) && b.eq(this.one);\n      } // E(a,d) <-> E(-a,d-a)\n\n\n      if (curve.type === 'edwards') {\n        var _a2 = this.field(curve.a);\n\n        var d = this.field(curve.d);\n        return _a2.eq(this.a.redNeg()) && d.eq(this.d.redSub(this.a));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"pointFromShort\",\n    value: function pointFromShort(point) {\n      // [TWISTEQ] Section 1.\n      assert(point instanceof ShortPoint);\n\n      if (this.isIsomorphic(point.curve)) {\n        // Equivalence for E(a,b)->E(a',d'):\n        //\n        //   x' = (6 * x - a' - d') / (6 * y)\n        //   y' = (12 * x - 5 * a' + d') / (12 * x + a' - 5 * d')\n        //\n        // Undefined for x = (5 * d' - a') / 12 or y = 0.\n        //\n        // Exceptional Cases:\n        //   - O -> (0, 1)\n        //   - ((a' + d') / 6, 0) -> (0, -1)\n        //   - ((5 * d' - a') / 12, (d' - a') / 4 * sqrt(d')) -> (sqrt(1/d'), oo)\n        //\n        // Unexceptional Cases:\n        //   - ((5 * a' - d') / 12, (a' - d') / 4 * sqrt(a')) -> (sqrt(1/a'), 0)\n        if (point.isInfinity()) return this.point();\n        if (point.y.isZero()) return this.point(this.zero, this.one.redNeg());\n        var a = this.a,\n            d = this.d;\n\n        var _this$_scale15 = this._scale(point.curve),\n            _this$_scale16 = _slicedToArray(_this$_scale15, 2),\n            u2 = _this$_scale16[0],\n            u3 = _this$_scale16[1];\n\n        var a5 = a.redMuln(5);\n        var d5 = d.redMuln(5);\n        var x = this.field(point.x).redMul(u2);\n        var y = this.field(point.y).redMul(u3);\n        var x6 = x.redMuln(6);\n        var x12 = x.redMuln(12);\n        var xx = x6.redSub(a).redISub(d);\n        var xz = y.redMuln(6);\n        var yy = x12.redSub(a5).redIAdd(d);\n        var yz = x12.redAdd(a).redISub(d5);\n        return this.cpoint(xx, xz, yy, yz);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromMont\",\n    value: function pointFromMont(point) {\n      // [RFC7748] Section 4.1 & 4.2.\n      // [MONT3] Page 6, Section 2.5.\n      // [TWISTED] Theorem 3.2, Page 4, Section 3.\n      assert(point instanceof MontPoint);\n      assert(point.curve.p.eq(this.p)); // Montgomery `u`, `v`.\n\n      var u = this.field(point.x);\n      var v = this.field(point.y);\n\n      if (this.isIsogenous(point.curve)) {\n        // 4-isogeny maps for M(2-4d,1)->E(1,d):\n        //\n        //   x = 4 * v * (u^2 - 1) / (u^4 - 2 * u^2 + 4 * v^2 + 1)\n        //   y = -(u^5 - 2 * u^3 - 4 * u * v^2 + u) /\n        //        (u^5 - 2 * u^2 * v^2 - 2 * u^3 - 2 * v^2 + u)\n        //\n        // Undefined for u = 0 and v = 0.\n        //\n        // Exceptional Cases:\n        //   - O -> (0, 1)\n        //   - (0, 0) -> (0, 1)\n        //\n        // Unexceptional Cases:\n        //   - (-1, +-sqrt(A - 2)) -> (0, 1)\n        //   - (1, +-sqrt(A + 2)) -> (0, -1)\n        //\n        // The point (1, v) is invalid on Curve448.\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point();\n        var u2 = u.redSqr();\n        var u3 = u2.redMul(u);\n        var u4 = u3.redMul(u);\n        var u5 = u4.redMul(u);\n        var v2 = v.redSqr();\n        var a = v.redMuln(4);\n        var b = u2.redSub(this.one);\n        var c = u2.redMuln(2);\n        var d = v2.redMuln(4);\n        var e = u3.redIMuln(2);\n        var f = u.redMul(v2).redIMuln(4);\n        var g = u2.redMul(v2).redIMuln(2);\n        var h = v2.redIMuln(2);\n        var xx = a.redMul(b);\n        var xz = u4.redISub(c).redIAdd(d).redIAdd(this.one);\n        var yy = u5.redSub(e).redISub(f).redIAdd(u).redINeg();\n        var yz = u5.redISub(g).redISub(e).redISub(h).redIAdd(u);\n        return this.cpoint(xx, xz, yy, yz).divn(4);\n      }\n\n      if (this.isIsomorphic(point.curve, true)) {\n        // Isomorphic maps for M(-A,-B)->E(a,d):\n        //\n        //   x = +-sqrt((A - 2) / (B * a)) * u / v\n        //   y = (u + 1) / (u - 1)\n        //\n        // Undefined for u = 1 or v = 0.\n        //\n        // Exceptional Cases:\n        //   - O -> (0, 1)\n        //   - (0, 0) -> (0, -1)\n        //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / d), oo)\n        //\n        // Unexceptional Cases:\n        //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / a), 0)\n        //\n        // The point (1, v) is invalid on Curve448.\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point(this.zero, this.one.redNeg());\n\n        var _c3 = this._scale(point.curve, true);\n\n        var _xx = _c3.redMul(u);\n\n        var _xz = v;\n\n        var _yy = u.redAdd(this.one);\n\n        var _yz = u.redSub(this.one);\n\n        return this.cpoint(_xx, _xz, _yy, _yz);\n      }\n\n      if (this.isIsomorphic(point.curve, false)) {\n        // Isomorphic maps for M(A,B)->E(a,d):\n        //\n        //   x = +-sqrt((A + 2) / (B * a)) * u / v\n        //   y = (u - 1) / (u + 1)\n        //\n        // Undefined for u = -1 or v = 0.\n        //\n        // Exceptional Cases:\n        //   - O -> (0, 1)\n        //   - (0, 0) -> (0, -1)\n        //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / d), oo)\n        //\n        // Unexceptional Cases:\n        //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / a), 0)\n        //\n        // The point (-1, v) is invalid on Curve25519.\n        if (point.isInfinity()) return this.point();\n        if (point.x.isZero()) return this.point(this.zero, this.one.redNeg());\n\n        var _c4 = this._scale(point.curve, false);\n\n        var _xx2 = _c4.redMul(u);\n\n        var _xz2 = v;\n\n        var _yy2 = u.redSub(this.one);\n\n        var _yz2 = u.redAdd(this.one);\n\n        return this.cpoint(_xx2, _xz2, _yy2, _yz2);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromEdwards\",\n    value: function pointFromEdwards(point) {\n      // [TWISTED] Definition 2.1, Page 3, Section 2.\n      // [ISOGENY] Page 2, Section 2.\n      assert(point instanceof EdwardsPoint);\n      assert(point.curve.p.eq(this.p)); // Edwards `x`, `y`, `z`, `t`.\n\n      var a = this.field(point.curve.a);\n      var x = this.field(point.x);\n      var y = this.field(point.y);\n      var z = this.field(point.z);\n      var t = this.field(point.t);\n\n      if (this.isIsogenous(point.curve)) {\n        // 4-isogeny maps for E(a,d)<->E(-a,d-a):\n        //\n        //   x' = (2 * x * y) / (y^2 - a * x^2)\n        //   y' = (y^2 + a * x^2) / (2 - y^2 - a * x^2)\n        //\n        // Undefined for y^2 - a * x^2 = 0\n        //            or y^2 + a * x^2 = 2.\n        var xy = x.redMul(y);\n        var x2 = x.redSqr();\n        var y2 = y.redSqr();\n        var z2 = z.redSqr();\n        var ax2 = a.redMul(x2);\n        var xx = xy.redIMuln(2);\n        var xz = y2.redSub(ax2);\n        var yy = y2.redAdd(ax2);\n        var yz = z2.redIMuln(2).redISub(yy);\n        var p = this.cpoint(xx, xz, yy, yz);\n        return !this.twisted ? p.divn(4) : p;\n      }\n\n      if (this.isIsomorphic(point.curve)) {\n        // Isomorphic maps for E(a,d)<->E(a',a'd/a):\n        //\n        //   x' = +-sqrt(a / a') * x\n        //   y' = y\n        //\n        // Undefined when (a / a') is not square.\n        var c = this._scale(point.curve);\n\n        var nx = c.redMul(x);\n        var ny = y;\n        var nz = z;\n        var nt = c.redMul(t);\n        return this.point(nx, ny, nz, nt);\n      }\n\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"pointFromUniform\",\n    value: function pointFromUniform(u) {\n      var curve = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      assert(u instanceof BN);\n      assert(u.red === this.red);\n      assert(curve == null || curve instanceof MontCurve);\n      if (!curve) curve = this._alt();\n      var u0 = curve.field(u);\n      var p0 = curve.pointFromUniform(u0);\n      return this.pointFromMont(p0);\n    }\n  }, {\n    key: \"pointToUniform\",\n    value: function pointToUniform(p, hint) {\n      var curve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      // Convert an edwards point to a field\n      // element by inverting the elligator2 map.\n      //\n      // Hint Layout:\n      //\n      //   [00000000] [0000] [0000]\n      //        |        |      |\n      //        |        |      +-- preimage index\n      //        |        +--- subgroup\n      //        +-- bits to OR with uniform bytes\n      assert(p instanceof EdwardsPoint);\n      assert(hint >>> 0 === hint);\n      assert(curve == null || curve instanceof MontCurve);\n      if (!curve) curve = this._alt(); // Add a random torsion component.\n\n      var i = (hint >> 4 & 15) % this.torsion.length;\n      var q = p.add(this.torsion[i]); // Convert and invert.\n\n      var p0 = curve.pointFromEdwards(q);\n      var u0 = curve.pointToUniform(p0, hint & 15);\n      return this.field(u0);\n    }\n  }, {\n    key: \"pointFromHash\",\n    value: function pointFromHash(bytes, pake) {\n      var curve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      assert(curve == null || curve instanceof MontCurve);\n      if (!curve) curve = this._alt();\n      var p0 = curve.pointFromHash(bytes, pake);\n      return this.pointFromMont(p0);\n    }\n  }, {\n    key: \"pointToHash\",\n    value: function pointToHash(p, subgroup, rng) {\n      var curve = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      assert(p instanceof EdwardsPoint);\n      assert(subgroup >>> 0 === subgroup);\n      assert(curve == null || curve instanceof MontCurve);\n      if (!curve) curve = this._alt(); // Add a random torsion component.\n\n      var i = subgroup % this.torsion.length;\n      var q = p.add(this.torsion[i]); // Convert and invert.\n\n      var p0 = curve.pointFromEdwards(q);\n      return curve.pointToHash(p0, 0, rng);\n    }\n  }, {\n    key: \"decodePoint\",\n    value: function decodePoint(bytes) {\n      return EdwardsPoint.decode(this, bytes);\n    }\n  }, {\n    key: \"toShort\",\n    value: function toShort(a0, odd) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_short5 = this._short(a0, odd),\n          _this$_short6 = _slicedToArray(_this$_short5, 2),\n          a = _this$_short6[0],\n          b = _this$_short6[1];\n\n      var curve = new ShortCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h\n      });\n\n      if (sign != null) {\n        var _curve$_scale9 = curve._scale(this),\n            _curve$_scale10 = _slicedToArray(_curve$_scale9, 2),\n            u3 = _curve$_scale10[1];\n\n        if (u3.redIsOdd() !== sign) u3.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromEdwards(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toMont\",\n    value: function toMont(b0, invert) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _this$_mont5 = this._mont(b0, invert),\n          _this$_mont6 = _slicedToArray(_this$_mont5, 2),\n          a = _this$_mont6[0],\n          b = _this$_mont6[1];\n\n      var curve = new MontCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        b: b,\n        n: this.n,\n        h: this.h,\n        z: this.z\n      });\n\n      if (sign != null) {\n        var c = this._scale(curve, invert);\n\n        if (c.redIsOdd() !== sign) c.redINeg();\n      }\n\n      if (!this.g.isInfinity()) curve.g = curve.pointFromEdwards(this.g);\n\n      for (var i = 0; i < this.h.word(0); i++) {\n        curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"toEdwards\",\n    value: function toEdwards(a0) {\n      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var _this$_edwards5 = this._edwards(a0),\n          _this$_edwards6 = _slicedToArray(_this$_edwards5, 2),\n          a = _this$_edwards6[0],\n          d = _this$_edwards6[1];\n\n      var curve = new EdwardsCurve({\n        red: this.red,\n        prime: this.prime,\n        p: this.p,\n        a: a,\n        d: d,\n        n: this.n,\n        h: this.h,\n        z: this.z\n      });\n\n      if (sign != null) {\n        var c = curve._scale(this);\n\n        if (c.redIsOdd() !== sign) c.redINeg();\n      }\n\n      if (!this.g.isInfinity()) {\n        curve.g = curve.pointFromEdwards(this.g);\n        curve.g.normalize();\n      }\n\n      if (curve.isComplete()) {\n        for (var i = 0; i < this.h.word(0); i++) {\n          curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);\n          curve.torsion[i].normalize();\n        }\n      }\n\n      return curve;\n    }\n  }, {\n    key: \"pointFromJSON\",\n    value: function pointFromJSON(json) {\n      return EdwardsPoint.fromJSON(this, json);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      var json = _get(_getPrototypeOf(EdwardsCurve.prototype), \"toJSON\", this).call(this, pre);\n\n      json.a = this.a.fromRed().toJSON();\n      json.d = this.d.fromRed().toJSON();\n      if (!this.s.isZero()) json.s = this.s.fromRed().toJSON();\n      return json;\n    }\n  }], [{\n    key: \"_isomorphism\",\n    value: function _isomorphism(curveA, curveD, customA) {\n      // Twisted Edwards Isomorphism.\n      //\n      // [TWISTED] Definition 2.1, Page 3, Section 2.\n      //\n      // Transformation:\n      //\n      //   a' = a'\n      //   d' = a' * d / a\n      //\n      // Where (a / a') is square.\n      assert(curveA instanceof BN);\n      assert(curveD instanceof BN);\n      assert(customA instanceof BN);\n      var a = customA.clone();\n      var d = customA.redMul(curveD).redDiv(curveA);\n      var c = curveA.redDiv(customA);\n      if (c.redJacobi() !== 1) throw new Error('Invalid `a` coefficient.');\n      return [a, d];\n    }\n  }]);\n\n  return EdwardsCurve;\n}(Curve);\n/**\n * EdwardsPoint\n */\n\n\nvar EdwardsPoint = /*#__PURE__*/function (_Point5) {\n  _inherits(EdwardsPoint, _Point5);\n\n  var _super8 = _createSuper(EdwardsPoint);\n\n  function EdwardsPoint(curve, x, y, z, t) {\n    var _this11;\n\n    _classCallCheck(this, EdwardsPoint);\n\n    assert(curve instanceof EdwardsCurve);\n    _this11 = _super8.call(this, curve, types.EXTENDED);\n    _this11.x = _this11.curve.zero;\n    _this11.y = _this11.curve.one;\n    _this11.z = _this11.curve.one;\n    _this11.t = _this11.curve.zero;\n    _this11.zOne = true;\n    if (x != null) _this11._init(x, y, z, t);\n    return _this11;\n  }\n\n  _createClass(EdwardsPoint, [{\n    key: \"_init\",\n    value: function _init(x, y, z, t) {\n      assert(x instanceof BN);\n      assert(y instanceof BN);\n      assert(z == null || z instanceof BN);\n      assert(t == null || t instanceof BN);\n      this.x = x;\n      this.y = y;\n      this.z = z || this.curve.one;\n      this.t = t || null;\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n      if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n      this.zOne = this.z.eq(this.curve.one);\n\n      this._check();\n\n      if (!this.t) {\n        this.t = this.x.redMul(this.y);\n        if (!this.zOne) this.t = this.t.redDiv(this.z);\n      }\n    }\n  }, {\n    key: \"_check\",\n    value: function _check() {\n      // In order to achieve complete\n      // addition formulas, `a` must\n      // be a square (always the case\n      // for a=1), and `d` must be a\n      // non-square.\n      //\n      // If this is not the case, the\n      // addition formulas may have\n      // exceptional cases where Z3=0.\n      //\n      // In particular, this can occur\n      // when: Q*h = -P*h and Q != -P.\n      //\n      // This is assuming 4-torsion is\n      // involved (the 4-torsion point\n      // is _not_ representable when\n      // `d` is square).\n      if (this.z.isZero()) throw new Error('Invalid point.');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return this.curve.point(this.x, this.y, this.z, this.t);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      // https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#scaling-z\n      // 1I + 2M (+ 1M if extended)\n      // Z1 = 1\n      if (this.zOne) return this; // A = 1 / Z1\n\n      var a = this.z.redInvert(); // X3 = X1 * A\n\n      this.x = this.x.redMul(a); // Y3 = Y1 * A\n\n      this.y = this.y.redMul(a); // T3 = T1 * A\n\n      this.t = this.t.redMul(a); // Z3 = 1\n\n      this.z = this.curve.one;\n      this.zOne = true;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      assert(a instanceof BN); // X3 = X1 * A\n\n      var nx = this.x.redMul(a); // Y3 = Y1 * A\n\n      var ny = this.y.redMul(a); // Z3 = Z1 * A\n\n      var nz = this.z.redMul(a); // T3 = T1 * A\n\n      var nt = this.t.redMul(a);\n      return this.curve.point(nx, ny, nz, nt);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      // -(X1, Y1, Z1, T1) = (-X1, Y1, Z1, -T1)\n      var nx = this.x.redNeg();\n      var ny = this.y;\n      var nz = this.z;\n      var nt = this.t.redNeg();\n      return this.curve.point(nx, ny, nz, nt);\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      assert(p instanceof EdwardsPoint); // P = O\n\n      if (this.isInfinity()) return p; // Q = O\n\n      if (p.isInfinity()) return this; // Z1 = 1\n\n      if (this.zOne) return p._add(this);\n      return this._add(p);\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(p) {\n      // a = -1\n      if (this.curve.mOneA) return this._addM1(p);\n      return this._addA(p);\n    }\n  }, {\n    key: \"_addM1\",\n    value: function _addM1(p) {\n      // Assumes a = -1.\n      //\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n      // 8M + 8A + 1*k + 1*2\n      //\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-madd-2008-hwcd-3\n      // 7M + 8A + 1*k + 1*2\n      // A = (Y1 - X1) * (Y2 - X2)\n      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)\n\n      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2\n\n      var c = this.t.redMul(this.curve.k).redMul(p.t); // D = Z1 * 2 * Z2\n\n      var d = p.zOne ? this.z.redAdd(this.z) : this.z.redMul(p.z).redIMuln(2); // E = B - A\n\n      var e = b.redSub(a); // F = D - C\n\n      var f = d.redSub(c); // G = D + C\n\n      var g = d.redIAdd(c); // H = B + A\n\n      var h = b.redIAdd(a); // X3 = E * F\n\n      var nx = e.redMul(f); // Y3 = G * H\n\n      var ny = g.redMul(h); // T3 = E * H\n\n      var nt = e.redMul(h); // Z3 = F * G\n\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    }\n  }, {\n    key: \"_addA\",\n    value: function _addA(p) {\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n      // 9M + 7A + 1*a + 1*d\n      //\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-madd-2008-hwcd\n      // 8M + 7A + 1*a + 1*d\n      // A = X1 * X2\n      var a = this.x.redMul(p.x); // B = Y1 * Y2\n\n      var b = this.y.redMul(p.y); // C = T1 * d * T2\n\n      var c = this.curve._mulD(this.t).redMul(p.t); // D = Z1 * Z2\n\n\n      var d = p.zOne ? this.z.clone() : this.z.redMul(p.z); // + XYXY = (X1 + Y1) * (X2 + Y2)\n\n      var xyxy = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)); // E = (X1 + Y1) * (X2 + Y2) - A - B\n\n      var e = xyxy.redISub(a).redISub(b); // F = D - C\n\n      var f = d.redSub(c); // G = D + C\n\n      var g = d.redIAdd(c); // H = B - a * A\n\n      var h = b.redISub(this.curve._mulA(a)); // X3 = E * F\n\n      var nx = e.redMul(f); // Y3 = G * H\n\n      var ny = g.redMul(h); // T3 = E * H\n\n      var nt = e.redMul(h); // Z3 = F * G\n\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    }\n  }, {\n    key: \"dbl\",\n    value: function dbl() {\n      // P = O\n      if (this.isInfinity()) return this;\n      return this._dbl();\n    }\n  }, {\n    key: \"_dbl\",\n    value: function _dbl() {\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n      // 4M + 4S + 6A + 1*a + 1*2\n      //\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-mdbl-2008-hwcd\n      // 3M + 4S + 7A + 1*a + 1*2\n      // A = X1^2\n      var a = this.x.redSqr(); // B = Y1^2\n\n      var b = this.y.redSqr(); // C = 2 * Z1^2\n\n      var c = this.zOne ? this.curve.two : this.z.redSqr().redIMuln(2); // D = a * A\n\n      var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B\n\n\n      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B\n\n      var g = d.redAdd(b); // F = G - C\n\n      var f = g.redSub(c); // H = D - B\n\n      var h = d.redISub(b); // X3 = E * F\n\n      var nx = e.redMul(f); // Y3 = G * H\n\n      var ny = g.redMul(h); // T3 = E * H\n\n      var nt = e.redMul(h); // Z3 = F * G\n\n      var nz = f.redMul(g);\n      return this.curve.point(nx, ny, nz, nt);\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      this.normalize();\n      return this.x.fromRed();\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      this.normalize();\n      return this.y.fromRed();\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(p) {\n      assert(p instanceof EdwardsPoint);\n      assert(!this.z.isZero());\n      assert(!p.z.isZero()); // P = Q\n\n      if (this === p) return true; // Z1 = Z2\n\n      if (this.z.eq(p.z)) {\n        return this.x.eq(p.x) && this.y.eq(p.y);\n      } // X1 * Z2 = X2 * Z1\n\n\n      var x1 = this.x.redMul(p.z);\n      var x2 = p.x.redMul(this.z);\n      if (!x1.eq(x2)) return false;\n      var y1 = this.y.redMul(p.z);\n      var y2 = p.y.redMul(this.z);\n      return y1.eq(y2);\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(point) {\n      assert(point instanceof EdwardsPoint);\n      return this.order().cmp(point.order()) || this.getY().cmp(point.getY()) || this.getX().cmp(point.getX());\n    }\n  }, {\n    key: \"isInfinity\",\n    value: function isInfinity() {\n      assert(!this.z.isZero()); // X1 = 0\n\n      if (!this.x.isZero()) return false; // Y1 = Z1\n\n      return this.y.eq(this.z);\n    }\n  }, {\n    key: \"isOrder2\",\n    value: function isOrder2() {\n      if (this.isInfinity()) return false;\n      return this.x.isZero();\n    }\n  }, {\n    key: \"isOdd\",\n    value: function isOdd() {\n      this.normalize();\n      return this.x.redIsOdd();\n    }\n  }, {\n    key: \"isEven\",\n    value: function isEven() {\n      this.normalize();\n      return this.x.redIsEven();\n    }\n  }, {\n    key: \"toP\",\n    value: function toP() {\n      return this.normalize();\n    }\n  }, {\n    key: \"toJ\",\n    value: function toJ() {\n      return this;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      // [RFC8032] Section 5.1.2.\n      var y = this.getY(); // Note: `x` normalized from `getY()` call.\n\n      y.setn(this.curve.signBit, this.x.redIsOdd());\n      return this.curve.encodeAdjusted(y);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pre) {\n      if (this.isInfinity()) return [];\n      var x = this.getX().toJSON();\n      var y = this.getY().toJSON();\n      if (pre === true && this.pre) return [x, y, this.pre.toJSON()];\n      return [x, y];\n    }\n  }, {\n    key: \"toPretty\",\n    value: function toPretty() {\n      var size = this.curve.fieldSize * 2;\n\n      var x = _toPretty(this.getX(), size);\n\n      var y = _toPretty(this.getY(), size);\n\n      return [x, y];\n    }\n  }, {\n    key: custom,\n    value: function value() {\n      if (this.isInfinity()) return '<EdwardsPoint: Infinity>';\n      return '<EdwardsPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(curve, bytes) {\n      // [RFC8032] Section 5.1.3.\n      assert(curve instanceof EdwardsCurve);\n      var y = curve.decodeAdjusted(bytes);\n      var sign = y.testn(curve.signBit) !== 0;\n      y.setn(curve.signBit, 0);\n      if (y.cmp(curve.p) >= 0) throw new Error('Invalid point.');\n      return curve.pointFromY(y, sign);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      assert(curve instanceof EdwardsCurve);\n      assert(Array.isArray(json));\n      assert(json.length === 0 || json.length === 2 || json.length === 3);\n      if (json.length === 0) return curve.point();\n      var x = BN.fromJSON(json[0]);\n      var y = BN.fromJSON(json[1]);\n      var point = curve.point(x, y);\n      if (json.length > 2 && json[2] != null) point.pre = Precomp.fromJSON(point, json[2]);\n      return point;\n    }\n  }]);\n\n  return EdwardsPoint;\n}(Point);\n/**\n * Precomp\n */\n\n\nvar Precomp = /*#__PURE__*/function () {\n  function Precomp() {\n    _classCallCheck(this, Precomp);\n\n    this.naf = null;\n    this.windows = null;\n    this.doubles = null;\n    this.blinding = null;\n    this.beta = null;\n  }\n\n  _createClass(Precomp, [{\n    key: \"map\",\n    value: function map(func) {\n      assert(typeof func === 'function');\n      var out = new this.constructor();\n      if (this.naf) out.naf = this.naf.map(func);\n      if (this.doubles) out.doubles = this.doubles.map(func);\n      return out;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        naf: this.naf ? this.naf.toJSON() : null,\n        windows: this.windows ? this.windows.toJSON() : null,\n        doubles: this.doubles ? this.doubles.toJSON() : null,\n        blinding: this.blinding ? this.blinding.toJSON() : undefined\n      };\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      assert(point instanceof Point);\n      assert(json && typeof json === 'object');\n      if (json.naf != null) this.naf = NAF.fromJSON(point, json.naf);\n      if (json.windows != null) this.windows = Windows.fromJSON(point, json.windows);\n      if (json.doubles != null) this.doubles = Doubles.fromJSON(point, json.doubles);\n      if (json.blinding != null) this.blinding = Blinding.fromJSON(point, json.blinding);\n      return this;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      return new this().fromJSON(point, json);\n    }\n  }]);\n\n  return Precomp;\n}();\n/**\n * NAF\n */\n\n\nvar NAF = /*#__PURE__*/function () {\n  function NAF(width, points) {\n    _classCallCheck(this, NAF);\n\n    this.width = width;\n    this.points = points;\n  }\n\n  _createClass(NAF, [{\n    key: \"map\",\n    value: function map(func) {\n      assert(typeof func === 'function');\n      var width = this.width;\n      var points = [];\n\n      var _iterator = _createForOfIteratorHelper(this.points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var point = _step.value;\n          points.push(func(point));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return new this.constructor(width, points);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        width: this.width,\n        points: this.points.slice(1).map(function (point) {\n          return point.toJSON();\n        })\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      assert(point instanceof Point);\n      assert(json && typeof json === 'object');\n      assert(json.width >>> 0 === json.width);\n      assert(Array.isArray(json.points));\n      var curve = point.curve;\n      var width = json.width;\n      var points = [point];\n\n      var _iterator2 = _createForOfIteratorHelper(json.points),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          points.push(curve.pointFromJSON(item));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return new this(width, points);\n    }\n  }]);\n\n  return NAF;\n}();\n/**\n * Windows\n */\n\n\nvar Windows = /*#__PURE__*/function () {\n  function Windows(width, bits, points) {\n    _classCallCheck(this, Windows);\n\n    this.width = width;\n    this.bits = bits;\n    this.points = points;\n  }\n\n  _createClass(Windows, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        width: this.width,\n        bits: this.bits,\n        points: this.points.slice(1).map(function (point) {\n          return point.toJSON();\n        })\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      assert(point instanceof Point);\n      assert(json && typeof json === 'object');\n      assert(json.width >>> 0 === json.width);\n      assert(json.bits >>> 0 === json.bits);\n      assert(Array.isArray(json.points));\n      var curve = point.curve;\n      var width = json.width,\n          bits = json.bits;\n      var points = [point];\n\n      var _iterator3 = _createForOfIteratorHelper(json.points),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          points.push(curve.pointFromJSON(item));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return new this(width, bits, points);\n    }\n  }]);\n\n  return Windows;\n}();\n/**\n * Doubles\n */\n\n\nvar Doubles = /*#__PURE__*/function () {\n  function Doubles(step, points) {\n    _classCallCheck(this, Doubles);\n\n    this.step = step;\n    this.points = points;\n  }\n\n  _createClass(Doubles, [{\n    key: \"map\",\n    value: function map(func) {\n      assert(typeof func === 'function');\n      var step = this.step;\n      var points = [];\n\n      var _iterator4 = _createForOfIteratorHelper(this.points),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var point = _step4.value;\n          points.push(func(point));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return new this.constructor(step, points);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        step: this.step,\n        points: this.points.slice(1).map(function (point) {\n          return point.toJSON();\n        })\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      assert(point instanceof Point);\n      assert(json && typeof json === 'object');\n      assert(json.step >>> 0 === json.step);\n      assert(Array.isArray(json.points));\n      var curve = point.curve;\n      var step = json.step;\n      var points = [point];\n\n      var _iterator5 = _createForOfIteratorHelper(json.points),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var item = _step5.value;\n          points.push(curve.pointFromJSON(item));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return new this(step, points);\n    }\n  }]);\n\n  return Doubles;\n}();\n/**\n * Blinding\n */\n\n\nvar Blinding = /*#__PURE__*/function () {\n  function Blinding(blind, unblind) {\n    _classCallCheck(this, Blinding);\n\n    this.blind = blind;\n    this.unblind = unblind;\n  }\n\n  _createClass(Blinding, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        blind: this.blind.toJSON(),\n        unblind: this.unblind.toJSON()\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(point, json) {\n      assert(point instanceof Point);\n      assert(json && typeof json === 'object');\n      var curve = point.curve;\n      var blind = BN.fromJSON(json.blind);\n      var unblind = curve.pointFromJSON(json.unblind);\n      return new this(blind, unblind);\n    }\n  }]);\n\n  return Blinding;\n}();\n/**\n * Endo\n */\n\n\nvar Endo = /*#__PURE__*/function () {\n  function Endo(beta, lambda, basis, pre) {\n    _classCallCheck(this, Endo);\n\n    this.beta = beta;\n    this.lambda = lambda;\n    this.basis = basis;\n    this.pre = pre;\n  }\n\n  _createClass(Endo, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        beta: this.beta.fromRed().toJSON(),\n        lambda: this.lambda.toJSON(),\n        basis: [this.basis[0].toJSON(), this.basis[1].toJSON()],\n        pre: [this.pre[0], this.pre[1].toJSON(), this.pre[2].toJSON()]\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(curve, json) {\n      assert(curve instanceof Curve);\n      assert(json && typeof json === 'object');\n      assert(Array.isArray(json.basis));\n      assert(Array.isArray(json.pre));\n      assert(json.basis.length === 2);\n      assert(json.pre.length === 3);\n      assert(json.pre[0] >>> 0 === json.pre[0]);\n      var beta = BN.fromJSON(json.beta).toRed(curve.red);\n      var lambda = BN.fromJSON(json.lambda);\n      var basis = [Vector.fromJSON(json.basis[0]), Vector.fromJSON(json.basis[1])];\n      var pre = [json.pre[0], BN.fromJSON(json.pre[1]), BN.fromJSON(json.pre[2])];\n      return new this(beta, lambda, basis, pre);\n    }\n  }]);\n\n  return Endo;\n}();\n/**\n * Vector\n */\n\n\nvar Vector = /*#__PURE__*/function () {\n  function Vector(a, b) {\n    _classCallCheck(this, Vector);\n\n    this.a = a;\n    this.b = b;\n  }\n\n  _createClass(Vector, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        a: this.a.toJSON(),\n        b: this.b.toJSON()\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      assert(json && typeof json === 'object');\n      var a = BN.fromJSON(json.a);\n      var b = BN.fromJSON(json.b);\n      return new this(a, b);\n    }\n  }]);\n\n  return Vector;\n}();\n/**\n * P192\n * https://tinyurl.com/fips-186-2 (page 29)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\n\nvar P192 = /*#__PURE__*/function (_ShortCurve) {\n  _inherits(P192, _ShortCurve);\n\n  var _super9 = _createSuper(P192);\n\n  function P192(pre) {\n    _classCallCheck(this, P192);\n\n    return _super9.call(this, {\n      id: 'P192',\n      ossl: 'prime192v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p192',\n      // 2^192 - 2^64 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff fffffffc'],\n      b: ['64210519 e59c80e7 0fa7e9ab 72243049', 'feb8deec c146b9b1'],\n      n: ['ffffffff ffffffff ffffffff 99def836', '146bc9b1 b4d22831'],\n      h: '1',\n      // Icart\n      z: '-5',\n      g: [['188da80e b03090f6 7cbf20eb 43a18800', 'f4ff0afd 82ff1012'], ['07192b95 ffc8da78 631011ed 6b24cdd5', '73f977a1 1e794811'], pre]\n    });\n  }\n\n  return P192;\n}(ShortCurve);\n/**\n * P224\n * https://tinyurl.com/fips-186-2 (page 30)\n * https://tinyurl.com/fips-186-3 (page 88)\n */\n\n\nvar P224 = /*#__PURE__*/function (_ShortCurve2) {\n  _inherits(P224, _ShortCurve2);\n\n  var _super10 = _createSuper(P224);\n\n  function P224(pre) {\n    _classCallCheck(this, P224);\n\n    return _super10.call(this, {\n      id: 'P224',\n      ossl: 'secp224r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'p224',\n      // 2^224 - 2^96 + 1 (1 mod 16)\n      p: ['ffffffff ffffffff ffffffff ffffffff', '00000000 00000000 00000001'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff fffffffe', 'ffffffff ffffffff fffffffe'],\n      b: ['b4050a85 0c04b3ab f5413256 5044b0b7', 'd7bfd8ba 270b3943 2355ffb4'],\n      n: ['ffffffff ffffffff ffffffff ffff16a2', 'e0b8f03e 13dd2945 5c5c2a3d'],\n      h: '1',\n      // SSWU\n      z: '1f',\n      g: [['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3', '56c21122 343280d6 115c1d21'], ['bd376388 b5f723fb 4c22dfe6 cd4375a0', '5a074764 44d58199 85007e34'], pre]\n    });\n  }\n\n  return P224;\n}(ShortCurve);\n/**\n * P256\n * https://tinyurl.com/fips-186-2 (page 31)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\n\nvar P256 = /*#__PURE__*/function (_ShortCurve3) {\n  _inherits(P256, _ShortCurve3);\n\n  var _super11 = _createSuper(P256);\n\n  function P256(pre) {\n    _classCallCheck(this, P256);\n\n    return _super11.call(this, {\n      id: 'P256',\n      ossl: 'prime256v1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // 2^256 - 2^224 + 2^192 + 2^96 - 1 (= 3 mod 4)\n      p: ['ffffffff 00000001 00000000 00000000', '00000000 ffffffff ffffffff ffffffff'],\n      // -3 mod p\n      a: ['ffffffff 00000001 00000000 00000000', '00000000 ffffffff ffffffff fffffffc'],\n      b: ['5ac635d8 aa3a93e7 b3ebbd55 769886bc', '651d06b0 cc53b0f6 3bce3c3e 27d2604b'],\n      n: ['ffffffff 00000000 ffffffff ffffffff', 'bce6faad a7179e84 f3b9cac2 fc632551'],\n      h: '1',\n      // SSWU\n      z: '-a',\n      g: [['6b17d1f2 e12c4247 f8bce6e5 63a440f2', '77037d81 2deb33a0 f4a13945 d898c296'], ['4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16', '2bce3357 6b315ece cbb64068 37bf51f5'], pre]\n    });\n  }\n\n  return P256;\n}(ShortCurve);\n/**\n * P384\n * https://tinyurl.com/fips-186-2 (page 32)\n * https://tinyurl.com/fips-186-3 (page 89)\n */\n\n\nvar P384 = /*#__PURE__*/function (_ShortCurve4) {\n  _inherits(P384, _ShortCurve4);\n\n  var _super12 = _createSuper(P384);\n\n  function P384(pre) {\n    _classCallCheck(this, P384);\n\n    return _super12.call(this, {\n      id: 'P384',\n      ossl: 'secp384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // 2^384 - 2^128 - 2^96 + 2^32 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff fffffffe', 'ffffffff 00000000 00000000 ffffffff'],\n      // -3 mod p\n      a: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff fffffffe', 'ffffffff 00000000 00000000 fffffffc'],\n      b: ['b3312fa7 e23ee7e4 988e056b e3f82d19', '181d9c6e fe814112 0314088f 5013875a', 'c656398d 8a2ed19d 2a85c8ed d3ec2aef'],\n      n: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff c7634d81 f4372ddf', '581a0db2 48b0a77a ecec196a ccc52973'],\n      h: '1',\n      // Icart\n      z: '-c',\n      g: [['aa87ca22 be8b0537 8eb1c71e f320ad74', '6e1d3b62 8ba79b98 59f741e0 82542a38', '5502f25d bf55296c 3a545e38 72760ab7'], ['3617de4a 96262c6f 5d9e98bf 9292dc29', 'f8f41dbd 289a147c e9da3113 b5f0b8c0', '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'], pre]\n    });\n  }\n\n  return P384;\n}(ShortCurve);\n/**\n * P521\n * https://tinyurl.com/fips-186-2 (page 33)\n * https://tinyurl.com/fips-186-3 (page 90)\n */\n\n\nvar P521 = /*#__PURE__*/function (_ShortCurve5) {\n  _inherits(P521, _ShortCurve5);\n\n  var _super13 = _createSuper(P521);\n\n  function P521(pre) {\n    _classCallCheck(this, P521);\n\n    return _super13.call(this, {\n      id: 'P521',\n      ossl: 'secp521r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: 'p521',\n      // 2^521 - 1 (= 3 mod 4)\n      p: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff'],\n      // -3 mod p\n      a: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'fffffffc'],\n      b: ['00000051 953eb961 8e1c9a1f 929a21a0', 'b68540ee a2da725b 99b315f3 b8b48991', '8ef109e1 56193951 ec7e937b 1652c0bd', '3bb1bf07 3573df88 3d2c34f1 ef451fd4', '6b503f00'],\n      n: ['000001ff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'fffffffa 51868783 bf2f966b 7fcc0148', 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e', '91386409'],\n      h: '1',\n      // SSWU\n      z: '-4',\n      g: [['000000c6 858e06b7 0404e9cd 9e3ecb66', '2395b442 9c648139 053fb521 f828af60', '6b4d3dba a14b5e77 efe75928 fe1dc127', 'a2ffa8de 3348b3c1 856a429b f97e7e31', 'c2e5bd66'], ['00000118 39296a78 9a3bc004 5c8a5fb4', '2c7d1bd9 98f54449 579b4468 17afbd17', '273e662c 97ee7299 5ef42640 c550b901', '3fad0761 353c7086 a272c240 88be9476', '9fd16650'], pre]\n    });\n  }\n\n  return P521;\n}(ShortCurve);\n/**\n * SECP256K1\n * https://www.secg.org/SEC2-Ver-1.0.pdf (page 15, section 2.7.1)\n * https://www.secg.org/sec2-v2.pdf (page 9, section 2.4.1)\n */\n\n\nvar SECP256K1 = /*#__PURE__*/function (_ShortCurve6) {\n  _inherits(SECP256K1, _ShortCurve6);\n\n  var _super14 = _createSuper(SECP256K1);\n\n  function SECP256K1(pre) {\n    _classCallCheck(this, SECP256K1);\n\n    return _super14.call(this, {\n      id: 'SECP256K1',\n      ossl: 'secp256k1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: 'k256',\n      // 2^256 - 2^32 - 977 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe fffffc2f'],\n      a: '0',\n      b: '7',\n      n: ['ffffffff ffffffff ffffffff fffffffe', 'baaedce6 af48a03b bfd25e8c d0364141'],\n      h: '1',\n      // SVDW\n      z: '1',\n      // sqrt(-3)\n      c: ['0a2d2ba9 3507f1df 233770c2 a797962c', 'c61f6d15 da14ecd4 7d8d27ae 1cd5f852'],\n      g: [['79be667e f9dcbbac 55a06295 ce870b07', '029bfcdb 2dce28d9 59f2815b 16f81798'], ['483ada77 26a3c465 5da4fbfc 0e1108a8', 'fd17b448 a6855419 9c47d08f fb10d4b8'], pre],\n      // Precomputed endomorphism.\n      endo: {\n        beta: ['7ae96a2b 657c0710 6e64479e ac3434e9', '9cf04975 12f58995 c1396c28 719501ee'],\n        lambda: ['5363ad4c c05c30e0 a5261c02 8812645a', '122e22ea 20816678 df02967c 1b23bd72'],\n        basis: [{\n          a: '3086d221a7d46bcde86c90e49284eb15',\n          b: '-e4437ed6010e88286f547fa90abfe4c3'\n        }, {\n          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n          b: '3086d221a7d46bcde86c90e49284eb15'\n        }],\n        pre: [384, ['3086d221 a7d46bcd e86c90e4 9284eb15', '3daa8a14 71e8ca7f e893209a 45dbb031'], ['-', 'e4437ed6 010e8828 6f547fa9 0abfe4c4', '221208ac 9df506c6 1571b4ae 8ac47f71']]\n      }\n    });\n  }\n\n  return SECP256K1;\n}(ShortCurve);\n/**\n * BRAINPOOLP256\n * https://tools.ietf.org/html/rfc5639#section-3.4\n */\n\n\nvar BRAINPOOLP256 = /*#__PURE__*/function (_ShortCurve7) {\n  _inherits(BRAINPOOLP256, _ShortCurve7);\n\n  var _super15 = _createSuper(BRAINPOOLP256);\n\n  function BRAINPOOLP256(pre) {\n    _classCallCheck(this, BRAINPOOLP256);\n\n    return _super15.call(this, {\n      id: 'BRAINPOOLP256',\n      ossl: 'brainpoolP256r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA256',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['a9fb57db a1eea9bc 3e660a90 9d838d72', '6e3bf623 d5262028 2013481d 1f6e5377'],\n      a: ['7d5a0975 fc2c3057 eef67530 417affe7', 'fb8055c1 26dc5c6c e94a4b44 f330b5d9'],\n      b: ['26dc5c6c e94a4b44 f330b5d9 bbd77cbf', '95841629 5cf7e1ce 6bccdc18 ff8c07b6'],\n      n: ['a9fb57db a1eea9bc 3e660a90 9d838d71', '8c397aa3 b561a6f7 901e0e82 974856a7'],\n      h: '1',\n      // Icart\n      z: '-2',\n      g: [['8bd2aeb9 cb7e57cb 2c4b482f fc81b7af', 'b9de27e1 e3bd23c2 3a4453bd 9ace3262'], ['547ef835 c3dac4fd 97f8461a 14611dc9', 'c2774513 2ded8e54 5c1d54c7 2f046997'], pre]\n    });\n  }\n\n  return BRAINPOOLP256;\n}(ShortCurve);\n/**\n * BRAINPOOLP384\n * https://tools.ietf.org/html/rfc5639#section-3.6\n */\n\n\nvar BRAINPOOLP384 = /*#__PURE__*/function (_ShortCurve8) {\n  _inherits(BRAINPOOLP384, _ShortCurve8);\n\n  var _super16 = _createSuper(BRAINPOOLP384);\n\n  function BRAINPOOLP384(pre) {\n    _classCallCheck(this, BRAINPOOLP384);\n\n    return _super16.call(this, {\n      id: 'BRAINPOOLP384',\n      ossl: 'brainpoolP384r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA384',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['8cb91e82 a3386d28 0f5d6f7e 50e641df', '152f7109 ed5456b4 12b1da19 7fb71123', 'acd3a729 901d1a71 87470013 3107ec53'],\n      a: ['7bc382c6 3d8c150c 3c72080a ce05afa0', 'c2bea28e 4fb22787 139165ef ba91f90f', '8aa5814a 503ad4eb 04a8c7dd 22ce2826'],\n      b: ['04a8c7dd 22ce2826 8b39b554 16f0447c', '2fb77de1 07dcd2a6 2e880ea5 3eeb62d5', '7cb43902 95dbc994 3ab78696 fa504c11'],\n      n: ['8cb91e82 a3386d28 0f5d6f7e 50e641df', '152f7109 ed5456b3 1f166e6c ac0425a7', 'cf3ab6af 6b7fc310 3b883202 e9046565'],\n      h: '1',\n      // SSWU\n      z: '-5',\n      g: [['1d1c64f0 68cf45ff a2a63a81 b7c13f6b', '8847a3e7 7ef14fe3 db7fcafe 0cbd10e8', 'e826e034 36d646aa ef87b2e2 47d4af1e'], ['8abe1d75 20f9c2a4 5cb1eb8e 95cfd552', '62b70b29 feec5864 e19c054f f9912928', '0e464621 77918111 42820341 263c5315'], pre]\n    });\n  }\n\n  return BRAINPOOLP384;\n}(ShortCurve);\n/**\n * BRAINPOOLP512\n * https://tools.ietf.org/html/rfc5639#section-3.7\n */\n\n\nvar BRAINPOOLP512 = /*#__PURE__*/function (_ShortCurve9) {\n  _inherits(BRAINPOOLP512, _ShortCurve9);\n\n  var _super17 = _createSuper(BRAINPOOLP512);\n\n  function BRAINPOOLP512(pre) {\n    _classCallCheck(this, BRAINPOOLP512);\n\n    return _super17.call(this, {\n      id: 'BRAINPOOLP512',\n      ossl: 'brainpoolP512r1',\n      type: 'short',\n      endian: 'be',\n      hash: 'SHA512',\n      prime: null,\n      // (= 3 mod 4)\n      p: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07', 'cb308db3 b3c9d20e d6639cca 70330871', '7d4d9b00 9bc66842 aecda12a e6a380e6', '2881ff2f 2d82c685 28aa6056 583a48f3'],\n      a: ['7830a331 8b603b89 e2327145 ac234cc5', '94cbdd8d 3df91610 a83441ca ea9863bc', '2ded5d5a a8253aa1 0a2ef1c9 8b9ac8b5', '7f1117a7 2bf2c7b9 e7c1ac4d 77fc94ca'],\n      b: ['3df91610 a83441ca ea9863bc 2ded5d5a', 'a8253aa1 0a2ef1c9 8b9ac8b5 7f1117a7', '2bf2c7b9 e7c1ac4d 77fc94ca dc083e67', '984050b7 5ebae5dd 2809bd63 8016f723'],\n      n: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07', 'cb308db3 b3c9d20e d6639cca 70330870', '553e5c41 4ca92619 41866119 7fac1047', '1db1d381 085ddadd b5879682 9ca90069'],\n      h: '1',\n      // Icart\n      z: '7',\n      g: [['81aee4bd d82ed964 5a21322e 9c4c6a93', '85ed9f70 b5d916c1 b43b62ee f4d0098e', 'ff3b1f78 e2d0d48d 50d1687b 93b97d5f', '7c6d5047 406a5e68 8b352209 bcb9f822'], ['7dde385d 566332ec c0eabfa9 cf7822fd', 'f209f700 24a57b1a a000c55b 881f8111', 'b2dcde49 4a5f485e 5bca4bd8 8a2763ae', 'd1ca2b2f a8f05406 78cd1e0f 3ad80892'], pre]\n    });\n  }\n\n  return BRAINPOOLP512;\n}(ShortCurve);\n/**\n * X25519\n * https://tools.ietf.org/html/rfc7748#section-4.1\n */\n\n\nvar X25519 = /*#__PURE__*/function (_MontCurve) {\n  _inherits(X25519, _MontCurve);\n\n  var _super18 = _createSuper(X25519);\n\n  function X25519() {\n    _classCallCheck(this, X25519);\n\n    return _super18.call(this, {\n      id: 'X25519',\n      ossl: 'X25519',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHA512',\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffed'],\n      // 486662\n      a: '76d06',\n      b: '1',\n      n: ['10000000 00000000 00000000 00000000', '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000009'], // See: https://www.rfc-editor.org/errata/eid4730\n      ['5f51e65e 475f794b 1fe122d3 88b72eb3', '6dc2b281 92839e4d d6163a5d 81312c14']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001'], ['6be4f497 f9a9c2af c21fa77a d7f4a6ef', '635a11c7 284a9363 e9a248ef 9c884415']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001'], ['141b0b68 06563d50 3de05885 280b5910', '9ca5ee38 d7b56c9c 165db710 6377bbd8']], [['57119fd0 dd4e22d8 868e1c58 c45c4404', '5bef839c 55b1d0b1 248c50a3 bc959c5f'], ['68c59389 3d458e64 31c6ca00 45fb5015', '20a44346 8eaa68dd 0f103842 048065b7']], [['57119fd0 dd4e22d8 868e1c58 c45c4404', '5bef839c 55b1d0b1 248c50a3 bc959c5f'], ['173a6c76 c2ba719b ce3935ff ba04afea', 'df5bbcb9 71559722 f0efc7bd fb7f9a36']], [['00b8495f 16056286 fdb1329c eb8d09da', '6ac49ff1 fae35616 aeb8413b 7c7aebe0'], ['3931c129 569e83a5 29482c14 e628b457', '933bfc29 ed801b4d 68871483 92507b1a']], [['00b8495f 16056286 fdb1329c eb8d09da', '6ac49ff1 fae35616 aeb8413b 7c7aebe0'], ['46ce3ed6 a9617c5a d6b7d3eb 19d74ba8', '6cc403d6 127fe4b2 9778eb7c 6daf84d3']]]\n    });\n  }\n\n  return X25519;\n}(MontCurve);\n/**\n * X448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n */\n\n\nvar X448 = /*#__PURE__*/function (_MontCurve2) {\n  _inherits(X448, _MontCurve2);\n\n  var _super19 = _createSuper(X448);\n\n  function X448() {\n    _classCallCheck(this, X448);\n\n    return _super19.call(this, {\n      id: 'X448',\n      ossl: 'X448',\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      // 156326\n      a: '262a6',\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000005'], ['7d235d12 95f5b1f6 6c98ab6e 58326fce', 'cbae5d34 f55545d0 60f75dc2 8df3f6ed', 'b8027e23 46430d21 1312c4b1 50677af7', '6fd7223d 457b5b1a']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['ba4d3a08 29b6112f 8812e51b a0bb2abe', 'bc1cb08e b48e5569 36ba50fd d2e7d68a', 'f8cb3216 0522425b 3f990812 abbe635a', 'd37a21e1 7551b193']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['45b2c5f7 d649eed0 77ed1ae4 5f44d541', '43e34f71 4b71aa96 c945af01 2d182975', '0734cde9 faddbda4 c066f7ed 54419ca5', '2c85de1e 8aae4e6c']]]\n    });\n  }\n\n  return X448;\n}(MontCurve);\n/**\n * MONT448\n * Isomorphic to Ed448-Goldilocks.\n */\n\n\nvar MONT448 = /*#__PURE__*/function (_MontCurve3) {\n  _inherits(MONT448, _MontCurve3);\n\n  var _super20 = _createSuper(MONT448);\n\n  function MONT448() {\n    _classCallCheck(this, MONT448);\n\n    return _super20.call(this, {\n      id: 'MONT448',\n      ossl: null,\n      type: 'mont',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      // -78160 / -39082 mod p\n      a: ['b2cf97d2 d43459a9 31ed36b1 fc4e3cb5', '5d93f8d2 22746997 60ccffc6 49961ed6', 'c5b05fca c24864ed 6fb59697 931b78da', '84ddecd8 ca2b5cfb'],\n      b: '1',\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['ac0d24cc c6c75cb0 eb71f81e 7a6edf51', '48e88aee 009a2a24 e795687e c28e125a', '3e6730a6 0d46367b aa7fe99d 152128dc', '41321bc7 7817f059'], ['5a4437f6 80c0d0db 9b061276 d5d0ffcc', 'e786ff33 b6a53d30 98746425 82e66f09', '4433dae7 7244a6e2 6b11e905 7228f483', '556c41a5 913f55fe']],\n      torsion: [[], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['bec92fd0 6da2acf2 b4e261e8 7cef0d34', '22e75c18 3c589857 b71924e5 73c2f9ce', 'e18da5f2 466e2f39 3c2eedf0 f105a60a', 'b40c717d 4f1e1fd7']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['4136d02f 925d530d 4b1d9e17 8310f2cb', 'dd18a3e7 c3a767a8 48e6db19 8c3d0631', '1e725a0d b991d0c6 c3d1120f 0efa59f5', '4bf38e82 b0e1e028']]]\n    });\n  }\n\n  return MONT448;\n}(MontCurve);\n/**\n * ED25519\n * https://tools.ietf.org/html/rfc8032#section-5.1\n */\n\n\nvar ED25519 = /*#__PURE__*/function (_EdwardsCurve) {\n  _inherits(ED25519, _EdwardsCurve);\n\n  var _super21 = _createSuper(ED25519);\n\n  function ED25519(pre) {\n    _classCallCheck(this, ED25519);\n\n    return _super21.call(this, {\n      id: 'ED25519',\n      ossl: 'ED25519',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHA512',\n      prefix: 'SigEd25519 no Ed25519 collisions',\n      context: false,\n      prime: 'p25519',\n      // 2^255 - 19 (= 5 mod 8)\n      p: ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffed'],\n      a: '-1',\n      // -121665 / 121666 mod p\n      d: ['52036cee 2b6ffe73 8cc74079 7779e898', '00700a4d 4141d8ab 75eb4dca 135978a3'],\n      n: ['10000000 00000000 00000000 00000000', '14def9de a2f79cd6 5812631a 5cf5d3ed'],\n      h: '8',\n      // Elligator 2\n      z: '2',\n      g: [['216936d3 cd6e53fe c0a4e231 fdd6dc5c', '692cc760 9525a7b2 c9562d60 8f25d51a'], // 4/5\n      ['66666666 66666666 66666666 66666666', '66666666 66666666 66666666 66666658'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000'], ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff ffffffec']], [['2b832480 4fc1df0b 2b4d0099 3dfbd7a7', '2f431806 ad2fe478 c4ee1b27 4a0ea0b0'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['547cdb7f b03e20f4 d4b2ff66 c2042858', 'd0bce7f9 52d01b87 3b11e4d8 b5f15f3d'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000']], [['1fd5b9a0 06394a28 e9339932 38de4abb', '5c193c70 13e5e238 dea14646 c545d14a'], ['05fc536d 880238b1 3933c6d3 05acdfd5', 'f098eff2 89f4c345 b027b2c2 8f95e826']], [['602a465f f9c6b5d7 16cc66cd c721b544', 'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'], ['05fc536d 880238b1 3933c6d3 05acdfd5', 'f098eff2 89f4c345 b027b2c2 8f95e826']], [['1fd5b9a0 06394a28 e9339932 38de4abb', '5c193c70 13e5e238 dea14646 c545d14a'], ['7a03ac92 77fdc74e c6cc392c fa53202a', '0f67100d 760b3cba 4fd84d3d 706a17c7']], [['602a465f f9c6b5d7 16cc66cd c721b544', 'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'], ['7a03ac92 77fdc74e c6cc392c fa53202a', '0f67100d 760b3cba 4fd84d3d 706a17c7']]]\n    });\n  }\n\n  return ED25519;\n}(EdwardsCurve);\n/**\n * ISO448\n * https://tools.ietf.org/html/rfc7748#section-4.2\n * https://git.zx2c4.com/goldilocks/tree/_aux/ristretto/ristretto.sage#n658\n */\n\n\nvar ISO448 = /*#__PURE__*/function (_EdwardsCurve2) {\n  _inherits(ISO448, _EdwardsCurve2);\n\n  var _super22 = _createSuper(ISO448);\n\n  function ISO448(pre) {\n    _classCallCheck(this, ISO448);\n\n    return _super22.call(this, {\n      id: 'ISO448',\n      ossl: null,\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      a: '1',\n      // 39082 / 39081 mod p\n      d: ['d78b4bdc 7f0daf19 f24f38c2 9373a2cc', 'ad461572 42a50f37 809b1da3 412a12e7', '9ccc9c81 264cfe9a d0809970 58fb61c4', '243cc32d baa156b9'],\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['79a70b2b 70400553 ae7c9df4 16c792c6', '1128751a c9296924 0c25a07d 728bdc93', 'e21f7787 ed697224 9de732f3 8496cd11', '69871309 3e9c04fc'], // Note: the RFC has this wrong.\n      ['7fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 80000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']]]\n    });\n  }\n\n  return ISO448;\n}(EdwardsCurve);\n/**\n * ED448\n * https://tools.ietf.org/html/rfc8032#section-5.2\n */\n\n\nvar ED448 = /*#__PURE__*/function (_EdwardsCurve3) {\n  _inherits(ED448, _EdwardsCurve3);\n\n  var _super23 = _createSuper(ED448);\n\n  function ED448(pre) {\n    _classCallCheck(this, ED448);\n\n    return _super23.call(this, {\n      id: 'ED448',\n      ossl: 'ED448',\n      type: 'edwards',\n      endian: 'le',\n      hash: 'SHAKE256',\n      prefix: 'SigEd448',\n      context: true,\n      prime: 'p448',\n      // 2^448 - 2^224 - 1 (= 3 mod 4)\n      p: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff'],\n      a: '1',\n      // -39081 mod p\n      d: ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffff6756'],\n      n: ['3fffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff ffffffff 7cca23e9', 'c44edb49 aed63690 216cc272 8dc58f55', '2378c292 ab5844f3'],\n      h: '4',\n      // Elligator 2\n      z: '-1',\n      g: [['4f1970c6 6bed0ded 221d15a6 22bf36da', '9e146570 470f1767 ea6de324 a3d3a464', '12ae1af7 2ab66511 433b80e1 8b00938e', '2626a82b c70cc05e'], ['693f4671 6eb6bc24 88762037 56c9c762', '4bea7373 6ca39840 87789c1e 05a0c2d7', '3ad3ff1c e67c39c4 fdbd132c 4ed7c8ad', '9808795b f230fa14'], pre],\n      torsion: [[['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000'], ['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe']], [['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000001'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']], [['ffffffff ffffffff ffffffff ffffffff', 'ffffffff ffffffff fffffffe ffffffff', 'ffffffff ffffffff ffffffff ffffffff', 'ffffffff fffffffe'], ['00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000 00000000 00000000', '00000000 00000000']]]\n    });\n  }\n\n  return ED448;\n}(EdwardsCurve);\n/*\n * Curve Registry\n */\n\n\nvar curves = {\n  __proto__: null,\n  P192: P192,\n  P224: P224,\n  P256: P256,\n  P384: P384,\n  P521: P521,\n  SECP256K1: SECP256K1,\n  BRAINPOOLP256: BRAINPOOLP256,\n  BRAINPOOLP384: BRAINPOOLP384,\n  BRAINPOOLP512: BRAINPOOLP512,\n  X25519: X25519,\n  X448: X448,\n  MONT448: MONT448,\n  ED25519: ED25519,\n  ISO448: ISO448,\n  ED448: ED448\n};\nvar cache = {\n  __proto__: null,\n  P192: null,\n  P224: null,\n  P256: null,\n  P384: null,\n  P521: null,\n  SECP256K1: null,\n  BRAINPOOLP256: null,\n  BRAINPOOLP384: null,\n  BRAINPOOLP512: null,\n  X25519: null,\n  X448: null,\n  MONT448: null,\n  ED25519: null,\n  ISO448: null,\n  ED448: null\n};\n\nfunction curve(name) {\n  assert(typeof name === 'string');\n  var key = name.toUpperCase();\n  var curve = cache[key];\n\n  if (!curve) {\n    var _Curve4 = curves[key];\n    if (!_Curve4) throw new Error(\"Curve not found: \\\"\".concat(name, \"\\\".\"));\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    curve = _construct(_Curve4, args);\n    cache[key] = curve;\n  }\n\n  return curve;\n}\n\nfunction register(name, Curve) {\n  assert(typeof name === 'string');\n  assert(typeof Curve === 'function');\n  var key = name.toUpperCase();\n  if (curves[key]) throw new Error(\"Curve already registered: \\\"\".concat(name, \"\\\".\"));\n  curves[key] = Curve;\n  cache[key] = null;\n}\n/*\n * Scalar Recoding\n */\n\n\nfunction getNAF(k, width, max) {\n  // Computing the width-w NAF of a positive integer.\n  //\n  // [GECC] Algorithm 3.35, Page 100, Section 3.3.\n  //\n  // The above document describes a rather abstract\n  // method of recoding. The more optimal method\n  // below was ported from libsecp256k1.\n  assert(k instanceof BN);\n  assert(!k.red);\n  assert(width >>> 0 === width);\n  assert(max >>> 0 === max);\n  var naf = new Array(max);\n  var bits = k.bitLength() + 1;\n  var sign = k.sign() | 1;\n  assert(bits <= max);\n\n  for (var _i5 = 0; _i5 < max; _i5++) {\n    naf[_i5] = 0;\n  }\n\n  var i = 0;\n  var carry = 0;\n  var word;\n\n  while (i < bits) {\n    if (k.bit(i) === carry) {\n      i += 1;\n      continue;\n    }\n\n    word = k.bits(i, width) + carry;\n    carry = word >> width - 1 & 1;\n    word -= carry << width;\n    naf[i] = sign * word;\n    i += width;\n  }\n\n  assert(carry === 0);\n  return naf;\n}\n\nfunction getFixedNAF(k, width, max, step) {\n  assert(step >>> 0 === step); // Recode to NAF.\n\n  var naf = getNAF(k, width, max); // Translate into more windowed form.\n\n  var len = Math.ceil(naf.length / step);\n  var repr = new Array(len);\n  var i = 0;\n\n  for (var j = 0; j < naf.length; j += step) {\n    var nafW = 0;\n\n    for (var _k = j + step - 1; _k >= j; _k--) {\n      nafW = (nafW << 1) + naf[_k];\n    }\n\n    repr[i++] = nafW;\n  }\n\n  assert(i === len);\n  return repr;\n}\n\nfunction getJSF(k1, k2, max) {\n  // Joint sparse form.\n  //\n  // [GECC] Algorithm 3.50, Page 111, Section 3.3.\n  assert(k1 instanceof BN);\n  assert(k2 instanceof BN);\n  assert(!k1.red);\n  assert(!k2.red);\n  assert(max >>> 0 === max);\n  var jsf = [new Array(max), new Array(max)];\n  var bits = Math.max(k1.bitLength(), k2.bitLength()) + 1;\n  var s1 = k1.sign() | 1;\n  var s2 = k2.sign() | 1;\n  assert(bits <= max);\n  var d1 = 0;\n  var d2 = 0;\n\n  for (var i = 0; i < bits; i++) {\n    var b1 = k1.bits(i, 3);\n    var b2 = k2.bits(i, 3); // First phase.\n\n    var m14 = (b1 & 3) + d1 & 3;\n    var m24 = (b2 & 3) + d2 & 3;\n    var u1 = 0;\n    var u2 = 0;\n    if (m14 === 3) m14 = -1;\n    if (m24 === 3) m24 = -1;\n\n    if (m14 & 1) {\n      var m8 = (b1 & 7) + d1 & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n    }\n\n    if (m24 & 1) {\n      var _m = (b2 & 7) + d2 & 7;\n\n      if ((_m === 3 || _m === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n    }\n\n    jsf[0][i] = u1 * s1;\n    jsf[1][i] = u2 * s2; // Second phase.\n\n    if (2 * d1 === 1 + u1) d1 = 1 - d1;\n    if (2 * d2 === 1 + u2) d2 = 1 - d2;\n  }\n\n  for (var _i6 = bits; _i6 < max; _i6++) {\n    jsf[0][_i6] = 0;\n    jsf[1][_i6] = 0;\n  }\n\n  return jsf;\n}\n\nfunction getJNAF(c1, c2, max) {\n  var jsf = getJSF(c1, c2, max);\n  var naf = new Array(max); // JSF -> NAF conversion.\n\n  for (var i = 0; i < max; i++) {\n    var ja = jsf[0][i];\n    var jb = jsf[1][i];\n    naf[i] = jsfIndex[(ja + 1) * 3 + (jb + 1)];\n  }\n\n  return naf;\n}\n/*\n * Helpers\n */\n\n\nfunction assert(val, msg) {\n  if (!val) {\n    var err = new Error(msg || 'Assertion failed');\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert);\n    throw err;\n  }\n}\n\nfunction wrapErrors(fn) {\n  assert(typeof fn === 'function');\n\n  try {\n    return fn();\n  } catch (e) {\n    if (e.message === 'X is not a square mod P.' || e.message === 'Not invertible.') {\n      throw new Error('Invalid point.');\n    }\n\n    throw e;\n  }\n}\n\nfunction mod(x, y) {\n  // Euclidean modulo.\n  var r = x % y;\n\n  if (r < 0) {\n    if (y < 0) r -= y;else r += y;\n  }\n\n  return r;\n}\n\nfunction cubeRoot(x) {\n  assert(x instanceof BN);\n  assert(x.red);\n  var p = x.red.m;\n  if (p.cmpn(3) <= 0) return x.clone(); // p = 2 mod 3\n\n  if (p.modrn(3) === 2) {\n    // e = (2 * p - 1) / 3\n    var e = p.ushln(1).isubn(1).idivn(3);\n    return x.redPow(e);\n  }\n\n  var mod9 = p.modrn(9); // p = 4 mod 9\n\n  if (mod9 === 4) {\n    // e = (2 * p + 1) / 9\n    var _e = p.ushln(1).iaddn(1).idivn(9);\n\n    var r = x.redPow(_e);\n    var c = r.redSqr().redMul(r);\n    if (!c.eq(x)) throw new Error('X is not a cube mod P.');\n    return r;\n  } // p = 7 mod 9\n\n\n  if (mod9 === 7) {\n    // e = (p + 2) / 9\n    var _e2 = p.addn(2).idivn(9);\n\n    var _r = x.redPow(_e2);\n\n    var _c5 = _r.redSqr().redMul(_r);\n\n    if (!_c5.eq(x)) throw new Error('X is not a cube mod P.');\n    return _r;\n  }\n\n  throw new Error('Not implemented.');\n}\n\nfunction cubeRoots(x) {\n  var r0 = cubeRoot(x); // p = 1 mod 3\n\n  if (x.red.m.modrn(3) === 1) {\n    // Multiply by roots of unity to find other roots.\n    var two = new BN(2).toRed(x.red);\n    var three = new BN(3).toRed(x.red);\n    var i2 = two.redInvert();\n    var s1 = three.redNeg().redSqrt().redMul(i2);\n    var s2 = s1.redNeg();\n    var u1 = s1.redSub(i2);\n    var u2 = s2.redSub(i2);\n    var r1 = r0.redMul(u1);\n    var r2 = r0.redMul(u2);\n    return [r0, r1, r2];\n  } // p = 2 mod 3 guarantees 1 cube root per element.\n\n\n  return [r0];\n}\n\nfunction uncube(x) {\n  // Find a cube root which is also a quadratic residue.\n  var _iterator6 = _createForOfIteratorHelper(cubeRoots(x)),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var root = _step6.value;\n      if (root.redJacobi() >= 0) return root;\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  throw new Error('X^(1/3) is not a square mod P.');\n}\n\nfunction randomInt(rng) {\n  return BN.randomBits(rng, 32).toNumber();\n}\n\nfunction memoize(method, self) {\n  var cache = new WeakMap();\n  return function memoized(curve, invert) {\n    var i = invert & 1;\n    var item = cache.get(curve);\n    if (item && item[i] !== null) return item[i];\n    var result = method.call(self, curve, invert);\n    if (!cache.has(curve)) cache.set(curve, [null, null]);\n    cache.get(curve)[i] = result;\n    return result;\n  };\n}\n\nfunction _toPretty(x, size) {\n  assert(x instanceof BN);\n  assert(size >>> 0 === size);\n  if (size & 7) size += 8 - (size & 7);\n  var str = x.toString(16, size);\n  var chunks = [];\n  var out = [];\n  assert((str.length & 7) === 0);\n\n  for (var i = 0; i < str.length; i += 8) {\n    chunks.push(str.slice(i, i + 8));\n  }\n\n  for (var _i7 = 0; _i7 < chunks.length; _i7 += 4) {\n    out.push(chunks.slice(_i7, _i7 + 4).join(' '));\n  }\n\n  return out;\n}\n/*\n * Expose\n */\n\n\nexports.Curve = Curve;\nexports.Point = Point;\nexports.ShortCurve = ShortCurve;\nexports.ShortPoint = ShortPoint;\nexports.JPoint = JPoint;\nexports.MontCurve = MontCurve;\nexports.MontPoint = MontPoint;\nexports.XPoint = XPoint;\nexports.EdwardsCurve = EdwardsCurve;\nexports.EdwardsPoint = EdwardsPoint;\nexports.curves = curves;\nexports.curve = curve;\nexports.register = register;"],"sourceRoot":""}